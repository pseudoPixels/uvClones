$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java 549 556
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/FigureAndEnumerator.java 30 41
----------------------------------------

public Tool getDefaultTool () {
    if (fDefaultToolButton != null) {
        return fDefaultToolButton.tool ();
    } else {
        return null;
    }
}

----------------------------------------

public Figure nextFigure () {
    if (myFE1.hasNextFigure ()) {
        return myFE1.nextFigure ();
    } else if (myFE2.hasNextFigure ()) {
        return myFE2.nextFigure ();
    } else {
        return null;
    }

}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java 549 556
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/HandleAndEnumerator.java 33 44
----------------------------------------

public Tool getDefaultTool () {
    if (fDefaultToolButton != null) {
        return fDefaultToolButton.tool ();
    } else {
        return null;
    }
}

----------------------------------------

public Handle nextHandle () {
    if (myHE1.hasNextHandle ()) {
        return myHE1.nextHandle ();
    } else if (myHE2.hasNextHandle ()) {
        return myHE2.nextHandle ();
    } else {
        return null;
    }

}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java 808 817
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java 819 828
----------------------------------------

protected void fireViewSelectionChangedEvent (DrawingView oldView, DrawingView newView) {
    final Object [] listeners = listenerList.getListenerList ();
    ViewChangeListener vsl = null;
    for (int i = listeners.length - 2;
    i >= 0; i -= 2) {
        if (listeners [i] == ViewChangeListener.class) {
            vsl = (ViewChangeListener) listeners [i + 1];
            vsl.viewSelectionChanged (oldView, newView);
        }
    }
}

----------------------------------------

protected void fireViewCreatedEvent (DrawingView view) {
    final Object [] listeners = listenerList.getListenerList ();
    ViewChangeListener vsl = null;
    for (int i = listeners.length - 2;
    i >= 0; i -= 2) {
        if (listeners [i] == ViewChangeListener.class) {
            vsl = (ViewChangeListener) listeners [i + 1];
            vsl.viewCreated (view);
        }
    }
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java 808 817
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java 830 839
----------------------------------------

protected void fireViewSelectionChangedEvent (DrawingView oldView, DrawingView newView) {
    final Object [] listeners = listenerList.getListenerList ();
    ViewChangeListener vsl = null;
    for (int i = listeners.length - 2;
    i >= 0; i -= 2) {
        if (listeners [i] == ViewChangeListener.class) {
            vsl = (ViewChangeListener) listeners [i + 1];
            vsl.viewSelectionChanged (oldView, newView);
        }
    }
}

----------------------------------------

protected void fireViewDestroyingEvent (DrawingView view) {
    final Object [] listeners = listenerList.getListenerList ();
    ViewChangeListener vsl = null;
    for (int i = listeners.length - 2;
    i >= 0; i -= 2) {
        if (listeners [i] == ViewChangeListener.class) {
            vsl = (ViewChangeListener) listeners [i + 1];
            vsl.viewDestroying (view);
        }
    }
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java 819 828
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/application/DrawApplication.java 830 839
----------------------------------------

protected void fireViewCreatedEvent (DrawingView view) {
    final Object [] listeners = listenerList.getListenerList ();
    ViewChangeListener vsl = null;
    for (int i = listeners.length - 2;
    i >= 0; i -= 2) {
        if (listeners [i] == ViewChangeListener.class) {
            vsl = (ViewChangeListener) listeners [i + 1];
            vsl.viewCreated (view);
        }
    }
}

----------------------------------------

protected void fireViewDestroyingEvent (DrawingView view) {
    final Object [] listeners = listenerList.getListenerList ();
    ViewChangeListener vsl = null;
    for (int i = listeners.length - 2;
    i >= 0; i -= 2) {
        if (listeners [i] == ViewChangeListener.class) {
            vsl = (ViewChangeListener) listeners [i + 1];
            vsl.viewDestroying (view);
        }
    }
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/applet/DrawApplet.java 461 475
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/applet/DrawApplet.java 477 494
----------------------------------------

private void readFromStorableInput (String filename) {
    try {
        URL url = new URL (getCodeBase (), filename);
        InputStream stream = url.openStream ();
        StorableInput input = new StorableInput (stream);
        fDrawing.release ();
        fDrawing = (Drawing) input.readStorable ();
        view ().setDrawing (fDrawing);
    } catch (IOException e) {
        initDrawing ();
        showStatus ("Error:" + e);
    }
}

----------------------------------------

private void readFromObjectInput (String filename) {
    try {
        URL url = new URL (getCodeBase (), filename);
        InputStream stream = url.openStream ();
        ObjectInput input = new ObjectInputStream (stream);
        fDrawing.release ();
        fDrawing = (Drawing) input.readObject ();
        view ().setDrawing (fDrawing);
    } catch (IOException e) {
        initDrawing ();
        showStatus ("Error: " + e);
    } catch (ClassNotFoundException e) {
        initDrawing ();
        showStatus ("Class not found: " + e);
    }
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/SendToBackCommand.java 35 44
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/SelectAllCommand.java 34 40
----------------------------------------

public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selectionZOrdered ());
    FigureEnumeration fe = getUndoActivity ().getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        view ().drawing ().sendToBack (fe.nextFigure ());
    }
    view ().checkDamage ();
}

----------------------------------------

public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selection ());
    view ().addToSelectionAll (view ().drawing ().figures ());
    view ().checkDamage ();
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/SendToBackCommand.java 35 44
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/DeleteCommand.java 34 40
----------------------------------------

public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selectionZOrdered ());
    FigureEnumeration fe = getUndoActivity ().getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        view ().drawing ().sendToBack (fe.nextFigure ());
    }
    view ().checkDamage ();
}

----------------------------------------

public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selection ());
    deleteFigures (getUndoActivity ().getAffectedFigures ());
    view ().checkDamage ();
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/SendToBackCommand.java 35 44
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/AlignCommand.java 125 132
----------------------------------------

public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selectionZOrdered ());
    FigureEnumeration fe = getUndoActivity ().getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        view ().drawing ().sendToBack (fe.nextFigure ());
    }
    view ().checkDamage ();
}

----------------------------------------

public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selection ());
    ((AlignCommand.UndoActivity) getUndoActivity ()).alignAffectedFigures (getAlignment ());
    view ().checkDamage ();
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/SendToBackCommand.java 35 44
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/DuplicateCommand.java 33 46
----------------------------------------

public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selectionZOrdered ());
    FigureEnumeration fe = getUndoActivity ().getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        view ().drawing ().sendToBack (fe.nextFigure ());
    }
    view ().checkDamage ();
}

----------------------------------------

public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    FigureSelection selection = view ().getFigureSelection ();
    FigureEnumeration figures = (FigureEnumeration) selection.getData (StandardFigureSelection.TYPE);
    getUndoActivity ().setAffectedFigures (figures);
    view ().clearSelection ();
    getUndoActivity ().setAffectedFigures (insertFigures (getUndoActivity ().getAffectedFigures (), 10, 10));
    view ().checkDamage ();
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/SendToBackCommand.java 35 44
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/BringToFrontCommand.java 35 44
----------------------------------------

public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selectionZOrdered ());
    FigureEnumeration fe = getUndoActivity ().getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        view ().drawing ().sendToBack (fe.nextFigure ());
    }
    view ().checkDamage ();
}

----------------------------------------

public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selection ());
    FigureEnumeration fe = getUndoActivity ().getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        view ().drawing ().bringToFront (fe.nextFigure ());
    }
    view ().checkDamage ();
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/SendToBackCommand.java 35 44
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ChangeAttributeCommand.java 43 52
----------------------------------------

public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selectionZOrdered ());
    FigureEnumeration fe = getUndoActivity ().getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        view ().drawing ().sendToBack (fe.nextFigure ());
    }
    view ().checkDamage ();
}

----------------------------------------

public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selection ());
    FigureEnumeration fe = getUndoActivity ().getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        fe.nextFigure ().setAttribute (fAttribute, fValue);
    }
    view ().checkDamage ();
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/SendToBackCommand.java 35 44
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/CutCommand.java 37 45
----------------------------------------

public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selectionZOrdered ());
    FigureEnumeration fe = getUndoActivity ().getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        view ().drawing ().sendToBack (fe.nextFigure ());
    }
    view ().checkDamage ();
}

----------------------------------------

public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selection ());
    copyFigures (getUndoActivity ().getAffectedFigures (), view ().selectionCount ());
    deleteFigures (getUndoActivity ().getAffectedFigures ());
    view ().checkDamage ();
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/SendToBackCommand.java 64 77
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/SendToBackCommand.java 79 91
----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        Figure currentFigure = fe.nextFigure ();
        int currentFigureLayer = getOriginalLayer (currentFigure);
        getDrawingView ().drawing ().sendToLayer (currentFigure, currentFigureLayer);
    }
    return true;
}

----------------------------------------

public boolean redo () {
    if (! isRedoable ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        sendToCommand (fe.nextFigure ());
    }
    return true;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/SendToBackCommand.java 64 77
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/DragTracker.java 107 113
----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        Figure currentFigure = fe.nextFigure ();
        int currentFigureLayer = getOriginalLayer (currentFigure);
        getDrawingView ().drawing ().sendToLayer (currentFigure, currentFigureLayer);
    }
    return true;
}

----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    moveAffectedFigures (getBackupPoint (), getOriginalPoint ());
    return true;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/SendToBackCommand.java 64 77
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/PasteCommand.java 88 102
----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        Figure currentFigure = fe.nextFigure ();
        int currentFigureLayer = getOriginalLayer (currentFigure);
        getDrawingView ().drawing ().sendToLayer (currentFigure, currentFigureLayer);
    }
    return true;
}

----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    DeleteFromDrawingVisitor deleteVisitor = new DeleteFromDrawingVisitor (getDrawingView ().drawing ());
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        fe.nextFigure ().visit (deleteVisitor);
    }
    getDrawingView ().clearSelection ();
    return true;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/SendToBackCommand.java 64 77
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/SelectAllCommand.java 70 79
----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        Figure currentFigure = fe.nextFigure ();
        int currentFigureLayer = getOriginalLayer (currentFigure);
        getDrawingView ().drawing ().sendToLayer (currentFigure, currentFigureLayer);
    }
    return true;
}

----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    getDrawingView ().clearSelection ();
    getDrawingView ().addToSelectionAll (getAffectedFigures ());
    return true;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/SendToBackCommand.java 64 77
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/AlignCommand.java 161 177
----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        Figure currentFigure = fe.nextFigure ();
        int currentFigureLayer = getOriginalLayer (currentFigure);
        getDrawingView ().drawing ().sendToLayer (currentFigure, currentFigureLayer);
    }
    return true;
}

----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        Figure f = fe.nextFigure ();
        Point originalPoint = getOriginalPoint (f);
        Point currentPoint = f.displayBox ().getLocation ();
        f.moveBy (- currentPoint.x + originalPoint.x, - currentPoint.y + originalPoint.y);
    }
    return true;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/SendToBackCommand.java 64 77
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ChangeConnectionHandle.java 217 224
----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        Figure currentFigure = fe.nextFigure ();
        int currentFigureLayer = getOriginalLayer (currentFigure);
        getDrawingView ().drawing ().sendToLayer (currentFigure, currentFigureLayer);
    }
    return true;
}

----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    swapConnectors ();
    return true;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/SendToBackCommand.java 64 77
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ChangeAttributeCommand.java 79 93
----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        Figure currentFigure = fe.nextFigure ();
        int currentFigureLayer = getOriginalLayer (currentFigure);
        getDrawingView ().drawing ().sendToLayer (currentFigure, currentFigureLayer);
    }
    return true;
}

----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        Figure f = fe.nextFigure ();
        if (getOriginalValue (f) != null) {
            f.setAttribute (getAttribute (), getOriginalValue (f));
        }
    }
    return true;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/SendToBackCommand.java 64 77
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ChangeAttributeCommand.java 95 109
----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        Figure currentFigure = fe.nextFigure ();
        int currentFigureLayer = getOriginalLayer (currentFigure);
        getDrawingView ().drawing ().sendToLayer (currentFigure, currentFigureLayer);
    }
    return true;
}

----------------------------------------

public boolean redo () {
    if (! isRedoable ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        Figure f = fe.nextFigure ();
        if (getBackupValue () != null) {
            f.setAttribute (getAttribute (), getBackupValue ());
        }
    }
    return true;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/SendToBackCommand.java 64 77
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ConnectionTool.java 396 412
----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        Figure currentFigure = fe.nextFigure ();
        int currentFigureLayer = getOriginalLayer (currentFigure);
        getDrawingView ().drawing ().sendToLayer (currentFigure, currentFigureLayer);
    }
    return true;
}

----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    getConnection ().disconnectStart ();
    getConnection ().disconnectEnd ();
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        getDrawingView ().drawing ().orphan (fe.nextFigure ());
    }
    getDrawingView ().clearSelection ();
    return true;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/SendToBackCommand.java 79 91
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/DragTracker.java 119 125
----------------------------------------

public boolean redo () {
    if (! isRedoable ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        sendToCommand (fe.nextFigure ());
    }
    return true;
}

----------------------------------------

public boolean redo () {
    if (! super.redo ()) {
        return false;
    }
    moveAffectedFigures (getOriginalPoint (), getBackupPoint ());
    return true;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/SendToBackCommand.java 79 91
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/PasteCommand.java 88 102
----------------------------------------

public boolean redo () {
    if (! isRedoable ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        sendToCommand (fe.nextFigure ());
    }
    return true;
}

----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    DeleteFromDrawingVisitor deleteVisitor = new DeleteFromDrawingVisitor (getDrawingView ().drawing ());
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        fe.nextFigure ().visit (deleteVisitor);
    }
    getDrawingView ().clearSelection ();
    return true;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/SendToBackCommand.java 79 91
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/PasteCommand.java 104 115
----------------------------------------

public boolean redo () {
    if (! isRedoable ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        sendToCommand (fe.nextFigure ());
    }
    return true;
}

----------------------------------------

public boolean redo () {
    if (! isRedoable ()) {
        return false;
    }
    getDrawingView ().clearSelection ();
    setAffectedFigures (getDrawingView ().insertFigures (getAffectedFigures (), 0, 0, false));
    return true;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/SendToBackCommand.java 79 91
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/BoxHandleKit.java 132 139
----------------------------------------

public boolean redo () {
    if (! isRedoable ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        sendToCommand (fe.nextFigure ());
    }
    return true;
}

----------------------------------------

public boolean redo () {
    if (! isRedoable ()) {
        return false;
    }
    return resetDisplayBox ();
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/SendToBackCommand.java 79 91
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/AlignCommand.java 161 177
----------------------------------------

public boolean redo () {
    if (! isRedoable ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        sendToCommand (fe.nextFigure ());
    }
    return true;
}

----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        Figure f = fe.nextFigure ();
        Point originalPoint = getOriginalPoint (f);
        Point currentPoint = f.displayBox ().getLocation ();
        f.moveBy (- currentPoint.x + originalPoint.x, - currentPoint.y + originalPoint.y);
    }
    return true;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/SendToBackCommand.java 79 91
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/AlignCommand.java 179 185
----------------------------------------

public boolean redo () {
    if (! isRedoable ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        sendToCommand (fe.nextFigure ());
    }
    return true;
}

----------------------------------------

public boolean redo () {
    if (! isRedoable ()) {
        return false;
    }
    alignAffectedFigures (getAppliedAlignment ());
    return true;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/SendToBackCommand.java 79 91
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ChangeConnectionHandle.java 226 234
----------------------------------------

public boolean redo () {
    if (! isRedoable ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        sendToCommand (fe.nextFigure ());
    }
    return true;
}

----------------------------------------

public boolean redo () {
    if (! isRedoable ()) {
        return false;
    }
    swapConnectors ();
    return true;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/SendToBackCommand.java 79 91
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ChangeAttributeCommand.java 79 93
----------------------------------------

public boolean redo () {
    if (! isRedoable ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        sendToCommand (fe.nextFigure ());
    }
    return true;
}

----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        Figure f = fe.nextFigure ();
        if (getOriginalValue (f) != null) {
            f.setAttribute (getAttribute (), getOriginalValue (f));
        }
    }
    return true;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/SendToBackCommand.java 79 91
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ChangeAttributeCommand.java 95 109
----------------------------------------

public boolean redo () {
    if (! isRedoable ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        sendToCommand (fe.nextFigure ());
    }
    return true;
}

----------------------------------------

public boolean redo () {
    if (! isRedoable ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        Figure f = fe.nextFigure ();
        if (getBackupValue () != null) {
            f.setAttribute (getAttribute (), getBackupValue ());
        }
    }
    return true;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/SendToBackCommand.java 79 91
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ConnectionTool.java 396 412
----------------------------------------

public boolean redo () {
    if (! isRedoable ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        sendToCommand (fe.nextFigure ());
    }
    return true;
}

----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    getConnection ().disconnectStart ();
    getConnection ().disconnectEnd ();
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        getDrawingView ().drawing ().orphan (fe.nextFigure ());
    }
    getDrawingView ().clearSelection ();
    return true;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/SendToBackCommand.java 79 91
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ConnectionTool.java 418 430
----------------------------------------

public boolean redo () {
    if (! isRedoable ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        sendToCommand (fe.nextFigure ());
    }
    return true;
}

----------------------------------------

public boolean redo () {
    if (! super.redo ()) {
        return false;
    }
    getConnection ().connectStart (myStartConnector);
    getConnection ().connectEnd (myEndConnector);
    getConnection ().updateConnection ();
    getDrawingView ().insertFigures (getAffectedFigures (), 0, 0, false);
    return true;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/SendToBackCommand.java 105 115
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ChangeAttributeCommand.java 140 152
----------------------------------------

public void setAffectedFigures (FigureEnumeration fe) {
    super.setAffectedFigures (fe);
    FigureEnumeration copyFe = getAffectedFigures ();
    while (copyFe.hasNextFigure ()) {
        Figure f = copyFe.nextFigure ();
        int originalLayer = getDrawingView ().drawing ().getLayer (f);
        addOriginalLayer (f, originalLayer);
    }
}

----------------------------------------

public void setAffectedFigures (FigureEnumeration fe) {
    super.setAffectedFigures (fe);
    FigureEnumeration copyFe = getAffectedFigures ();
    while (copyFe.hasNextFigure ()) {
        Figure f = copyFe.nextFigure ();
        Object attributeValue = f.getAttribute (getAttribute ());
        if (attributeValue != null) {
            addOriginalValue (f, attributeValue);
        }
    }
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/DragTracker.java 107 113
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/PasteCommand.java 88 102
----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    moveAffectedFigures (getBackupPoint (), getOriginalPoint ());
    return true;
}

----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    DeleteFromDrawingVisitor deleteVisitor = new DeleteFromDrawingVisitor (getDrawingView ().drawing ());
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        fe.nextFigure ().visit (deleteVisitor);
    }
    getDrawingView ().clearSelection ();
    return true;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/DragTracker.java 107 113
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ConnectionTool.java 418 430
----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    moveAffectedFigures (getBackupPoint (), getOriginalPoint ());
    return true;
}

----------------------------------------

public boolean redo () {
    if (! super.redo ()) {
        return false;
    }
    getConnection ().connectStart (myStartConnector);
    getConnection ().connectEnd (myEndConnector);
    getConnection ().updateConnection ();
    getDrawingView ().insertFigures (getAffectedFigures (), 0, 0, false);
    return true;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/DragTracker.java 119 125
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ConnectionTool.java 418 430
----------------------------------------

public boolean redo () {
    if (! super.redo ()) {
        return false;
    }
    moveAffectedFigures (getOriginalPoint (), getBackupPoint ());
    return true;
}

----------------------------------------

public boolean redo () {
    if (! super.redo ()) {
        return false;
    }
    getConnection ().connectStart (myStartConnector);
    getConnection ().connectEnd (myEndConnector);
    getConnection ().updateConnection ();
    getDrawingView ().insertFigures (getAffectedFigures (), 0, 0, false);
    return true;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/PasteCommand.java 88 102
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/SelectAllCommand.java 70 79
----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    DeleteFromDrawingVisitor deleteVisitor = new DeleteFromDrawingVisitor (getDrawingView ().drawing ());
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        fe.nextFigure ().visit (deleteVisitor);
    }
    getDrawingView ().clearSelection ();
    return true;
}

----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    getDrawingView ().clearSelection ();
    getDrawingView ().addToSelectionAll (getAffectedFigures ());
    return true;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/PasteCommand.java 88 102
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/AlignCommand.java 161 177
----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    DeleteFromDrawingVisitor deleteVisitor = new DeleteFromDrawingVisitor (getDrawingView ().drawing ());
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        fe.nextFigure ().visit (deleteVisitor);
    }
    getDrawingView ().clearSelection ();
    return true;
}

----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        Figure f = fe.nextFigure ();
        Point originalPoint = getOriginalPoint (f);
        Point currentPoint = f.displayBox ().getLocation ();
        f.moveBy (- currentPoint.x + originalPoint.x, - currentPoint.y + originalPoint.y);
    }
    return true;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/PasteCommand.java 88 102
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ChangeConnectionHandle.java 217 224
----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    DeleteFromDrawingVisitor deleteVisitor = new DeleteFromDrawingVisitor (getDrawingView ().drawing ());
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        fe.nextFigure ().visit (deleteVisitor);
    }
    getDrawingView ().clearSelection ();
    return true;
}

----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    swapConnectors ();
    return true;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/PasteCommand.java 88 102
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ChangeAttributeCommand.java 79 93
----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    DeleteFromDrawingVisitor deleteVisitor = new DeleteFromDrawingVisitor (getDrawingView ().drawing ());
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        fe.nextFigure ().visit (deleteVisitor);
    }
    getDrawingView ().clearSelection ();
    return true;
}

----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        Figure f = fe.nextFigure ();
        if (getOriginalValue (f) != null) {
            f.setAttribute (getAttribute (), getOriginalValue (f));
        }
    }
    return true;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/PasteCommand.java 88 102
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ChangeAttributeCommand.java 95 109
----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    DeleteFromDrawingVisitor deleteVisitor = new DeleteFromDrawingVisitor (getDrawingView ().drawing ());
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        fe.nextFigure ().visit (deleteVisitor);
    }
    getDrawingView ().clearSelection ();
    return true;
}

----------------------------------------

public boolean redo () {
    if (! isRedoable ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        Figure f = fe.nextFigure ();
        if (getBackupValue () != null) {
            f.setAttribute (getAttribute (), getBackupValue ());
        }
    }
    return true;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/PasteCommand.java 88 102
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ConnectionTool.java 396 412
----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    DeleteFromDrawingVisitor deleteVisitor = new DeleteFromDrawingVisitor (getDrawingView ().drawing ());
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        fe.nextFigure ().visit (deleteVisitor);
    }
    getDrawingView ().clearSelection ();
    return true;
}

----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    getConnection ().disconnectStart ();
    getConnection ().disconnectEnd ();
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        getDrawingView ().drawing ().orphan (fe.nextFigure ());
    }
    getDrawingView ().clearSelection ();
    return true;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/PasteCommand.java 104 115
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ConnectionTool.java 418 430
----------------------------------------

public boolean redo () {
    if (! isRedoable ()) {
        return false;
    }
    getDrawingView ().clearSelection ();
    setAffectedFigures (getDrawingView ().insertFigures (getAffectedFigures (), 0, 0, false));
    return true;
}

----------------------------------------

public boolean redo () {
    if (! super.redo ()) {
        return false;
    }
    getConnection ().connectStart (myStartConnector);
    getConnection ().connectEnd (myEndConnector);
    getConnection ().updateConnection ();
    getDrawingView ().insertFigures (getAffectedFigures (), 0, 0, false);
    return true;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ChopBoxConnector.java 41 54
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ChopBoxConnector.java 56 69
----------------------------------------

public Point findStart (ConnectionFigure connection) {
    Figure startFigure = connection.getStartConnector ().owner ();
    Rectangle r2 = connection.getEndConnector ().displayBox ();
    Point r2c = null;
    if (connection.pointCount () == 2) {
        r2c = new Point (r2.x + r2.width / 2, r2.y + r2.height / 2);
    } else {
        r2c = connection.pointAt (1);
    }
    return chop (startFigure, r2c);
}

----------------------------------------

public Point findEnd (ConnectionFigure connection) {
    Figure endFigure = connection.getEndConnector ().owner ();
    Rectangle r1 = connection.getStartConnector ().displayBox ();
    Point r1c = null;
    if (connection.pointCount () == 2) {
        r1c = new Point (r1.x + r1.width / 2, r1.y + r1.height / 2);
    } else {
        r1c = connection.pointAt (connection.pointCount () - 2);
    }
    return chop (endFigure, r1c);
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/SelectAllCommand.java 34 40
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/DuplicateCommand.java 33 46
----------------------------------------

public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selection ());
    view ().addToSelectionAll (view ().drawing ().figures ());
    view ().checkDamage ();
}

----------------------------------------

public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    FigureSelection selection = view ().getFigureSelection ();
    FigureEnumeration figures = (FigureEnumeration) selection.getData (StandardFigureSelection.TYPE);
    getUndoActivity ().setAffectedFigures (figures);
    view ().clearSelection ();
    getUndoActivity ().setAffectedFigures (insertFigures (getUndoActivity ().getAffectedFigures (), 10, 10));
    view ().checkDamage ();
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/SelectAllCommand.java 34 40
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/BringToFrontCommand.java 35 44
----------------------------------------

public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selection ());
    view ().addToSelectionAll (view ().drawing ().figures ());
    view ().checkDamage ();
}

----------------------------------------

public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selection ());
    FigureEnumeration fe = getUndoActivity ().getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        view ().drawing ().bringToFront (fe.nextFigure ());
    }
    view ().checkDamage ();
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/SelectAllCommand.java 34 40
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ChangeAttributeCommand.java 43 52
----------------------------------------

public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selection ());
    view ().addToSelectionAll (view ().drawing ().figures ());
    view ().checkDamage ();
}

----------------------------------------

public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selection ());
    FigureEnumeration fe = getUndoActivity ().getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        fe.nextFigure ().setAttribute (fAttribute, fValue);
    }
    view ().checkDamage ();
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/SelectAllCommand.java 70 79
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ConnectionTool.java 396 412
----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    getDrawingView ().clearSelection ();
    getDrawingView ().addToSelectionAll (getAffectedFigures ());
    return true;
}

----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    getConnection ().disconnectStart ();
    getConnection ().disconnectEnd ();
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        getDrawingView ().drawing ().orphan (fe.nextFigure ());
    }
    getDrawingView ().clearSelection ();
    return true;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/SelectAllCommand.java 70 79
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ConnectionTool.java 418 430
----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    getDrawingView ().clearSelection ();
    getDrawingView ().addToSelectionAll (getAffectedFigures ());
    return true;
}

----------------------------------------

public boolean redo () {
    if (! super.redo ()) {
        return false;
    }
    getConnection ().connectStart (myStartConnector);
    getConnection ().connectEnd (myEndConnector);
    getConnection ().updateConnection ();
    getDrawingView ().insertFigures (getAffectedFigures (), 0, 0, false);
    return true;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/FigureAndEnumerator.java 30 41
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/HandleAndEnumerator.java 33 44
----------------------------------------

public Figure nextFigure () {
    if (myFE1.hasNextFigure ()) {
        return myFE1.nextFigure ();
    } else if (myFE2.hasNextFigure ()) {
        return myFE2.nextFigure ();
    } else {
        return null;
    }

}

----------------------------------------

public Handle nextHandle () {
    if (myHE1.hasNextHandle ()) {
        return myHE1.nextHandle ();
    } else if (myHE2.hasNextHandle ()) {
        return myHE2.nextHandle ();
    } else {
        return null;
    }

}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/DeleteCommand.java 34 40
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/DuplicateCommand.java 33 46
----------------------------------------

public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selection ());
    deleteFigures (getUndoActivity ().getAffectedFigures ());
    view ().checkDamage ();
}

----------------------------------------

public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    FigureSelection selection = view ().getFigureSelection ();
    FigureEnumeration figures = (FigureEnumeration) selection.getData (StandardFigureSelection.TYPE);
    getUndoActivity ().setAffectedFigures (figures);
    view ().clearSelection ();
    getUndoActivity ().setAffectedFigures (insertFigures (getUndoActivity ().getAffectedFigures (), 10, 10));
    view ().checkDamage ();
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/DeleteCommand.java 34 40
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/BringToFrontCommand.java 35 44
----------------------------------------

public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selection ());
    deleteFigures (getUndoActivity ().getAffectedFigures ());
    view ().checkDamage ();
}

----------------------------------------

public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selection ());
    FigureEnumeration fe = getUndoActivity ().getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        view ().drawing ().bringToFront (fe.nextFigure ());
    }
    view ().checkDamage ();
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/DeleteCommand.java 34 40
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ChangeAttributeCommand.java 43 52
----------------------------------------

public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selection ());
    deleteFigures (getUndoActivity ().getAffectedFigures ());
    view ().checkDamage ();
}

----------------------------------------

public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selection ());
    FigureEnumeration fe = getUndoActivity ().getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        fe.nextFigure ().setAttribute (fAttribute, fValue);
    }
    view ().checkDamage ();
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/AlignCommand.java 125 132
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/DuplicateCommand.java 33 46
----------------------------------------

public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selection ());
    ((AlignCommand.UndoActivity) getUndoActivity ()).alignAffectedFigures (getAlignment ());
    view ().checkDamage ();
}

----------------------------------------

public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    FigureSelection selection = view ().getFigureSelection ();
    FigureEnumeration figures = (FigureEnumeration) selection.getData (StandardFigureSelection.TYPE);
    getUndoActivity ().setAffectedFigures (figures);
    view ().clearSelection ();
    getUndoActivity ().setAffectedFigures (insertFigures (getUndoActivity ().getAffectedFigures (), 10, 10));
    view ().checkDamage ();
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/AlignCommand.java 125 132
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/BringToFrontCommand.java 35 44
----------------------------------------

public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selection ());
    ((AlignCommand.UndoActivity) getUndoActivity ()).alignAffectedFigures (getAlignment ());
    view ().checkDamage ();
}

----------------------------------------

public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selection ());
    FigureEnumeration fe = getUndoActivity ().getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        view ().drawing ().bringToFront (fe.nextFigure ());
    }
    view ().checkDamage ();
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/AlignCommand.java 125 132
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ChangeAttributeCommand.java 43 52
----------------------------------------

public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selection ());
    ((AlignCommand.UndoActivity) getUndoActivity ()).alignAffectedFigures (getAlignment ());
    view ().checkDamage ();
}

----------------------------------------

public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selection ());
    FigureEnumeration fe = getUndoActivity ().getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        fe.nextFigure ().setAttribute (fAttribute, fValue);
    }
    view ().checkDamage ();
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/AlignCommand.java 161 177
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ChangeAttributeCommand.java 79 93
----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        Figure f = fe.nextFigure ();
        Point originalPoint = getOriginalPoint (f);
        Point currentPoint = f.displayBox ().getLocation ();
        f.moveBy (- currentPoint.x + originalPoint.x, - currentPoint.y + originalPoint.y);
    }
    return true;
}

----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        Figure f = fe.nextFigure ();
        if (getOriginalValue (f) != null) {
            f.setAttribute (getAttribute (), getOriginalValue (f));
        }
    }
    return true;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/AlignCommand.java 161 177
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ChangeAttributeCommand.java 95 109
----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        Figure f = fe.nextFigure ();
        Point originalPoint = getOriginalPoint (f);
        Point currentPoint = f.displayBox ().getLocation ();
        f.moveBy (- currentPoint.x + originalPoint.x, - currentPoint.y + originalPoint.y);
    }
    return true;
}

----------------------------------------

public boolean redo () {
    if (! isRedoable ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        Figure f = fe.nextFigure ();
        if (getBackupValue () != null) {
            f.setAttribute (getAttribute (), getBackupValue ());
        }
    }
    return true;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/AlignCommand.java 161 177
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ConnectionTool.java 396 412
----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        Figure f = fe.nextFigure ();
        Point originalPoint = getOriginalPoint (f);
        Point currentPoint = f.displayBox ().getLocation ();
        f.moveBy (- currentPoint.x + originalPoint.x, - currentPoint.y + originalPoint.y);
    }
    return true;
}

----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    getConnection ().disconnectStart ();
    getConnection ().disconnectEnd ();
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        getDrawingView ().drawing ().orphan (fe.nextFigure ());
    }
    getDrawingView ().clearSelection ();
    return true;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/AlignCommand.java 179 185
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ConnectionTool.java 418 430
----------------------------------------

public boolean redo () {
    if (! isRedoable ()) {
        return false;
    }
    alignAffectedFigures (getAppliedAlignment ());
    return true;
}

----------------------------------------

public boolean redo () {
    if (! super.redo ()) {
        return false;
    }
    getConnection ().connectStart (myStartConnector);
    getConnection ().connectEnd (myEndConnector);
    getConnection ().updateConnection ();
    getDrawingView ().insertFigures (getAffectedFigures (), 0, 0, false);
    return true;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/AlignCommand.java 214 222
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ChangeAttributeCommand.java 140 152
----------------------------------------

public void setAffectedFigures (FigureEnumeration fe) {
    super.setAffectedFigures (fe);
    FigureEnumeration copyFe = getAffectedFigures ();
    while (copyFe.hasNextFigure ()) {
        addOriginalPoint (copyFe.nextFigure ());
    }
}

----------------------------------------

public void setAffectedFigures (FigureEnumeration fe) {
    super.setAffectedFigures (fe);
    FigureEnumeration copyFe = getAffectedFigures ();
    while (copyFe.hasNextFigure ()) {
        Figure f = copyFe.nextFigure ();
        Object attributeValue = f.getAttribute (getAttribute ());
        if (attributeValue != null) {
            addOriginalValue (f, attributeValue);
        }
    }
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/DuplicateCommand.java 33 46
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/BringToFrontCommand.java 35 44
----------------------------------------

public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    FigureSelection selection = view ().getFigureSelection ();
    FigureEnumeration figures = (FigureEnumeration) selection.getData (StandardFigureSelection.TYPE);
    getUndoActivity ().setAffectedFigures (figures);
    view ().clearSelection ();
    getUndoActivity ().setAffectedFigures (insertFigures (getUndoActivity ().getAffectedFigures (), 10, 10));
    view ().checkDamage ();
}

----------------------------------------

public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selection ());
    FigureEnumeration fe = getUndoActivity ().getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        view ().drawing ().bringToFront (fe.nextFigure ());
    }
    view ().checkDamage ();
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/DuplicateCommand.java 33 46
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ChangeAttributeCommand.java 43 52
----------------------------------------

public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    FigureSelection selection = view ().getFigureSelection ();
    FigureEnumeration figures = (FigureEnumeration) selection.getData (StandardFigureSelection.TYPE);
    getUndoActivity ().setAffectedFigures (figures);
    view ().clearSelection ();
    getUndoActivity ().setAffectedFigures (insertFigures (getUndoActivity ().getAffectedFigures (), 10, 10));
    view ().checkDamage ();
}

----------------------------------------

public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selection ());
    FigureEnumeration fe = getUndoActivity ().getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        fe.nextFigure ().setAttribute (fAttribute, fValue);
    }
    view ().checkDamage ();
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/DuplicateCommand.java 33 46
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/CutCommand.java 37 45
----------------------------------------

public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    FigureSelection selection = view ().getFigureSelection ();
    FigureEnumeration figures = (FigureEnumeration) selection.getData (StandardFigureSelection.TYPE);
    getUndoActivity ().setAffectedFigures (figures);
    view ().clearSelection ();
    getUndoActivity ().setAffectedFigures (insertFigures (getUndoActivity ().getAffectedFigures (), 10, 10));
    view ().checkDamage ();
}

----------------------------------------

public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selection ());
    copyFigures (getUndoActivity ().getAffectedFigures (), view ().selectionCount ());
    deleteFigures (getUndoActivity ().getAffectedFigures ());
    view ().checkDamage ();
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ChangeConnectionHandle.java 92 111
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ConnectionHandle.java 74 93
----------------------------------------

public void invokeStep (int x, int y, int anchorX, int anchorY, DrawingView view) {
    Point p = new Point (x, y);
    Figure f = findConnectableFigure (x, y, view.drawing ());
    if (f != getTargetFigure ()) {
        if (getTargetFigure () != null) {
            getTargetFigure ().connectorVisibility (false, null);
        }
        setTargetFigure (f);
        if (getTargetFigure () != null) {
            getTargetFigure ().connectorVisibility (true, getConnection ());
        }
    }
    Connector target = findConnectionTarget (p.x, p.y, view.drawing ());
    if (target != null) {
        p = Geom.center (target.displayBox ());
    }
    setPoint (p.x, p.y);
}

----------------------------------------

public void invokeStep (int x, int y, int anchorX, int anchorY, DrawingView view) {
    Point p = new Point (x, y);
    Figure f = findConnectableFigure (x, y, view.drawing ());
    if (f != getTargetFigure ()) {
        if (getTargetFigure () != null) {
            getTargetFigure ().connectorVisibility (false, null);
        }
        setTargetFigure (f);
        if (getTargetFigure () != null) {
            getTargetFigure ().connectorVisibility (true, getConnection ());
        }
    }
    Connector target = findConnectionTarget (p.x, p.y, view.drawing ());
    if (target != null) {
        p = Geom.center (target.displayBox ());
    }
    getConnection ().endPoint (p.x, p.y);
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ChangeConnectionHandle.java 174 185
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ConnectionHandle.java 142 152
----------------------------------------

private Figure findConnectableFigure (int x, int y, Drawing drawing) {
    FigureEnumeration fe = drawing.figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (! figure.includes (getConnection ()) && figure.canConnect ()) {
            if (figure.containsPoint (x, y)) {
                return figure;
            }
        }
    }
    return null;
}

----------------------------------------

private Figure findConnectableFigure (int x, int y, Drawing drawing) {
    FigureEnumeration fe = drawing.figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (! figure.includes (getConnection ()) && figure.canConnect () && figure.containsPoint (x, y)) {
            return figure;
        }
    }
    return null;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ChangeConnectionHandle.java 174 185
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/CompositeFigure.java 434 443
----------------------------------------

private Figure findConnectableFigure (int x, int y, Drawing drawing) {
    FigureEnumeration fe = drawing.figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (! figure.includes (getConnection ()) && figure.canConnect ()) {
            if (figure.containsPoint (x, y)) {
                return figure;
            }
        }
    }
    return null;
}

----------------------------------------

public Figure findFigure (int x, int y) {
    FigureEnumeration fe = figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (figure.containsPoint (x, y)) {
            return figure;
        }
    }
    return null;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ChangeConnectionHandle.java 174 185
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/CompositeFigure.java 448 458
----------------------------------------

private Figure findConnectableFigure (int x, int y, Drawing drawing) {
    FigureEnumeration fe = drawing.figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (! figure.includes (getConnection ()) && figure.canConnect ()) {
            if (figure.containsPoint (x, y)) {
                return figure;
            }
        }
    }
    return null;
}

----------------------------------------

public Figure findFigure (Rectangle r) {
    FigureEnumeration fe = figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        Rectangle fr = figure.displayBox ();
        if (r.intersects (fr)) {
            return figure;
        }
    }
    return null;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ChangeConnectionHandle.java 174 185
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/CompositeFigure.java 469 482
----------------------------------------

private Figure findConnectableFigure (int x, int y, Drawing drawing) {
    FigureEnumeration fe = drawing.figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (! figure.includes (getConnection ()) && figure.canConnect ()) {
            if (figure.containsPoint (x, y)) {
                return figure;
            }
        }
    }
    return null;
}

----------------------------------------

public Figure findFigureWithout (int x, int y, Figure without) {
    if (without == null) {
        return findFigure (x, y);
    }
    FigureEnumeration fe = figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (figure.containsPoint (x, y) && ! figure.includes (without)) {
            return figure;
        }
    }
    return null;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ChangeConnectionHandle.java 174 185
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ConnectionTool.java 223 233
----------------------------------------

private Figure findConnectableFigure (int x, int y, Drawing drawing) {
    FigureEnumeration fe = drawing.figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (! figure.includes (getConnection ()) && figure.canConnect ()) {
            if (figure.containsPoint (x, y)) {
                return figure;
            }
        }
    }
    return null;
}

----------------------------------------

protected ConnectionFigure findConnection (int x, int y, Drawing drawing) {
    FigureEnumeration fe = drawing.figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        figure = figure.findFigureInside (x, y);
        if (figure != null && (figure instanceof ConnectionFigure)) {
            return (ConnectionFigure) figure;
        }
    }
    return null;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ChangeConnectionHandle.java 174 185
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ConnectionTool.java 314 324
----------------------------------------

private Figure findConnectableFigure (int x, int y, Drawing drawing) {
    FigureEnumeration fe = drawing.figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (! figure.includes (getConnection ()) && figure.canConnect ()) {
            if (figure.containsPoint (x, y)) {
                return figure;
            }
        }
    }
    return null;
}

----------------------------------------

protected Figure findConnectableFigure (int x, int y, Drawing drawing) {
    FigureEnumeration fe = drawing.figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (! figure.includes (getConnection ()) && figure.canConnect () && figure.containsPoint (x, y)) {
            return figure;
        }
    }
    return null;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ChangeConnectionHandle.java 217 224
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ConnectionTool.java 418 430
----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    swapConnectors ();
    return true;
}

----------------------------------------

public boolean redo () {
    if (! super.redo ()) {
        return false;
    }
    getConnection ().connectStart (myStartConnector);
    getConnection ().connectEnd (myEndConnector);
    getConnection ().updateConnection ();
    getDrawingView ().insertFigures (getAffectedFigures (), 0, 0, false);
    return true;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ChangeConnectionHandle.java 226 234
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ConnectionTool.java 418 430
----------------------------------------

public boolean redo () {
    if (! isRedoable ()) {
        return false;
    }
    swapConnectors ();
    return true;
}

----------------------------------------

public boolean redo () {
    if (! super.redo ()) {
        return false;
    }
    getConnection ().connectStart (myStartConnector);
    getConnection ().connectEnd (myEndConnector);
    getConnection ().updateConnection ();
    getDrawingView ().insertFigures (getAffectedFigures (), 0, 0, false);
    return true;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/BringToFrontCommand.java 35 44
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ChangeAttributeCommand.java 43 52
----------------------------------------

public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selection ());
    FigureEnumeration fe = getUndoActivity ().getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        view ().drawing ().bringToFront (fe.nextFigure ());
    }
    view ().checkDamage ();
}

----------------------------------------

public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selection ());
    FigureEnumeration fe = getUndoActivity ().getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        fe.nextFigure ().setAttribute (fAttribute, fValue);
    }
    view ().checkDamage ();
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/BringToFrontCommand.java 35 44
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/CutCommand.java 37 45
----------------------------------------

public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selection ());
    FigureEnumeration fe = getUndoActivity ().getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        view ().drawing ().bringToFront (fe.nextFigure ());
    }
    view ().checkDamage ();
}

----------------------------------------

public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selection ());
    copyFigures (getUndoActivity ().getAffectedFigures (), view ().selectionCount ());
    deleteFigures (getUndoActivity ().getAffectedFigures ());
    view ().checkDamage ();
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ConnectionHandle.java 142 152
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/StandardDrawingView.java 253 263
----------------------------------------

private Figure findConnectableFigure (int x, int y, Drawing drawing) {
    FigureEnumeration fe = drawing.figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (! figure.includes (getConnection ()) && figure.canConnect () && figure.containsPoint (x, y)) {
            return figure;
        }
    }
    return null;
}

----------------------------------------

public boolean figureExists (Figure inf, FigureEnumeration fe) {
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (figure.includes (inf)) {
            return true;
        }
    }
    return false;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ConnectionHandle.java 142 152
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/CompositeFigure.java 434 443
----------------------------------------

private Figure findConnectableFigure (int x, int y, Drawing drawing) {
    FigureEnumeration fe = drawing.figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (! figure.includes (getConnection ()) && figure.canConnect () && figure.containsPoint (x, y)) {
            return figure;
        }
    }
    return null;
}

----------------------------------------

public Figure findFigure (int x, int y) {
    FigureEnumeration fe = figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (figure.containsPoint (x, y)) {
            return figure;
        }
    }
    return null;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ConnectionHandle.java 142 152
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/CompositeFigure.java 448 458
----------------------------------------

private Figure findConnectableFigure (int x, int y, Drawing drawing) {
    FigureEnumeration fe = drawing.figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (! figure.includes (getConnection ()) && figure.canConnect () && figure.containsPoint (x, y)) {
            return figure;
        }
    }
    return null;
}

----------------------------------------

public Figure findFigure (Rectangle r) {
    FigureEnumeration fe = figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        Rectangle fr = figure.displayBox ();
        if (r.intersects (fr)) {
            return figure;
        }
    }
    return null;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ConnectionHandle.java 142 152
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/CompositeFigure.java 469 482
----------------------------------------

private Figure findConnectableFigure (int x, int y, Drawing drawing) {
    FigureEnumeration fe = drawing.figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (! figure.includes (getConnection ()) && figure.canConnect () && figure.containsPoint (x, y)) {
            return figure;
        }
    }
    return null;
}

----------------------------------------

public Figure findFigureWithout (int x, int y, Figure without) {
    if (without == null) {
        return findFigure (x, y);
    }
    FigureEnumeration fe = figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (figure.containsPoint (x, y) && ! figure.includes (without)) {
            return figure;
        }
    }
    return null;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ConnectionHandle.java 142 152
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ConnectionTool.java 223 233
----------------------------------------

private Figure findConnectableFigure (int x, int y, Drawing drawing) {
    FigureEnumeration fe = drawing.figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (! figure.includes (getConnection ()) && figure.canConnect () && figure.containsPoint (x, y)) {
            return figure;
        }
    }
    return null;
}

----------------------------------------

protected ConnectionFigure findConnection (int x, int y, Drawing drawing) {
    FigureEnumeration fe = drawing.figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        figure = figure.findFigureInside (x, y);
        if (figure != null && (figure instanceof ConnectionFigure)) {
            return (ConnectionFigure) figure;
        }
    }
    return null;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ConnectionHandle.java 142 152
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ConnectionTool.java 314 324
----------------------------------------

private Figure findConnectableFigure (int x, int y, Drawing drawing) {
    FigureEnumeration fe = drawing.figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (! figure.includes (getConnection ()) && figure.canConnect () && figure.containsPoint (x, y)) {
            return figure;
        }
    }
    return null;
}

----------------------------------------

protected Figure findConnectableFigure (int x, int y, Drawing drawing) {
    FigureEnumeration fe = drawing.figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (! figure.includes (getConnection ()) && figure.canConnect () && figure.containsPoint (x, y)) {
            return figure;
        }
    }
    return null;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ChangeAttributeCommand.java 43 52
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/CutCommand.java 37 45
----------------------------------------

public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selection ());
    FigureEnumeration fe = getUndoActivity ().getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        fe.nextFigure ().setAttribute (fAttribute, fValue);
    }
    view ().checkDamage ();
}

----------------------------------------

public void execute () {
    super.execute ();
    setUndoActivity (createUndoActivity ());
    getUndoActivity ().setAffectedFigures (view ().selection ());
    copyFigures (getUndoActivity ().getAffectedFigures (), view ().selectionCount ());
    deleteFigures (getUndoActivity ().getAffectedFigures ());
    view ().checkDamage ();
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ChangeAttributeCommand.java 79 93
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ChangeAttributeCommand.java 95 109
----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        Figure f = fe.nextFigure ();
        if (getOriginalValue (f) != null) {
            f.setAttribute (getAttribute (), getOriginalValue (f));
        }
    }
    return true;
}

----------------------------------------

public boolean redo () {
    if (! isRedoable ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        Figure f = fe.nextFigure ();
        if (getBackupValue () != null) {
            f.setAttribute (getAttribute (), getBackupValue ());
        }
    }
    return true;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ChangeAttributeCommand.java 79 93
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/CompositeFigure.java 565 578
----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        Figure f = fe.nextFigure ();
        if (getOriginalValue (f) != null) {
            f.setAttribute (getAttribute (), getOriginalValue (f));
        }
    }
    return true;
}

----------------------------------------

public boolean includes (Figure figure) {
    if (super.includes (figure)) {
        return true;
    }
    FigureEnumeration fe = figures ();
    while (fe.hasNextFigure ()) {
        Figure f = fe.nextFigure ();
        if (f.includes (figure)) {
            return true;
        }
    }
    return false;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ChangeAttributeCommand.java 79 93
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ConnectionTool.java 396 412
----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        Figure f = fe.nextFigure ();
        if (getOriginalValue (f) != null) {
            f.setAttribute (getAttribute (), getOriginalValue (f));
        }
    }
    return true;
}

----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    getConnection ().disconnectStart ();
    getConnection ().disconnectEnd ();
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        getDrawingView ().drawing ().orphan (fe.nextFigure ());
    }
    getDrawingView ().clearSelection ();
    return true;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ChangeAttributeCommand.java 95 109
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/CompositeFigure.java 565 578
----------------------------------------

public boolean redo () {
    if (! isRedoable ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        Figure f = fe.nextFigure ();
        if (getBackupValue () != null) {
            f.setAttribute (getAttribute (), getBackupValue ());
        }
    }
    return true;
}

----------------------------------------

public boolean includes (Figure figure) {
    if (super.includes (figure)) {
        return true;
    }
    FigureEnumeration fe = figures ();
    while (fe.hasNextFigure ()) {
        Figure f = fe.nextFigure ();
        if (f.includes (figure)) {
            return true;
        }
    }
    return false;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ChangeAttributeCommand.java 95 109
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ConnectionTool.java 396 412
----------------------------------------

public boolean redo () {
    if (! isRedoable ()) {
        return false;
    }
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        Figure f = fe.nextFigure ();
        if (getBackupValue () != null) {
            f.setAttribute (getAttribute (), getBackupValue ());
        }
    }
    return true;
}

----------------------------------------

public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    getConnection ().disconnectStart ();
    getConnection ().disconnectEnd ();
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        getDrawingView ().drawing ().orphan (fe.nextFigure ());
    }
    getDrawingView ().clearSelection ();
    return true;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/StandardDrawingView.java 253 263
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/CompositeFigure.java 434 443
----------------------------------------

public boolean figureExists (Figure inf, FigureEnumeration fe) {
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (figure.includes (inf)) {
            return true;
        }
    }
    return false;
}

----------------------------------------

public Figure findFigure (int x, int y) {
    FigureEnumeration fe = figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (figure.containsPoint (x, y)) {
            return figure;
        }
    }
    return null;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/StandardDrawingView.java 253 263
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ConnectionTool.java 314 324
----------------------------------------

public boolean figureExists (Figure inf, FigureEnumeration fe) {
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (figure.includes (inf)) {
            return true;
        }
    }
    return false;
}

----------------------------------------

protected Figure findConnectableFigure (int x, int y, Drawing drawing) {
    FigureEnumeration fe = drawing.figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (! figure.includes (getConnection ()) && figure.canConnect () && figure.containsPoint (x, y)) {
            return figure;
        }
    }
    return null;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/StandardDrawingView.java 673 686
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/StandardDrawingView.java 694 707
----------------------------------------

public void drawAll (Graphics g) {
    boolean isPrinting = g instanceof PrintGraphics;
    drawBackground (g);
    if ((fBackgrounds != null) && ! isPrinting) {
        drawPainters (g, fBackgrounds);
    }
    drawDrawing (g);
    if ((fForegrounds != null) && ! isPrinting) {
        drawPainters (g, fForegrounds);
    }
    if (! isPrinting) {
        drawHandles (g);
    }
}

----------------------------------------

public void draw (Graphics g, FigureEnumeration fe) {
    boolean isPrinting = g instanceof PrintGraphics;
    if ((fBackgrounds != null) && ! isPrinting) {
        drawPainters (g, fBackgrounds);
    }
    drawing ().draw (g, fe);
    if ((fForegrounds != null) && ! isPrinting) {
        drawPainters (g, fForegrounds);
    }
    if (! isPrinting) {
        drawHandles (g);
    }
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/StandardDrawingView.java 922 933
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/StandardDrawingView.java 939 948
----------------------------------------

public void mousePressed (MouseEvent e) {
    try {
        requestFocus ();
        Point p = constrainPoint (new Point (e.getX (), e.getY ()));
        setLastClick (new Point (e.getX (), e.getY ()));
        tool ().mouseDown (e, p.x, p.y);
        checkDamage ();
    } catch (Throwable t) {
        handleMouseEventException (t);
    }
}

----------------------------------------

public void mouseReleased (MouseEvent e) {
    try {
        Point p = constrainPoint (new Point (e.getX (), e.getY ()));
        tool ().mouseUp (e, p.x, p.y);
        checkDamage ();
    } catch (Throwable t) {
        handleMouseEventException (t);
    }
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/StandardDrawingView.java 922 933
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/StandardDrawingView.java 956 965
----------------------------------------

public void mousePressed (MouseEvent e) {
    try {
        requestFocus ();
        Point p = constrainPoint (new Point (e.getX (), e.getY ()));
        setLastClick (new Point (e.getX (), e.getY ()));
        tool ().mouseDown (e, p.x, p.y);
        checkDamage ();
    } catch (Throwable t) {
        handleMouseEventException (t);
    }
}

----------------------------------------

public void mouseDragged (MouseEvent e) {
    try {
        Point p = constrainPoint (new Point (e.getX (), e.getY ()));
        tool ().mouseDrag (e, p.x, p.y);
        checkDamage ();
    } catch (Throwable t) {
        handleMouseEventException (t);
    }
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/CompositeFigure.java 141 152
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/CompositeFigure.java 596 604
----------------------------------------

public void removeAll () {
    FigureEnumeration fe = figures ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        figure.removeFromContainer (this);
    }
    fFigures.clear ();
    _clearQuadTree ();
    _nLowestZ = 0;
    _nHighestZ = 0;
}

----------------------------------------

public void release () {
    FigureEnumeration fe = figures ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        figure.release ();
    }
    super.release ();
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/CompositeFigure.java 277 289
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/CompositeFigure.java 291 301
----------------------------------------

private void assignFiguresToPredecessorZValue (int lowerBound, int upperBound) {
    if (upperBound >= fFigures.size ()) {
        upperBound = fFigures.size () - 1;
    }
    for (int i = upperBound;
    i >= lowerBound; i --) {
        Figure currentFigure = (Figure) fFigures.get (i);
        Figure predecessorFigure = (Figure) fFigures.get (i - 1);
        currentFigure.setZValue (predecessorFigure.getZValue ());
    }
}

----------------------------------------

private void assignFiguresToSuccessorZValue (int lowerBound, int upperBound) {
    if (upperBound >= fFigures.size ()) {
        upperBound = fFigures.size () - 1;
    }
    for (int i = upperBound;
    i >= lowerBound; i --) {
        Figure currentFigure = (Figure) fFigures.get (i);
        Figure successorFigure = (Figure) fFigures.get (i + 1);
        currentFigure.setZValue (successorFigure.getZValue ());
    }
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/CompositeFigure.java 329 336
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/CompositeFigure.java 662 670
----------------------------------------

public Figure getFigureFromLayer (int layerNr) {
    if ((layerNr >= 0) && (layerNr 

public void draw (Graphics g) {
    draw (g, figures ());
}


public void draw (Graphics g, FigureEnumeration fe) {
    while (fe.hasNextFigure ()) {
        fe.nextFigure ().draw (g);
    }
}


public Figure figureAt (int i) {
    return (Figure) fFigures.get (i);
}


public FigureEnumeration figures () {
    return new FigureEnumerator (CollectionsFactory.current ().createList (fFigures));
}


public FigureEnumeration figures (Rectangle viewRectangle) {
    if (_theQuadTree != null) {
        FigureEnumeration fe = _theQuadTree.getAllWithin (new Bounds (viewRectangle).asRectangle2D ());
        List l2 = CollectionsFactory.current ().createList ();
        while (fe.hasNextFigure ()) {
            Figure f = fe.nextFigure ();
            l2.add (new OrderedFigureElement (f, f.getZValue ()));
        }
        Collections.sort (l2);
        List l3 = CollectionsFactory.current ().createList ();
        for (Iterator iter = l2.iterator ();
        iter.hasNext ();) {
            OrderedFigureElement ofe = (OrderedFigureElement) iter.next ();
            l3.add (ofe.getFigure ());
        }
        return new FigureEnumerator (l3);
    }
    return figures ();
}


public int figureCount () {
    return fFigures.size ();
}


public boolean containsFigure (Figure checkFigure) {
    return fFigures.contains (checkFigure);
}


public final FigureEnumeration figuresReverse () {
    return new ReverseFigureEnumerator (CollectionsFactory.current ().createList (fFigures));
}


public Figure findFigure (int x, int y) {
    FigureEnumeration fe = figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (figure.containsPoint (x, y)) {
            return figure;
        }
    }
    return null;
}


public Figure findFigure (Rectangle r) {
    FigureEnumeration fe = figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        Rectangle fr = figure.displayBox ();
        if (r.intersects (fr)) {
            return figure;
        }
    }
    return null;
}


public Figure findFigureWithout (int x, int y, Figure without) {
    if (without == null) {
        return findFigure (x, y);
    }
    FigureEnumeration fe = figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (figure.containsPoint (x, y) && ! figure.includes (without)) {
            return figure;
        }
    }
    return null;
}


public Figure findFigure (Rectangle r, Figure without) {
    if (without == null) {
        return findFigure (r);
    }
    FigureEnumeration fe = figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        Rectangle fr = figure.displayBox ();
        if (r.intersects (fr) && ! figure.includes (without)) {
            return figure;
        }
    }
    return null;
}


public Figure findFigureInside (int x, int y) {
    FigureEnumeration fe = figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ().findFigureInside (x, y);
        if (figure != null) {
            return figure;
        }
    }
    if (containsPoint (x, y)) {
        return this;
    } else {
        return null;
    }
}


public Figure findFigureInsideWithout (int x, int y, Figure without) {
    if (without == null) {
        return findFigureInside (x, y);
    }
    FigureEnumeration fe = figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (figure != without) {
            Figure found = figure.findFigureInside (x, y);
            if ((found != null) && ! figure.includes (without)) {
                return found;
            }
        }
    }
    if (containsPoint (x, y)) {
        return this;
    } else {
        return null;
    }
}


public boolean includes (Figure figure) {
    if (super.includes (figure)) {
        return true;
    }
    FigureEnumeration fe = figures ();
    while (fe.hasNextFigure ()) {
        Figure f = fe.nextFigure ();
        if (f.includes (figure)) {
            return true;
        }
    }
    return false;
}


protected void basicMoveBy (int x, int y) {
    FigureEnumeration fe = figures ();
    while (fe.hasNextFigure ()) {
        fe.nextFigure ().moveBy (x, y);
    }
}


public void release () {
    FigureEnumeration fe = figures ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        figure.release ();
    }
    super.release ();
}


public void figureInvalidated (FigureChangeEvent e) {
    if (listener () != null) {
        listener ().figureInvalidated (e);
    }
}


public void figureRequestRemove (FigureChangeEvent e) {
    if (listener () != null) {
        listener ().figureRequestRemove (new FigureChangeEvent (this));
    }
}


public void figureRequestUpdate (FigureChangeEvent e) {
    if (listener () != null) {
        listener ().figureRequestUpdate (e);
    }
}


public void figureChanged (FigureChangeEvent e) {
    _removeFromQuadTree (e.getFigure ());
    _addToQuadTree (e.getFigure ());
}


public void figureRemoved (FigureChangeEvent e) {
    if (listener () != null) {
        listener ().figureRemoved (e);
    }
}


public void write (StorableOutput dw) {
    super.write (dw);
    dw.writeInt (figureCount ());
    FigureEnumeration fe = figures ();
    while (fe.hasNextFigure ()) {
        dw.writeStorable (fe.nextFigure ());
    }
}


public void read (StorableInput dr) throws IOException {
    super.read (dr);
    int size = dr.readInt ();
    fFigures = CollectionsFactory.current ().createList (size);
    for (int i = 0;
    i 

private void readObject (ObjectInputStream s) throws ClassNotFoundException, IOException {
    s.defaultReadObject ();
    FigureEnumeration fe = figures ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        figure.addToContainer (this);
    }
    init (new Rectangle (0, 0));
}


public void init (Rectangle viewRectangle) {
    _theQuadTree = new QuadTree (new Bounds (viewRectangle).asRectangle2D ());
    FigureEnumeration fe = figures ();
    while (fe.hasNextFigure ()) {
        _addToQuadTree (fe.nextFigure ());
    }
}


private void _addToQuadTree (Figure f) {
    if (_theQuadTree != null) {
        Rectangle r = f.displayBox ();
        if (r.height == 0) {
            r.grow (0, 1);
        }
        if (r.width == 0) {
            r.grow (1, 0);
        }
        _theQuadTree.add (f, new Bounds (r).asRectangle2D ());
    }
}


private void _removeFromQuadTree (Figure f) {
    if (_theQuadTree != null) {
        _theQuadTree.remove (f);
    }
}


private void _clearQuadTree () {
    if (_theQuadTree != null) {
        _theQuadTree.clear ();
    }
}


public ConnectionTool (DrawingEditor newDrawingEditor, ConnectionFigure newPrototype) {
    super (newDrawingEditor);
    fPrototype = newPrototype;
}


public void mouseMove (MouseEvent e, int x, int y) {
    trackConnectors (e, x, y);
}


public void mouseDown (MouseEvent e, int x, int y) {
    super.mouseDown (e, x, y);
    int ex = e.getX ();
    int ey = e.getY ();
    setTargetFigure (findConnectionStart (ex, ey, drawing ()));
    if (getTargetFigure () != null) {
        setStartConnector (findConnector (ex, ey, getTargetFigure ()));
        if (getStartConnector () != null) {
            setConnection (createConnection ());
            getConnection ().startPoint (ex, ey);
            getConnection ().endPoint (ex, ey);
            setAddedFigure (view ().add (getConnection ()));
        }
    } else {
        ConnectionFigure connection = findConnection (ex, ey, drawing ());
        if (connection != null) {
            if (! connection.joinSegments (ex, ey)) {
                fSplitPoint = connection.splitSegment (ex, ey);
                fEditedConnection = connection;
            } else {
                fEditedConnection = null;
            }
        }
    }
}


public void mouseDrag (MouseEvent e, int x, int y) {
    Point p = new Point (e.getX (), e.getY ());
    if (getConnection () != null) {
        trackConnectors (e, x, y);
        if (getTargetConnector () != null) {
            p = Geom.center (getTargetConnector ().displayBox ());
        }
        getConnection ().endPoint (p.x, p.y);
    } else if (fEditedConnection != null) {
        Point pp = new Point (x, y);
        fEditedConnection.setPointAt (pp, fSplitPoint);
    }

}


public void mouseUp (MouseEvent e, int x, int y) {
    Figure c = null;
    if (getStartConnector () != null) {
        c = findTarget (e.getX (), e.getY (), drawing ());
    }
    if (c != null) {
        setEndConnector (findConnector (e.getX (), e.getY (), c));
        if (getEndConnector () != null) {
            getConnection ().connectStart (getStartConnector ());
            getConnection ().connectEnd (getEndConnector ());
            getConnection ().updateConnection ();
            setUndoActivity (createUndoActivity ());
            getUndoActivity ().setAffectedFigures (new SingleFigureEnumerator (getAddedFigure ()));
        }
    } else if (getConnection () != null) {
        view ().remove (getConnection ());
    }

    setConnection (null);
    setStartConnector (null);
    setEndConnector (null);
    setAddedFigure (null);
    editor ().toolDone ();
}


public void deactivate () {
    super.deactivate ();
    if (getTargetFigure () != null) {
        getTargetFigure ().connectorVisibility (false, null);
    }
}


protected ConnectionFigure createConnection () {
    return (ConnectionFigure) fPrototype.clone ();
}


protected Figure findSource (int x, int y, Drawing drawing) {
    return findConnectableFigure (x, y, drawing);
}


protected Figure findTarget (int x, int y, Drawing drawing) {
    Figure target = findConnectableFigure (x, y, drawing);
    Figure start = getStartConnector ().owner ();
    if (target != null && getConnection () != null && target.canConnect () && ! target.includes (start) && getConnection ().canConnect (start, target)) {
        return target;
    }
    return null;
}


protected ConnectionFigure findConnection (int x, int y, Drawing drawing) {
    FigureEnumeration fe = drawing.figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        figure = figure.findFigureInside (x, y);
        if (figure != null && (figure instanceof ConnectionFigure)) {
            return (ConnectionFigure) figure;
        }
    }
    return null;
}


protected void setConnection (ConnectionFigure newConnection) {
    myConnection = newConnection;
}


protected ConnectionFigure getConnection () {
    return myConnection;
}


protected void trackConnectors (MouseEvent e, int x, int y) {
    Figure c = null;
    if (getStartConnector () == null) {
        c = findSource (x, y, getActiveDrawing ());
    } else {
        c = findTarget (x, y, getActiveDrawing ());
    }
    if (c != getTargetFigure ()) {
        if (getTargetFigure () != null) {
            getTargetFigure ().connectorVisibility (false, null);
        }
        setTargetFigure (c);
        if (getTargetFigure () != null) {
            getTargetFigure ().connectorVisibility (true, getConnection ());
        }
    }
    Connector cc = null;
    if (c != null) {
        cc = findConnector (e.getX (), e.getY (), c);
    }
    if (cc != getTargetConnector ()) {
        setTargetConnector (cc);
    }
    getActiveView ().checkDamage ();
}


protected Connector findConnector (int x, int y, Figure f) {
    return f.connectorAt (x, y);
}


protected Figure findConnectionStart (int x, int y, Drawing drawing) {
    Figure target = findConnectableFigure (x, y, drawing);
    if ((target != null) && target.canConnect ()) {
        return target;
    }
    return null;
}


protected Figure findConnectableFigure (int x, int y, Drawing drawing) {
    FigureEnumeration fe = drawing.figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (! figure.includes (getConnection ()) && figure.canConnect () && figure.containsPoint (x, y)) {
            return figure;
        }
    }
    return null;
}


protected void setStartConnector (Connector newStartConnector) {
    myStartConnector = newStartConnector;
}


protected Connector getStartConnector () {
    return myStartConnector;
}


protected void setEndConnector (Connector newEndConnector) {
    myEndConnector = newEndConnector;
}


protected Connector getEndConnector () {
    return myEndConnector;
}


protected void setTargetConnector (Connector newTargetConnector) {
    myTargetConnector = newTargetConnector;
}


protected Connector getTargetConnector () {
    return myTargetConnector;
}


protected void setTargetFigure (Figure newTarget) {
    myTarget = newTarget;
}


protected Figure getTargetFigure () {
    return myTarget;
}


protected Figure getAddedFigure () {
    return myAddedFigure;
}


protected void setAddedFigure (Figure newAddedFigure) {
    myAddedFigure = newAddedFigure;
}


protected Undoable createUndoActivity () {
    return new ConnectionTool.UndoActivity (view (), getConnection ());
}


public UndoActivity (DrawingView newDrawingView, ConnectionFigure newConnection) {
    super (newDrawingView);
    setConnection (newConnection);
    myStartConnector = getConnection ().getStartConnector ();
    myEndConnector = getConnection ().getEndConnector ();
    setUndoable (true);
    setRedoable (true);
}


public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    getConnection ().disconnectStart ();
    getConnection ().disconnectEnd ();
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        getDrawingView ().drawing ().orphan (fe.nextFigure ());
    }
    getDrawingView ().clearSelection ();
    return true;
}


public boolean redo () {
    if (! super.redo ()) {
        return false;
    }
    getConnection ().connectStart (myStartConnector);
    getConnection ().connectEnd (myEndConnector);
    getConnection ().updateConnection ();
    getDrawingView ().insertFigures (getAffectedFigures (), 0, 0, false);
    return true;
}


protected void setConnection (ConnectionFigure newConnection) {
    myConnection = newConnection;
}


protected ConnectionFigure getConnection () {
    return myConnection;
}


public DeleteFromDrawingVisitor (Drawing newDrawing) {
    myDeletedFigures = CollectionsFactory.current ().createSet ();
    setDrawing (newDrawing);
}


private void setDrawing (Drawing newDrawing) {
    myDrawing = newDrawing;
}


protected Drawing getDrawing () {
    return myDrawing;
}


public void visitFigure (Figure hostFigure) {
    if (! myDeletedFigures.contains (hostFigure) && getDrawing ().containsFigure (hostFigure)) {
        Figure orphanedFigure = getDrawing ().orphan (hostFigure);
        myDeletedFigures.add (orphanedFigure);
    }
}


public void visitHandle (Handle hostHandle) {
}


public void visitFigureChangeListener (FigureChangeListener hostFigureChangeListener) {
}


public FigureEnumeration getDeletedFigures () {
    return new FigureEnumerator (myDeletedFigures);
}


private PeripheralLocator () {
}


public PeripheralLocator (int pointsPerSide, int index) {
    fPPS = pointsPerSide;
    fIndex = index;
    if (index >= pointsPerSide * 4) {
        throw new IllegalArgumentException ("Index must be within the range of points starting with index = 0.");
    }
}


public Point locate (Figure parm1) {
    Rectangle r = parm1.displayBox ();
    int circumference = r.width * 2 + r.height * 2;
    int insets = 2 * 4 * CORNERSPACE;
    int spacing = circumference / (fPPS * 4 + 4);
    float hSpacing = (float) r.width / (fPPS + 1);
    float vSpacing = (float) r.height / (fPPS + 1);
    int x, y;
    if (fIndex 

public OffsetLocator () {
    fBase = null;
    fOffsetX = 0;
    fOffsetY = 0;
}


public OffsetLocator (Locator base) {
    this ();
    fBase = base;
}


public OffsetLocator (Locator base, int offsetX, int offsetY) {
    this (base);
    fOffsetX = offsetX;
    fOffsetY = offsetY;
}


public Point locate (Figure owner) {
    Point p = fBase.locate (owner);
    p.x += fOffsetX;
    p.y += fOffsetY;
    return p;
}


public void moveBy (int dx, int dy) {
    fOffsetX += dx;
    fOffsetY += dy;
}


public void write (StorableOutput dw) {
    super.write (dw);
    dw.writeInt (fOffsetX);
    dw.writeInt (fOffsetY);
    dw.writeStorable (fBase);
}


public void read (StorableInput dr) throws IOException {
    super.read (dr);
    fOffsetX = dr.readInt ();
    fOffsetY = dr.readInt ();
    fBase = (Locator) dr.readStorable ();
}


public LocatorConnector () {
    setLocator (null);
}


public LocatorConnector (Figure owner, Locator l) {
    super (owner);
    setLocator (l);
}


public boolean containsPoint (int x, int y) {
    return displayBox ().contains (x, y);
}


public Rectangle displayBox () {
    Point p = getLocator ().locate (owner ());
    return new Rectangle (p.x - SIZE / 2, p.y - SIZE / 2, SIZE, SIZE);
}


public void draw (Graphics g) {
    Rectangle r = displayBox ();
    g.setColor (Color.blue);
    g.fillOval (r.x, r.y, r.width, r.height);
    g.setColor (Color.black);
    g.drawOval (r.x, r.y, r.width, r.height);
}


public void write (StorableOutput dw) {
    super.write (dw);
    dw.writeStorable (getLocator ());
}


public void read (StorableInput dr) throws IOException {
    super.read (dr);
    setLocator ((Locator) dr.readStorable ());
}


protected void setLocator (Locator newLocator) {
    myLocator = newLocator;
}


public Locator getLocator () {
    return myLocator;
}


public InsertIntoDrawingVisitor (Drawing newDrawing) {
    myInsertedFigures = CollectionsFactory.current ().createSet ();
    setDrawing (newDrawing);
}


private void setDrawing (Drawing newDrawing) {
    myDrawing = newDrawing;
}


protected Drawing getDrawing () {
    return myDrawing;
}


public void visitFigure (Figure hostFigure) {
    if (! myInsertedFigures.contains (hostFigure) && ! getDrawing ().includes (hostFigure)) {
        Figure addedFigure = getDrawing ().add (hostFigure);
        myInsertedFigures.add (addedFigure);
    }
}


public void visitHandle (Handle hostHandle) {
}


public void visitFigureChangeListener (FigureChangeListener hostFigureChangeListener) {
}


public FigureEnumeration getInsertedFigures () {
    return new FigureEnumerator (myInsertedFigures);
}


public DecoratorFigure () {
    initialize ();
}


public DecoratorFigure (Figure figure) {
    initialize ();
    decorate (figure);
}


protected void initialize () {
}


public Insets connectionInsets () {
    return getDecoratedFigure ().connectionInsets ();
}


public boolean canConnect () {
    return getDecoratedFigure ().canConnect ();
}


public boolean containsPoint (int x, int y) {
    return getDecoratedFigure ().containsPoint (x, y);
}


public void decorate (Figure figure) {
    setDecoratedFigure (figure);
    getDecoratedFigure ().addToContainer (this);
}


public Figure peelDecoration () {
    getDecoratedFigure ().removeFromContainer (this);
    removeDependendFigure (getDecoratedFigure ());
    return getDecoratedFigure ();
}


public void setDecoratedFigure (Figure newDecoratedFigure) {
    myDecoratedFigure = newDecoratedFigure;
}


public Figure getDecoratedFigure () {
    return myDecoratedFigure;
}


public Rectangle displayBox () {
    return getDecoratedFigure ().displayBox ();
}


public void basicDisplayBox (Point origin, Point corner) {
    getDecoratedFigure ().basicDisplayBox (origin, corner);
}


public void draw (Graphics g) {
    getDecoratedFigure ().draw (g);
}


public Figure findFigureInside (int x, int y) {
    Figure foundFigure = getDecoratedFigure ().findFigureInside (x, y);
    if ((foundFigure != null) && (foundFigure == getDecoratedFigure ())) {
        return this;
    } else {
        return foundFigure;
    }
}


public HandleEnumeration handles () {
    return getDecoratedFigure ().handles ();
}


public boolean includes (Figure figure) {
    return (super.includes (figure) || getDecoratedFigure ().includes (figure));
}


public void moveBy (int x, int y) {
    getDecoratedFigure ().moveBy (x, y);
}


protected void basicMoveBy (int x, int y) {
}


public void release () {
    super.release ();
    getDecoratedFigure ().removeFromContainer (this);
    getDecoratedFigure ().release ();
}


public void figureInvalidated (FigureChangeEvent e) {
    if (listener () != null) {
        listener ().figureInvalidated (e);
    }
}


public void figureChanged (FigureChangeEvent e) {
}


public void figureRemoved (FigureChangeEvent e) {
}


public void figureRequestUpdate (FigureChangeEvent e) {
    if (listener () != null) {
        listener ().figureRequestUpdate (e);
    }
}


public void figureRequestRemove (FigureChangeEvent e) {
    if (listener () != null) {
        listener ().figureRequestRemove (new FigureChangeEvent (this));
    }
}


public FigureEnumeration figures () {
    return getDecoratedFigure ().figures ();
}


public FigureEnumeration decompose () {
    return getDecoratedFigure ().decompose ();
}


public void setAttribute (String name, Object value) {
    getDecoratedFigure ().setAttribute (name, value);
}


public void setAttribute (FigureAttributeConstant attributeConstant, Object value) {
    getDecoratedFigure ().setAttribute (attributeConstant, value);
}


public Object getAttribute (String name) {
    return getDecoratedFigure ().getAttribute (name);
}


public Object getAttribute (FigureAttributeConstant attributeConstant) {
    return getDecoratedFigure ().getAttribute (attributeConstant);
}


public Locator connectedTextLocator (Figure text) {
    return getDecoratedFigure ().connectedTextLocator (text);
}


public Connector connectorAt (int x, int y) {
    return getDecoratedFigure ().connectorAt (x, y);
}


public void connectorVisibility (boolean isVisible, ConnectionFigure courtingConnection) {
    getDecoratedFigure ().connectorVisibility (isVisible, null);
}


public void write (StorableOutput dw) {
    super.write (dw);
    dw.writeStorable (getDecoratedFigure ());
}


public void read (StorableInput dr) throws IOException {
    super.read (dr);
    decorate ((Figure) dr.readStorable ());
}


private void readObject (ObjectInputStream s) throws ClassNotFoundException, IOException {
    s.defaultReadObject ();
    getDecoratedFigure ().addToContainer (this);
}


public TextHolder getTextHolder () {
    return getDecoratedFigure ().getTextHolder ();
}


public synchronized FigureEnumeration getDependendFigures () {
    return getDecoratedFigure ().getDependendFigures ();
}


public synchronized void addDependendFigure (Figure newDependendFigure) {
    getDecoratedFigure ().addDependendFigure (newDependendFigure);
}


public synchronized void removeDependendFigure (Figure oldDependendFigure) {
    getDecoratedFigure ().removeDependendFigure (oldDependendFigure);
}


public AbstractTool (DrawingEditor newDrawingEditor) {
    myDrawingEditor = newDrawingEditor;
    setEventDispatcher (createEventDispatcher ());
    setEnabled (true);
    checkUsable ();
    editor ().addViewChangeListener (this);
}


public void activate () {
    if (getActiveView () != null) {
        getActiveView ().clearSelection ();
        getActiveView ().checkDamage ();
        getEventDispatcher ().fireToolActivatedEvent ();
    }
}


public void deactivate () {
    if (isActive ()) {
        if (getActiveView () != null) {
            getActiveView ().setCursor (Cursor.getDefaultCursor ());
        }
        getEventDispatcher ().fireToolDeactivatedEvent ();
    }
}


public void viewSelectionChanged (DrawingView oldView, DrawingView newView) {
    if (isActive ()) {
        deactivate ();
        activate ();
    }
    checkUsable ();
}


public void viewCreated (DrawingView view) {
}


public void viewDestroying (DrawingView view) {
}


public void mouseDown (MouseEvent e, int x, int y) {
    setAnchorX (x);
    setAnchorY (y);
    setView ((DrawingView) e.getSource ());
}


public void mouseDrag (MouseEvent e, int x, int y) {
}


public void mouseUp (MouseEvent e, int x, int y) {
}


public void mouseMove (MouseEvent evt, int x, int y) {
}


public void keyDown (KeyEvent evt, int key) {
}


public Drawing drawing () {
    return view ().drawing ();
}


public Drawing getActiveDrawing () {
    return getActiveView ().drawing ();
}


public DrawingEditor editor () {
    return myDrawingEditor;
}


protected void setEditor (DrawingEditor newDrawingEditor) {
    myDrawingEditor = newDrawingEditor;
}


public DrawingView view () {
    return myDrawingView;
}


protected void setView (DrawingView newDrawingView) {
    myDrawingView = newDrawingView;
}


public DrawingView getActiveView () {
    return editor ().view ();
}


public boolean isUsable () {
    return isEnabled () && myIsUsable;
}


public void setUsable (boolean newIsUsable) {
    if (isUsable () != newIsUsable) {
        myIsUsable = newIsUsable;
        if (isUsable ()) {
            getEventDispatcher ().fireToolUsableEvent ();
        } else {
            getEventDispatcher ().fireToolUnusableEvent ();
        }
    }
}


public void setEnabled (boolean newIsEnabled) {
    if (isEnabled () != newIsEnabled) {
        myIsEnabled = newIsEnabled;
        if (isEnabled ()) {
            getEventDispatcher ().fireToolEnabledEvent ();
        } else {
            getEventDispatcher ().fireToolDisabledEvent ();
            setUsable (false);
            deactivate ();
        }
    }
}


public boolean isEnabled () {
    return myIsEnabled;
}


protected void setAnchorX (int newAnchorX) {
    myAnchorX = newAnchorX;
}


protected int getAnchorX () {
    return myAnchorX;
}


protected void setAnchorY (int newAnchorY) {
    myAnchorY = newAnchorY;
}


protected int getAnchorY () {
    return myAnchorY;
}


public Undoable getUndoActivity () {
    return myUndoActivity;
}


public void setUndoActivity (Undoable newUndoActivity) {
    myUndoActivity = newUndoActivity;
}


public boolean isActive () {
    return (editor ().tool () == this) && isUsable ();
}


public void addToolListener (ToolListener newToolListener) {
    getEventDispatcher ().addToolListener (newToolListener);
}


public void removeToolListener (ToolListener oldToolListener) {
    getEventDispatcher ().removeToolListener (oldToolListener);
}


private void setEventDispatcher (AbstractTool.EventDispatcher newEventDispatcher) {
    myEventDispatcher = newEventDispatcher;
}


protected AbstractTool.EventDispatcher getEventDispatcher () {
    return myEventDispatcher;
}


public AbstractTool.EventDispatcher createEventDispatcher () {
    return new AbstractTool.EventDispatcher (this);
}


protected void checkUsable () {
    if (isEnabled ()) {
        setUsable ((getActiveView () != null) && getActiveView ().isInteractive ());
    }
}


public EventDispatcher (Tool newObservedTool) {
    myRegisteredListeners = CollectionsFactory.current ().createList ();
    myObservedTool = newObservedTool;
}


public void fireToolUsableEvent () {
    Iterator iter = myRegisteredListeners.iterator ();
    while (iter.hasNext ()) {
        ((ToolListener) iter.next ()).toolUsable (new EventObject (myObservedTool));
    }
}


public void fireToolUnusableEvent () {
    Iterator iter = myRegisteredListeners.iterator ();
    while (iter.hasNext ()) {
        ((ToolListener) iter.next ()).toolUnusable (new EventObject (myObservedTool));
    }
}


public void fireToolActivatedEvent () {
    Iterator iter = myRegisteredListeners.iterator ();
    while (iter.hasNext ()) {
        ((ToolListener) iter.next ()).toolActivated (new EventObject (myObservedTool));
    }
}


public void fireToolDeactivatedEvent () {
    Iterator iter = myRegisteredListeners.iterator ();
    while (iter.hasNext ()) {
        ((ToolListener) iter.next ()).toolDeactivated (new EventObject (myObservedTool));
    }
}


public void fireToolEnabledEvent () {
    Iterator iter = myRegisteredListeners.iterator ();
    while (iter.hasNext ()) {
        ((ToolListener) iter.next ()).toolEnabled (new EventObject (myObservedTool));
    }
}


public void fireToolDisabledEvent () {
    Iterator iter = myRegisteredListeners.iterator ();
    while (iter.hasNext ()) {
        ((ToolListener) iter.next ()).toolDisabled (new EventObject (myObservedTool));
    }
}


public void addToolListener (ToolListener newToolListener) {
    if (! myRegisteredListeners.contains (newToolListener)) {
        myRegisteredListeners.add (newToolListener);
    }
}


----------------------------------------

public void read (StorableInput dr) throws IOException {
    super.read (dr);
    int size = dr.readInt ();
    fFigures = CollectionsFactory.current ().createList (size);
    for (int i = 0;
    i 

private void readObject (ObjectInputStream s) throws ClassNotFoundException, IOException {
    s.defaultReadObject ();
    FigureEnumeration fe = figures ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        figure.addToContainer (this);
    }
    init (new Rectangle (0, 0));
}


public void init (Rectangle viewRectangle) {
    _theQuadTree = new QuadTree (new Bounds (viewRectangle).asRectangle2D ());
    FigureEnumeration fe = figures ();
    while (fe.hasNextFigure ()) {
        _addToQuadTree (fe.nextFigure ());
    }
}


private void _addToQuadTree (Figure f) {
    if (_theQuadTree != null) {
        Rectangle r = f.displayBox ();
        if (r.height == 0) {
            r.grow (0, 1);
        }
        if (r.width == 0) {
            r.grow (1, 0);
        }
        _theQuadTree.add (f, new Bounds (r).asRectangle2D ());
    }
}


private void _removeFromQuadTree (Figure f) {
    if (_theQuadTree != null) {
        _theQuadTree.remove (f);
    }
}


private void _clearQuadTree () {
    if (_theQuadTree != null) {
        _theQuadTree.clear ();
    }
}


public ConnectionTool (DrawingEditor newDrawingEditor, ConnectionFigure newPrototype) {
    super (newDrawingEditor);
    fPrototype = newPrototype;
}


public void mouseMove (MouseEvent e, int x, int y) {
    trackConnectors (e, x, y);
}


public void mouseDown (MouseEvent e, int x, int y) {
    super.mouseDown (e, x, y);
    int ex = e.getX ();
    int ey = e.getY ();
    setTargetFigure (findConnectionStart (ex, ey, drawing ()));
    if (getTargetFigure () != null) {
        setStartConnector (findConnector (ex, ey, getTargetFigure ()));
        if (getStartConnector () != null) {
            setConnection (createConnection ());
            getConnection ().startPoint (ex, ey);
            getConnection ().endPoint (ex, ey);
            setAddedFigure (view ().add (getConnection ()));
        }
    } else {
        ConnectionFigure connection = findConnection (ex, ey, drawing ());
        if (connection != null) {
            if (! connection.joinSegments (ex, ey)) {
                fSplitPoint = connection.splitSegment (ex, ey);
                fEditedConnection = connection;
            } else {
                fEditedConnection = null;
            }
        }
    }
}


public void mouseDrag (MouseEvent e, int x, int y) {
    Point p = new Point (e.getX (), e.getY ());
    if (getConnection () != null) {
        trackConnectors (e, x, y);
        if (getTargetConnector () != null) {
            p = Geom.center (getTargetConnector ().displayBox ());
        }
        getConnection ().endPoint (p.x, p.y);
    } else if (fEditedConnection != null) {
        Point pp = new Point (x, y);
        fEditedConnection.setPointAt (pp, fSplitPoint);
    }

}


public void mouseUp (MouseEvent e, int x, int y) {
    Figure c = null;
    if (getStartConnector () != null) {
        c = findTarget (e.getX (), e.getY (), drawing ());
    }
    if (c != null) {
        setEndConnector (findConnector (e.getX (), e.getY (), c));
        if (getEndConnector () != null) {
            getConnection ().connectStart (getStartConnector ());
            getConnection ().connectEnd (getEndConnector ());
            getConnection ().updateConnection ();
            setUndoActivity (createUndoActivity ());
            getUndoActivity ().setAffectedFigures (new SingleFigureEnumerator (getAddedFigure ()));
        }
    } else if (getConnection () != null) {
        view ().remove (getConnection ());
    }

    setConnection (null);
    setStartConnector (null);
    setEndConnector (null);
    setAddedFigure (null);
    editor ().toolDone ();
}


public void deactivate () {
    super.deactivate ();
    if (getTargetFigure () != null) {
        getTargetFigure ().connectorVisibility (false, null);
    }
}


protected ConnectionFigure createConnection () {
    return (ConnectionFigure) fPrototype.clone ();
}


protected Figure findSource (int x, int y, Drawing drawing) {
    return findConnectableFigure (x, y, drawing);
}


protected Figure findTarget (int x, int y, Drawing drawing) {
    Figure target = findConnectableFigure (x, y, drawing);
    Figure start = getStartConnector ().owner ();
    if (target != null && getConnection () != null && target.canConnect () && ! target.includes (start) && getConnection ().canConnect (start, target)) {
        return target;
    }
    return null;
}


protected ConnectionFigure findConnection (int x, int y, Drawing drawing) {
    FigureEnumeration fe = drawing.figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        figure = figure.findFigureInside (x, y);
        if (figure != null && (figure instanceof ConnectionFigure)) {
            return (ConnectionFigure) figure;
        }
    }
    return null;
}


protected void setConnection (ConnectionFigure newConnection) {
    myConnection = newConnection;
}


protected ConnectionFigure getConnection () {
    return myConnection;
}


protected void trackConnectors (MouseEvent e, int x, int y) {
    Figure c = null;
    if (getStartConnector () == null) {
        c = findSource (x, y, getActiveDrawing ());
    } else {
        c = findTarget (x, y, getActiveDrawing ());
    }
    if (c != getTargetFigure ()) {
        if (getTargetFigure () != null) {
            getTargetFigure ().connectorVisibility (false, null);
        }
        setTargetFigure (c);
        if (getTargetFigure () != null) {
            getTargetFigure ().connectorVisibility (true, getConnection ());
        }
    }
    Connector cc = null;
    if (c != null) {
        cc = findConnector (e.getX (), e.getY (), c);
    }
    if (cc != getTargetConnector ()) {
        setTargetConnector (cc);
    }
    getActiveView ().checkDamage ();
}


protected Connector findConnector (int x, int y, Figure f) {
    return f.connectorAt (x, y);
}


protected Figure findConnectionStart (int x, int y, Drawing drawing) {
    Figure target = findConnectableFigure (x, y, drawing);
    if ((target != null) && target.canConnect ()) {
        return target;
    }
    return null;
}


protected Figure findConnectableFigure (int x, int y, Drawing drawing) {
    FigureEnumeration fe = drawing.figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (! figure.includes (getConnection ()) && figure.canConnect () && figure.containsPoint (x, y)) {
            return figure;
        }
    }
    return null;
}


protected void setStartConnector (Connector newStartConnector) {
    myStartConnector = newStartConnector;
}


protected Connector getStartConnector () {
    return myStartConnector;
}


protected void setEndConnector (Connector newEndConnector) {
    myEndConnector = newEndConnector;
}


protected Connector getEndConnector () {
    return myEndConnector;
}


protected void setTargetConnector (Connector newTargetConnector) {
    myTargetConnector = newTargetConnector;
}


protected Connector getTargetConnector () {
    return myTargetConnector;
}


protected void setTargetFigure (Figure newTarget) {
    myTarget = newTarget;
}


protected Figure getTargetFigure () {
    return myTarget;
}


protected Figure getAddedFigure () {
    return myAddedFigure;
}


protected void setAddedFigure (Figure newAddedFigure) {
    myAddedFigure = newAddedFigure;
}


protected Undoable createUndoActivity () {
    return new ConnectionTool.UndoActivity (view (), getConnection ());
}


public UndoActivity (DrawingView newDrawingView, ConnectionFigure newConnection) {
    super (newDrawingView);
    setConnection (newConnection);
    myStartConnector = getConnection ().getStartConnector ();
    myEndConnector = getConnection ().getEndConnector ();
    setUndoable (true);
    setRedoable (true);
}


public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    getConnection ().disconnectStart ();
    getConnection ().disconnectEnd ();
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        getDrawingView ().drawing ().orphan (fe.nextFigure ());
    }
    getDrawingView ().clearSelection ();
    return true;
}


public boolean redo () {
    if (! super.redo ()) {
        return false;
    }
    getConnection ().connectStart (myStartConnector);
    getConnection ().connectEnd (myEndConnector);
    getConnection ().updateConnection ();
    getDrawingView ().insertFigures (getAffectedFigures (), 0, 0, false);
    return true;
}


protected void setConnection (ConnectionFigure newConnection) {
    myConnection = newConnection;
}


protected ConnectionFigure getConnection () {
    return myConnection;
}


public DeleteFromDrawingVisitor (Drawing newDrawing) {
    myDeletedFigures = CollectionsFactory.current ().createSet ();
    setDrawing (newDrawing);
}


private void setDrawing (Drawing newDrawing) {
    myDrawing = newDrawing;
}


protected Drawing getDrawing () {
    return myDrawing;
}


public void visitFigure (Figure hostFigure) {
    if (! myDeletedFigures.contains (hostFigure) && getDrawing ().containsFigure (hostFigure)) {
        Figure orphanedFigure = getDrawing ().orphan (hostFigure);
        myDeletedFigures.add (orphanedFigure);
    }
}


public void visitHandle (Handle hostHandle) {
}


public void visitFigureChangeListener (FigureChangeListener hostFigureChangeListener) {
}


public FigureEnumeration getDeletedFigures () {
    return new FigureEnumerator (myDeletedFigures);
}


private PeripheralLocator () {
}


public PeripheralLocator (int pointsPerSide, int index) {
    fPPS = pointsPerSide;
    fIndex = index;
    if (index >= pointsPerSide * 4) {
        throw new IllegalArgumentException ("Index must be within the range of points starting with index = 0.");
    }
}


public Point locate (Figure parm1) {
    Rectangle r = parm1.displayBox ();
    int circumference = r.width * 2 + r.height * 2;
    int insets = 2 * 4 * CORNERSPACE;
    int spacing = circumference / (fPPS * 4 + 4);
    float hSpacing = (float) r.width / (fPPS + 1);
    float vSpacing = (float) r.height / (fPPS + 1);
    int x, y;
    if (fIndex 

public OffsetLocator () {
    fBase = null;
    fOffsetX = 0;
    fOffsetY = 0;
}


public OffsetLocator (Locator base) {
    this ();
    fBase = base;
}


public OffsetLocator (Locator base, int offsetX, int offsetY) {
    this (base);
    fOffsetX = offsetX;
    fOffsetY = offsetY;
}


public Point locate (Figure owner) {
    Point p = fBase.locate (owner);
    p.x += fOffsetX;
    p.y += fOffsetY;
    return p;
}


public void moveBy (int dx, int dy) {
    fOffsetX += dx;
    fOffsetY += dy;
}


public void write (StorableOutput dw) {
    super.write (dw);
    dw.writeInt (fOffsetX);
    dw.writeInt (fOffsetY);
    dw.writeStorable (fBase);
}


public void read (StorableInput dr) throws IOException {
    super.read (dr);
    fOffsetX = dr.readInt ();
    fOffsetY = dr.readInt ();
    fBase = (Locator) dr.readStorable ();
}


public LocatorConnector () {
    setLocator (null);
}


public LocatorConnector (Figure owner, Locator l) {
    super (owner);
    setLocator (l);
}


public boolean containsPoint (int x, int y) {
    return displayBox ().contains (x, y);
}


public Rectangle displayBox () {
    Point p = getLocator ().locate (owner ());
    return new Rectangle (p.x - SIZE / 2, p.y - SIZE / 2, SIZE, SIZE);
}


public void draw (Graphics g) {
    Rectangle r = displayBox ();
    g.setColor (Color.blue);
    g.fillOval (r.x, r.y, r.width, r.height);
    g.setColor (Color.black);
    g.drawOval (r.x, r.y, r.width, r.height);
}


public void write (StorableOutput dw) {
    super.write (dw);
    dw.writeStorable (getLocator ());
}


public void read (StorableInput dr) throws IOException {
    super.read (dr);
    setLocator ((Locator) dr.readStorable ());
}


protected void setLocator (Locator newLocator) {
    myLocator = newLocator;
}


public Locator getLocator () {
    return myLocator;
}


public InsertIntoDrawingVisitor (Drawing newDrawing) {
    myInsertedFigures = CollectionsFactory.current ().createSet ();
    setDrawing (newDrawing);
}


private void setDrawing (Drawing newDrawing) {
    myDrawing = newDrawing;
}


protected Drawing getDrawing () {
    return myDrawing;
}


public void visitFigure (Figure hostFigure) {
    if (! myInsertedFigures.contains (hostFigure) && ! getDrawing ().includes (hostFigure)) {
        Figure addedFigure = getDrawing ().add (hostFigure);
        myInsertedFigures.add (addedFigure);
    }
}


public void visitHandle (Handle hostHandle) {
}


public void visitFigureChangeListener (FigureChangeListener hostFigureChangeListener) {
}


public FigureEnumeration getInsertedFigures () {
    return new FigureEnumerator (myInsertedFigures);
}


public DecoratorFigure () {
    initialize ();
}


public DecoratorFigure (Figure figure) {
    initialize ();
    decorate (figure);
}


protected void initialize () {
}


public Insets connectionInsets () {
    return getDecoratedFigure ().connectionInsets ();
}


public boolean canConnect () {
    return getDecoratedFigure ().canConnect ();
}


public boolean containsPoint (int x, int y) {
    return getDecoratedFigure ().containsPoint (x, y);
}


public void decorate (Figure figure) {
    setDecoratedFigure (figure);
    getDecoratedFigure ().addToContainer (this);
}


public Figure peelDecoration () {
    getDecoratedFigure ().removeFromContainer (this);
    removeDependendFigure (getDecoratedFigure ());
    return getDecoratedFigure ();
}


public void setDecoratedFigure (Figure newDecoratedFigure) {
    myDecoratedFigure = newDecoratedFigure;
}


public Figure getDecoratedFigure () {
    return myDecoratedFigure;
}


public Rectangle displayBox () {
    return getDecoratedFigure ().displayBox ();
}


public void basicDisplayBox (Point origin, Point corner) {
    getDecoratedFigure ().basicDisplayBox (origin, corner);
}


public void draw (Graphics g) {
    getDecoratedFigure ().draw (g);
}


public Figure findFigureInside (int x, int y) {
    Figure foundFigure = getDecoratedFigure ().findFigureInside (x, y);
    if ((foundFigure != null) && (foundFigure == getDecoratedFigure ())) {
        return this;
    } else {
        return foundFigure;
    }
}


public HandleEnumeration handles () {
    return getDecoratedFigure ().handles ();
}


public boolean includes (Figure figure) {
    return (super.includes (figure) || getDecoratedFigure ().includes (figure));
}


public void moveBy (int x, int y) {
    getDecoratedFigure ().moveBy (x, y);
}


protected void basicMoveBy (int x, int y) {
}


public void release () {
    super.release ();
    getDecoratedFigure ().removeFromContainer (this);
    getDecoratedFigure ().release ();
}


public void figureInvalidated (FigureChangeEvent e) {
    if (listener () != null) {
        listener ().figureInvalidated (e);
    }
}


public void figureChanged (FigureChangeEvent e) {
}


public void figureRemoved (FigureChangeEvent e) {
}


public void figureRequestUpdate (FigureChangeEvent e) {
    if (listener () != null) {
        listener ().figureRequestUpdate (e);
    }
}


public void figureRequestRemove (FigureChangeEvent e) {
    if (listener () != null) {
        listener ().figureRequestRemove (new FigureChangeEvent (this));
    }
}


public FigureEnumeration figures () {
    return getDecoratedFigure ().figures ();
}


public FigureEnumeration decompose () {
    return getDecoratedFigure ().decompose ();
}


public void setAttribute (String name, Object value) {
    getDecoratedFigure ().setAttribute (name, value);
}


public void setAttribute (FigureAttributeConstant attributeConstant, Object value) {
    getDecoratedFigure ().setAttribute (attributeConstant, value);
}


public Object getAttribute (String name) {
    return getDecoratedFigure ().getAttribute (name);
}


public Object getAttribute (FigureAttributeConstant attributeConstant) {
    return getDecoratedFigure ().getAttribute (attributeConstant);
}


public Locator connectedTextLocator (Figure text) {
    return getDecoratedFigure ().connectedTextLocator (text);
}


public Connector connectorAt (int x, int y) {
    return getDecoratedFigure ().connectorAt (x, y);
}


public void connectorVisibility (boolean isVisible, ConnectionFigure courtingConnection) {
    getDecoratedFigure ().connectorVisibility (isVisible, null);
}


public void write (StorableOutput dw) {
    super.write (dw);
    dw.writeStorable (getDecoratedFigure ());
}


public void read (StorableInput dr) throws IOException {
    super.read (dr);
    decorate ((Figure) dr.readStorable ());
}


private void readObject (ObjectInputStream s) throws ClassNotFoundException, IOException {
    s.defaultReadObject ();
    getDecoratedFigure ().addToContainer (this);
}


public TextHolder getTextHolder () {
    return getDecoratedFigure ().getTextHolder ();
}


public synchronized FigureEnumeration getDependendFigures () {
    return getDecoratedFigure ().getDependendFigures ();
}


public synchronized void addDependendFigure (Figure newDependendFigure) {
    getDecoratedFigure ().addDependendFigure (newDependendFigure);
}


public synchronized void removeDependendFigure (Figure oldDependendFigure) {
    getDecoratedFigure ().removeDependendFigure (oldDependendFigure);
}


public AbstractTool (DrawingEditor newDrawingEditor) {
    myDrawingEditor = newDrawingEditor;
    setEventDispatcher (createEventDispatcher ());
    setEnabled (true);
    checkUsable ();
    editor ().addViewChangeListener (this);
}


public void activate () {
    if (getActiveView () != null) {
        getActiveView ().clearSelection ();
        getActiveView ().checkDamage ();
        getEventDispatcher ().fireToolActivatedEvent ();
    }
}


public void deactivate () {
    if (isActive ()) {
        if (getActiveView () != null) {
            getActiveView ().setCursor (Cursor.getDefaultCursor ());
        }
        getEventDispatcher ().fireToolDeactivatedEvent ();
    }
}


public void viewSelectionChanged (DrawingView oldView, DrawingView newView) {
    if (isActive ()) {
        deactivate ();
        activate ();
    }
    checkUsable ();
}


public void viewCreated (DrawingView view) {
}


public void viewDestroying (DrawingView view) {
}


public void mouseDown (MouseEvent e, int x, int y) {
    setAnchorX (x);
    setAnchorY (y);
    setView ((DrawingView) e.getSource ());
}


public void mouseDrag (MouseEvent e, int x, int y) {
}


public void mouseUp (MouseEvent e, int x, int y) {
}


public void mouseMove (MouseEvent evt, int x, int y) {
}


public void keyDown (KeyEvent evt, int key) {
}


public Drawing drawing () {
    return view ().drawing ();
}


public Drawing getActiveDrawing () {
    return getActiveView ().drawing ();
}


public DrawingEditor editor () {
    return myDrawingEditor;
}


protected void setEditor (DrawingEditor newDrawingEditor) {
    myDrawingEditor = newDrawingEditor;
}


public DrawingView view () {
    return myDrawingView;
}


protected void setView (DrawingView newDrawingView) {
    myDrawingView = newDrawingView;
}


public DrawingView getActiveView () {
    return editor ().view ();
}


public boolean isUsable () {
    return isEnabled () && myIsUsable;
}


public void setUsable (boolean newIsUsable) {
    if (isUsable () != newIsUsable) {
        myIsUsable = newIsUsable;
        if (isUsable ()) {
            getEventDispatcher ().fireToolUsableEvent ();
        } else {
            getEventDispatcher ().fireToolUnusableEvent ();
        }
    }
}


public void setEnabled (boolean newIsEnabled) {
    if (isEnabled () != newIsEnabled) {
        myIsEnabled = newIsEnabled;
        if (isEnabled ()) {
            getEventDispatcher ().fireToolEnabledEvent ();
        } else {
            getEventDispatcher ().fireToolDisabledEvent ();
            setUsable (false);
            deactivate ();
        }
    }
}


public boolean isEnabled () {
    return myIsEnabled;
}


protected void setAnchorX (int newAnchorX) {
    myAnchorX = newAnchorX;
}


protected int getAnchorX () {
    return myAnchorX;
}


protected void setAnchorY (int newAnchorY) {
    myAnchorY = newAnchorY;
}


protected int getAnchorY () {
    return myAnchorY;
}


public Undoable getUndoActivity () {
    return myUndoActivity;
}


public void setUndoActivity (Undoable newUndoActivity) {
    myUndoActivity = newUndoActivity;
}


public boolean isActive () {
    return (editor ().tool () == this) && isUsable ();
}


public void addToolListener (ToolListener newToolListener) {
    getEventDispatcher ().addToolListener (newToolListener);
}


public void removeToolListener (ToolListener oldToolListener) {
    getEventDispatcher ().removeToolListener (oldToolListener);
}


private void setEventDispatcher (AbstractTool.EventDispatcher newEventDispatcher) {
    myEventDispatcher = newEventDispatcher;
}


protected AbstractTool.EventDispatcher getEventDispatcher () {
    return myEventDispatcher;
}


public AbstractTool.EventDispatcher createEventDispatcher () {
    return new AbstractTool.EventDispatcher (this);
}


protected void checkUsable () {
    if (isEnabled ()) {
        setUsable ((getActiveView () != null) && getActiveView ().isInteractive ());
    }
}


public EventDispatcher (Tool newObservedTool) {
    myRegisteredListeners = CollectionsFactory.current ().createList ();
    myObservedTool = newObservedTool;
}


public void fireToolUsableEvent () {
    Iterator iter = myRegisteredListeners.iterator ();
    while (iter.hasNext ()) {
        ((ToolListener) iter.next ()).toolUsable (new EventObject (myObservedTool));
    }
}


public void fireToolUnusableEvent () {
    Iterator iter = myRegisteredListeners.iterator ();
    while (iter.hasNext ()) {
        ((ToolListener) iter.next ()).toolUnusable (new EventObject (myObservedTool));
    }
}


public void fireToolActivatedEvent () {
    Iterator iter = myRegisteredListeners.iterator ();
    while (iter.hasNext ()) {
        ((ToolListener) iter.next ()).toolActivated (new EventObject (myObservedTool));
    }
}


public void fireToolDeactivatedEvent () {
    Iterator iter = myRegisteredListeners.iterator ();
    while (iter.hasNext ()) {
        ((ToolListener) iter.next ()).toolDeactivated (new EventObject (myObservedTool));
    }
}


public void fireToolEnabledEvent () {
    Iterator iter = myRegisteredListeners.iterator ();
    while (iter.hasNext ()) {
        ((ToolListener) iter.next ()).toolEnabled (new EventObject (myObservedTool));
    }
}


public void fireToolDisabledEvent () {
    Iterator iter = myRegisteredListeners.iterator ();
    while (iter.hasNext ()) {
        ((ToolListener) iter.next ()).toolDisabled (new EventObject (myObservedTool));
    }
}


public void addToolListener (ToolListener newToolListener) {
    if (! myRegisteredListeners.contains (newToolListener)) {
        myRegisteredListeners.add (newToolListener);
    }
}


----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/CompositeFigure.java 434 443
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/CompositeFigure.java 448 458
----------------------------------------

public Figure findFigure (int x, int y) {
    FigureEnumeration fe = figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (figure.containsPoint (x, y)) {
            return figure;
        }
    }
    return null;
}

----------------------------------------

public Figure findFigure (Rectangle r) {
    FigureEnumeration fe = figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        Rectangle fr = figure.displayBox ();
        if (r.intersects (fr)) {
            return figure;
        }
    }
    return null;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/CompositeFigure.java 434 443
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/CompositeFigure.java 469 482
----------------------------------------

public Figure findFigure (int x, int y) {
    FigureEnumeration fe = figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (figure.containsPoint (x, y)) {
            return figure;
        }
    }
    return null;
}

----------------------------------------

public Figure findFigureWithout (int x, int y, Figure without) {
    if (without == null) {
        return findFigure (x, y);
    }
    FigureEnumeration fe = figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (figure.containsPoint (x, y) && ! figure.includes (without)) {
            return figure;
        }
    }
    return null;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/CompositeFigure.java 434 443
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/CompositeFigure.java 490 504
----------------------------------------

public Figure findFigure (int x, int y) {
    FigureEnumeration fe = figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (figure.containsPoint (x, y)) {
            return figure;
        }
    }
    return null;
}

----------------------------------------

public Figure findFigure (Rectangle r, Figure without) {
    if (without == null) {
        return findFigure (r);
    }
    FigureEnumeration fe = figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        Rectangle fr = figure.displayBox ();
        if (r.intersects (fr) && ! figure.includes (without)) {
            return figure;
        }
    }
    return null;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/CompositeFigure.java 434 443
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/CompositeFigure.java 512 528
----------------------------------------

public Figure findFigure (int x, int y) {
    FigureEnumeration fe = figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (figure.containsPoint (x, y)) {
            return figure;
        }
    }
    return null;
}

----------------------------------------

public Figure findFigureInside (int x, int y) {
    FigureEnumeration fe = figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ().findFigureInside (x, y);
        if (figure != null) {
            return figure;
        }
    }
    if (containsPoint (x, y)) {
        return this;
    } else {
        return null;
    }
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/CompositeFigure.java 434 443
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ConnectionTool.java 223 233
----------------------------------------

public Figure findFigure (int x, int y) {
    FigureEnumeration fe = figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (figure.containsPoint (x, y)) {
            return figure;
        }
    }
    return null;
}

----------------------------------------

protected ConnectionFigure findConnection (int x, int y, Drawing drawing) {
    FigureEnumeration fe = drawing.figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        figure = figure.findFigureInside (x, y);
        if (figure != null && (figure instanceof ConnectionFigure)) {
            return (ConnectionFigure) figure;
        }
    }
    return null;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/CompositeFigure.java 434 443
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ConnectionTool.java 314 324
----------------------------------------

public Figure findFigure (int x, int y) {
    FigureEnumeration fe = figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (figure.containsPoint (x, y)) {
            return figure;
        }
    }
    return null;
}

----------------------------------------

protected Figure findConnectableFigure (int x, int y, Drawing drawing) {
    FigureEnumeration fe = drawing.figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (! figure.includes (getConnection ()) && figure.canConnect () && figure.containsPoint (x, y)) {
            return figure;
        }
    }
    return null;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/CompositeFigure.java 448 458
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/CompositeFigure.java 469 482
----------------------------------------

public Figure findFigure (Rectangle r) {
    FigureEnumeration fe = figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        Rectangle fr = figure.displayBox ();
        if (r.intersects (fr)) {
            return figure;
        }
    }
    return null;
}

----------------------------------------

public Figure findFigureWithout (int x, int y, Figure without) {
    if (without == null) {
        return findFigure (x, y);
    }
    FigureEnumeration fe = figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (figure.containsPoint (x, y) && ! figure.includes (without)) {
            return figure;
        }
    }
    return null;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/CompositeFigure.java 448 458
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/CompositeFigure.java 490 504
----------------------------------------

public Figure findFigure (Rectangle r) {
    FigureEnumeration fe = figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        Rectangle fr = figure.displayBox ();
        if (r.intersects (fr)) {
            return figure;
        }
    }
    return null;
}

----------------------------------------

public Figure findFigure (Rectangle r, Figure without) {
    if (without == null) {
        return findFigure (r);
    }
    FigureEnumeration fe = figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        Rectangle fr = figure.displayBox ();
        if (r.intersects (fr) && ! figure.includes (without)) {
            return figure;
        }
    }
    return null;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/CompositeFigure.java 448 458
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/CompositeFigure.java 512 528
----------------------------------------

public Figure findFigure (Rectangle r) {
    FigureEnumeration fe = figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        Rectangle fr = figure.displayBox ();
        if (r.intersects (fr)) {
            return figure;
        }
    }
    return null;
}

----------------------------------------

public Figure findFigureInside (int x, int y) {
    FigureEnumeration fe = figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ().findFigureInside (x, y);
        if (figure != null) {
            return figure;
        }
    }
    if (containsPoint (x, y)) {
        return this;
    } else {
        return null;
    }
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/CompositeFigure.java 448 458
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ConnectionTool.java 223 233
----------------------------------------

public Figure findFigure (Rectangle r) {
    FigureEnumeration fe = figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        Rectangle fr = figure.displayBox ();
        if (r.intersects (fr)) {
            return figure;
        }
    }
    return null;
}

----------------------------------------

protected ConnectionFigure findConnection (int x, int y, Drawing drawing) {
    FigureEnumeration fe = drawing.figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        figure = figure.findFigureInside (x, y);
        if (figure != null && (figure instanceof ConnectionFigure)) {
            return (ConnectionFigure) figure;
        }
    }
    return null;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/CompositeFigure.java 448 458
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ConnectionTool.java 314 324
----------------------------------------

public Figure findFigure (Rectangle r) {
    FigureEnumeration fe = figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        Rectangle fr = figure.displayBox ();
        if (r.intersects (fr)) {
            return figure;
        }
    }
    return null;
}

----------------------------------------

protected Figure findConnectableFigure (int x, int y, Drawing drawing) {
    FigureEnumeration fe = drawing.figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (! figure.includes (getConnection ()) && figure.canConnect () && figure.containsPoint (x, y)) {
            return figure;
        }
    }
    return null;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/CompositeFigure.java 469 482
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/CompositeFigure.java 490 504
----------------------------------------

public Figure findFigureWithout (int x, int y, Figure without) {
    if (without == null) {
        return findFigure (x, y);
    }
    FigureEnumeration fe = figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (figure.containsPoint (x, y) && ! figure.includes (without)) {
            return figure;
        }
    }
    return null;
}

----------------------------------------

public Figure findFigure (Rectangle r, Figure without) {
    if (without == null) {
        return findFigure (r);
    }
    FigureEnumeration fe = figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        Rectangle fr = figure.displayBox ();
        if (r.intersects (fr) && ! figure.includes (without)) {
            return figure;
        }
    }
    return null;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/CompositeFigure.java 469 482
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/CompositeFigure.java 536 558
----------------------------------------

public Figure findFigureWithout (int x, int y, Figure without) {
    if (without == null) {
        return findFigure (x, y);
    }
    FigureEnumeration fe = figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (figure.containsPoint (x, y) && ! figure.includes (without)) {
            return figure;
        }
    }
    return null;
}

----------------------------------------

public Figure findFigureInsideWithout (int x, int y, Figure without) {
    if (without == null) {
        return findFigureInside (x, y);
    }
    FigureEnumeration fe = figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (figure != without) {
            Figure found = figure.findFigureInside (x, y);
            if ((found != null) && ! figure.includes (without)) {
                return found;
            }
        }
    }
    if (containsPoint (x, y)) {
        return this;
    } else {
        return null;
    }
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/CompositeFigure.java 469 482
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ConnectionTool.java 314 324
----------------------------------------

public Figure findFigureWithout (int x, int y, Figure without) {
    if (without == null) {
        return findFigure (x, y);
    }
    FigureEnumeration fe = figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (figure.containsPoint (x, y) && ! figure.includes (without)) {
            return figure;
        }
    }
    return null;
}

----------------------------------------

protected Figure findConnectableFigure (int x, int y, Drawing drawing) {
    FigureEnumeration fe = drawing.figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (! figure.includes (getConnection ()) && figure.canConnect () && figure.containsPoint (x, y)) {
            return figure;
        }
    }
    return null;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/CompositeFigure.java 662 670
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/PeripheralLocator.java 41 72
----------------------------------------

public void read (StorableInput dr) throws IOException {
    super.read (dr);
    int size = dr.readInt ();
    fFigures = CollectionsFactory.current ().createList (size);
    for (int i = 0;
    i 

private void readObject (ObjectInputStream s) throws ClassNotFoundException, IOException {
    s.defaultReadObject ();
    FigureEnumeration fe = figures ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        figure.addToContainer (this);
    }
    init (new Rectangle (0, 0));
}


public void init (Rectangle viewRectangle) {
    _theQuadTree = new QuadTree (new Bounds (viewRectangle).asRectangle2D ());
    FigureEnumeration fe = figures ();
    while (fe.hasNextFigure ()) {
        _addToQuadTree (fe.nextFigure ());
    }
}


private void _addToQuadTree (Figure f) {
    if (_theQuadTree != null) {
        Rectangle r = f.displayBox ();
        if (r.height == 0) {
            r.grow (0, 1);
        }
        if (r.width == 0) {
            r.grow (1, 0);
        }
        _theQuadTree.add (f, new Bounds (r).asRectangle2D ());
    }
}


private void _removeFromQuadTree (Figure f) {
    if (_theQuadTree != null) {
        _theQuadTree.remove (f);
    }
}


private void _clearQuadTree () {
    if (_theQuadTree != null) {
        _theQuadTree.clear ();
    }
}


public ConnectionTool (DrawingEditor newDrawingEditor, ConnectionFigure newPrototype) {
    super (newDrawingEditor);
    fPrototype = newPrototype;
}


public void mouseMove (MouseEvent e, int x, int y) {
    trackConnectors (e, x, y);
}


public void mouseDown (MouseEvent e, int x, int y) {
    super.mouseDown (e, x, y);
    int ex = e.getX ();
    int ey = e.getY ();
    setTargetFigure (findConnectionStart (ex, ey, drawing ()));
    if (getTargetFigure () != null) {
        setStartConnector (findConnector (ex, ey, getTargetFigure ()));
        if (getStartConnector () != null) {
            setConnection (createConnection ());
            getConnection ().startPoint (ex, ey);
            getConnection ().endPoint (ex, ey);
            setAddedFigure (view ().add (getConnection ()));
        }
    } else {
        ConnectionFigure connection = findConnection (ex, ey, drawing ());
        if (connection != null) {
            if (! connection.joinSegments (ex, ey)) {
                fSplitPoint = connection.splitSegment (ex, ey);
                fEditedConnection = connection;
            } else {
                fEditedConnection = null;
            }
        }
    }
}


public void mouseDrag (MouseEvent e, int x, int y) {
    Point p = new Point (e.getX (), e.getY ());
    if (getConnection () != null) {
        trackConnectors (e, x, y);
        if (getTargetConnector () != null) {
            p = Geom.center (getTargetConnector ().displayBox ());
        }
        getConnection ().endPoint (p.x, p.y);
    } else if (fEditedConnection != null) {
        Point pp = new Point (x, y);
        fEditedConnection.setPointAt (pp, fSplitPoint);
    }

}


public void mouseUp (MouseEvent e, int x, int y) {
    Figure c = null;
    if (getStartConnector () != null) {
        c = findTarget (e.getX (), e.getY (), drawing ());
    }
    if (c != null) {
        setEndConnector (findConnector (e.getX (), e.getY (), c));
        if (getEndConnector () != null) {
            getConnection ().connectStart (getStartConnector ());
            getConnection ().connectEnd (getEndConnector ());
            getConnection ().updateConnection ();
            setUndoActivity (createUndoActivity ());
            getUndoActivity ().setAffectedFigures (new SingleFigureEnumerator (getAddedFigure ()));
        }
    } else if (getConnection () != null) {
        view ().remove (getConnection ());
    }

    setConnection (null);
    setStartConnector (null);
    setEndConnector (null);
    setAddedFigure (null);
    editor ().toolDone ();
}


public void deactivate () {
    super.deactivate ();
    if (getTargetFigure () != null) {
        getTargetFigure ().connectorVisibility (false, null);
    }
}


protected ConnectionFigure createConnection () {
    return (ConnectionFigure) fPrototype.clone ();
}


protected Figure findSource (int x, int y, Drawing drawing) {
    return findConnectableFigure (x, y, drawing);
}


protected Figure findTarget (int x, int y, Drawing drawing) {
    Figure target = findConnectableFigure (x, y, drawing);
    Figure start = getStartConnector ().owner ();
    if (target != null && getConnection () != null && target.canConnect () && ! target.includes (start) && getConnection ().canConnect (start, target)) {
        return target;
    }
    return null;
}


protected ConnectionFigure findConnection (int x, int y, Drawing drawing) {
    FigureEnumeration fe = drawing.figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        figure = figure.findFigureInside (x, y);
        if (figure != null && (figure instanceof ConnectionFigure)) {
            return (ConnectionFigure) figure;
        }
    }
    return null;
}


protected void setConnection (ConnectionFigure newConnection) {
    myConnection = newConnection;
}


protected ConnectionFigure getConnection () {
    return myConnection;
}


protected void trackConnectors (MouseEvent e, int x, int y) {
    Figure c = null;
    if (getStartConnector () == null) {
        c = findSource (x, y, getActiveDrawing ());
    } else {
        c = findTarget (x, y, getActiveDrawing ());
    }
    if (c != getTargetFigure ()) {
        if (getTargetFigure () != null) {
            getTargetFigure ().connectorVisibility (false, null);
        }
        setTargetFigure (c);
        if (getTargetFigure () != null) {
            getTargetFigure ().connectorVisibility (true, getConnection ());
        }
    }
    Connector cc = null;
    if (c != null) {
        cc = findConnector (e.getX (), e.getY (), c);
    }
    if (cc != getTargetConnector ()) {
        setTargetConnector (cc);
    }
    getActiveView ().checkDamage ();
}


protected Connector findConnector (int x, int y, Figure f) {
    return f.connectorAt (x, y);
}


protected Figure findConnectionStart (int x, int y, Drawing drawing) {
    Figure target = findConnectableFigure (x, y, drawing);
    if ((target != null) && target.canConnect ()) {
        return target;
    }
    return null;
}


protected Figure findConnectableFigure (int x, int y, Drawing drawing) {
    FigureEnumeration fe = drawing.figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (! figure.includes (getConnection ()) && figure.canConnect () && figure.containsPoint (x, y)) {
            return figure;
        }
    }
    return null;
}


protected void setStartConnector (Connector newStartConnector) {
    myStartConnector = newStartConnector;
}


protected Connector getStartConnector () {
    return myStartConnector;
}


protected void setEndConnector (Connector newEndConnector) {
    myEndConnector = newEndConnector;
}


protected Connector getEndConnector () {
    return myEndConnector;
}


protected void setTargetConnector (Connector newTargetConnector) {
    myTargetConnector = newTargetConnector;
}


protected Connector getTargetConnector () {
    return myTargetConnector;
}


protected void setTargetFigure (Figure newTarget) {
    myTarget = newTarget;
}


protected Figure getTargetFigure () {
    return myTarget;
}


protected Figure getAddedFigure () {
    return myAddedFigure;
}


protected void setAddedFigure (Figure newAddedFigure) {
    myAddedFigure = newAddedFigure;
}


protected Undoable createUndoActivity () {
    return new ConnectionTool.UndoActivity (view (), getConnection ());
}


public UndoActivity (DrawingView newDrawingView, ConnectionFigure newConnection) {
    super (newDrawingView);
    setConnection (newConnection);
    myStartConnector = getConnection ().getStartConnector ();
    myEndConnector = getConnection ().getEndConnector ();
    setUndoable (true);
    setRedoable (true);
}


public boolean undo () {
    if (! super.undo ()) {
        return false;
    }
    getConnection ().disconnectStart ();
    getConnection ().disconnectEnd ();
    FigureEnumeration fe = getAffectedFigures ();
    while (fe.hasNextFigure ()) {
        getDrawingView ().drawing ().orphan (fe.nextFigure ());
    }
    getDrawingView ().clearSelection ();
    return true;
}


public boolean redo () {
    if (! super.redo ()) {
        return false;
    }
    getConnection ().connectStart (myStartConnector);
    getConnection ().connectEnd (myEndConnector);
    getConnection ().updateConnection ();
    getDrawingView ().insertFigures (getAffectedFigures (), 0, 0, false);
    return true;
}


protected void setConnection (ConnectionFigure newConnection) {
    myConnection = newConnection;
}


protected ConnectionFigure getConnection () {
    return myConnection;
}


public DeleteFromDrawingVisitor (Drawing newDrawing) {
    myDeletedFigures = CollectionsFactory.current ().createSet ();
    setDrawing (newDrawing);
}


private void setDrawing (Drawing newDrawing) {
    myDrawing = newDrawing;
}


protected Drawing getDrawing () {
    return myDrawing;
}


public void visitFigure (Figure hostFigure) {
    if (! myDeletedFigures.contains (hostFigure) && getDrawing ().containsFigure (hostFigure)) {
        Figure orphanedFigure = getDrawing ().orphan (hostFigure);
        myDeletedFigures.add (orphanedFigure);
    }
}


public void visitHandle (Handle hostHandle) {
}


public void visitFigureChangeListener (FigureChangeListener hostFigureChangeListener) {
}


public FigureEnumeration getDeletedFigures () {
    return new FigureEnumerator (myDeletedFigures);
}


private PeripheralLocator () {
}


public PeripheralLocator (int pointsPerSide, int index) {
    fPPS = pointsPerSide;
    fIndex = index;
    if (index >= pointsPerSide * 4) {
        throw new IllegalArgumentException ("Index must be within the range of points starting with index = 0.");
    }
}


public Point locate (Figure parm1) {
    Rectangle r = parm1.displayBox ();
    int circumference = r.width * 2 + r.height * 2;
    int insets = 2 * 4 * CORNERSPACE;
    int spacing = circumference / (fPPS * 4 + 4);
    float hSpacing = (float) r.width / (fPPS + 1);
    float vSpacing = (float) r.height / (fPPS + 1);
    int x, y;
    if (fIndex 

public OffsetLocator () {
    fBase = null;
    fOffsetX = 0;
    fOffsetY = 0;
}


public OffsetLocator (Locator base) {
    this ();
    fBase = base;
}


public OffsetLocator (Locator base, int offsetX, int offsetY) {
    this (base);
    fOffsetX = offsetX;
    fOffsetY = offsetY;
}


public Point locate (Figure owner) {
    Point p = fBase.locate (owner);
    p.x += fOffsetX;
    p.y += fOffsetY;
    return p;
}


public void moveBy (int dx, int dy) {
    fOffsetX += dx;
    fOffsetY += dy;
}


public void write (StorableOutput dw) {
    super.write (dw);
    dw.writeInt (fOffsetX);
    dw.writeInt (fOffsetY);
    dw.writeStorable (fBase);
}


public void read (StorableInput dr) throws IOException {
    super.read (dr);
    fOffsetX = dr.readInt ();
    fOffsetY = dr.readInt ();
    fBase = (Locator) dr.readStorable ();
}


public LocatorConnector () {
    setLocator (null);
}


public LocatorConnector (Figure owner, Locator l) {
    super (owner);
    setLocator (l);
}


public boolean containsPoint (int x, int y) {
    return displayBox ().contains (x, y);
}


public Rectangle displayBox () {
    Point p = getLocator ().locate (owner ());
    return new Rectangle (p.x - SIZE / 2, p.y - SIZE / 2, SIZE, SIZE);
}


public void draw (Graphics g) {
    Rectangle r = displayBox ();
    g.setColor (Color.blue);
    g.fillOval (r.x, r.y, r.width, r.height);
    g.setColor (Color.black);
    g.drawOval (r.x, r.y, r.width, r.height);
}


public void write (StorableOutput dw) {
    super.write (dw);
    dw.writeStorable (getLocator ());
}


public void read (StorableInput dr) throws IOException {
    super.read (dr);
    setLocator ((Locator) dr.readStorable ());
}


protected void setLocator (Locator newLocator) {
    myLocator = newLocator;
}


public Locator getLocator () {
    return myLocator;
}


public InsertIntoDrawingVisitor (Drawing newDrawing) {
    myInsertedFigures = CollectionsFactory.current ().createSet ();
    setDrawing (newDrawing);
}


private void setDrawing (Drawing newDrawing) {
    myDrawing = newDrawing;
}


protected Drawing getDrawing () {
    return myDrawing;
}


public void visitFigure (Figure hostFigure) {
    if (! myInsertedFigures.contains (hostFigure) && ! getDrawing ().includes (hostFigure)) {
        Figure addedFigure = getDrawing ().add (hostFigure);
        myInsertedFigures.add (addedFigure);
    }
}


public void visitHandle (Handle hostHandle) {
}


public void visitFigureChangeListener (FigureChangeListener hostFigureChangeListener) {
}


public FigureEnumeration getInsertedFigures () {
    return new FigureEnumerator (myInsertedFigures);
}


public DecoratorFigure () {
    initialize ();
}


public DecoratorFigure (Figure figure) {
    initialize ();
    decorate (figure);
}


protected void initialize () {
}


public Insets connectionInsets () {
    return getDecoratedFigure ().connectionInsets ();
}


public boolean canConnect () {
    return getDecoratedFigure ().canConnect ();
}


public boolean containsPoint (int x, int y) {
    return getDecoratedFigure ().containsPoint (x, y);
}


public void decorate (Figure figure) {
    setDecoratedFigure (figure);
    getDecoratedFigure ().addToContainer (this);
}


public Figure peelDecoration () {
    getDecoratedFigure ().removeFromContainer (this);
    removeDependendFigure (getDecoratedFigure ());
    return getDecoratedFigure ();
}


public void setDecoratedFigure (Figure newDecoratedFigure) {
    myDecoratedFigure = newDecoratedFigure;
}


public Figure getDecoratedFigure () {
    return myDecoratedFigure;
}


public Rectangle displayBox () {
    return getDecoratedFigure ().displayBox ();
}


public void basicDisplayBox (Point origin, Point corner) {
    getDecoratedFigure ().basicDisplayBox (origin, corner);
}


public void draw (Graphics g) {
    getDecoratedFigure ().draw (g);
}


public Figure findFigureInside (int x, int y) {
    Figure foundFigure = getDecoratedFigure ().findFigureInside (x, y);
    if ((foundFigure != null) && (foundFigure == getDecoratedFigure ())) {
        return this;
    } else {
        return foundFigure;
    }
}


public HandleEnumeration handles () {
    return getDecoratedFigure ().handles ();
}


public boolean includes (Figure figure) {
    return (super.includes (figure) || getDecoratedFigure ().includes (figure));
}


public void moveBy (int x, int y) {
    getDecoratedFigure ().moveBy (x, y);
}


protected void basicMoveBy (int x, int y) {
}


public void release () {
    super.release ();
    getDecoratedFigure ().removeFromContainer (this);
    getDecoratedFigure ().release ();
}


public void figureInvalidated (FigureChangeEvent e) {
    if (listener () != null) {
        listener ().figureInvalidated (e);
    }
}


public void figureChanged (FigureChangeEvent e) {
}


public void figureRemoved (FigureChangeEvent e) {
}


public void figureRequestUpdate (FigureChangeEvent e) {
    if (listener () != null) {
        listener ().figureRequestUpdate (e);
    }
}


public void figureRequestRemove (FigureChangeEvent e) {
    if (listener () != null) {
        listener ().figureRequestRemove (new FigureChangeEvent (this));
    }
}


public FigureEnumeration figures () {
    return getDecoratedFigure ().figures ();
}


public FigureEnumeration decompose () {
    return getDecoratedFigure ().decompose ();
}


public void setAttribute (String name, Object value) {
    getDecoratedFigure ().setAttribute (name, value);
}


public void setAttribute (FigureAttributeConstant attributeConstant, Object value) {
    getDecoratedFigure ().setAttribute (attributeConstant, value);
}


public Object getAttribute (String name) {
    return getDecoratedFigure ().getAttribute (name);
}


public Object getAttribute (FigureAttributeConstant attributeConstant) {
    return getDecoratedFigure ().getAttribute (attributeConstant);
}


public Locator connectedTextLocator (Figure text) {
    return getDecoratedFigure ().connectedTextLocator (text);
}


public Connector connectorAt (int x, int y) {
    return getDecoratedFigure ().connectorAt (x, y);
}


public void connectorVisibility (boolean isVisible, ConnectionFigure courtingConnection) {
    getDecoratedFigure ().connectorVisibility (isVisible, null);
}


public void write (StorableOutput dw) {
    super.write (dw);
    dw.writeStorable (getDecoratedFigure ());
}


public void read (StorableInput dr) throws IOException {
    super.read (dr);
    decorate ((Figure) dr.readStorable ());
}


private void readObject (ObjectInputStream s) throws ClassNotFoundException, IOException {
    s.defaultReadObject ();
    getDecoratedFigure ().addToContainer (this);
}


public TextHolder getTextHolder () {
    return getDecoratedFigure ().getTextHolder ();
}


public synchronized FigureEnumeration getDependendFigures () {
    return getDecoratedFigure ().getDependendFigures ();
}


public synchronized void addDependendFigure (Figure newDependendFigure) {
    getDecoratedFigure ().addDependendFigure (newDependendFigure);
}


public synchronized void removeDependendFigure (Figure oldDependendFigure) {
    getDecoratedFigure ().removeDependendFigure (oldDependendFigure);
}


public AbstractTool (DrawingEditor newDrawingEditor) {
    myDrawingEditor = newDrawingEditor;
    setEventDispatcher (createEventDispatcher ());
    setEnabled (true);
    checkUsable ();
    editor ().addViewChangeListener (this);
}


public void activate () {
    if (getActiveView () != null) {
        getActiveView ().clearSelection ();
        getActiveView ().checkDamage ();
        getEventDispatcher ().fireToolActivatedEvent ();
    }
}


public void deactivate () {
    if (isActive ()) {
        if (getActiveView () != null) {
            getActiveView ().setCursor (Cursor.getDefaultCursor ());
        }
        getEventDispatcher ().fireToolDeactivatedEvent ();
    }
}


public void viewSelectionChanged (DrawingView oldView, DrawingView newView) {
    if (isActive ()) {
        deactivate ();
        activate ();
    }
    checkUsable ();
}


public void viewCreated (DrawingView view) {
}


public void viewDestroying (DrawingView view) {
}


public void mouseDown (MouseEvent e, int x, int y) {
    setAnchorX (x);
    setAnchorY (y);
    setView ((DrawingView) e.getSource ());
}


public void mouseDrag (MouseEvent e, int x, int y) {
}


public void mouseUp (MouseEvent e, int x, int y) {
}


public void mouseMove (MouseEvent evt, int x, int y) {
}


public void keyDown (KeyEvent evt, int key) {
}


public Drawing drawing () {
    return view ().drawing ();
}


public Drawing getActiveDrawing () {
    return getActiveView ().drawing ();
}


public DrawingEditor editor () {
    return myDrawingEditor;
}


protected void setEditor (DrawingEditor newDrawingEditor) {
    myDrawingEditor = newDrawingEditor;
}


public DrawingView view () {
    return myDrawingView;
}


protected void setView (DrawingView newDrawingView) {
    myDrawingView = newDrawingView;
}


public DrawingView getActiveView () {
    return editor ().view ();
}


public boolean isUsable () {
    return isEnabled () && myIsUsable;
}


public void setUsable (boolean newIsUsable) {
    if (isUsable () != newIsUsable) {
        myIsUsable = newIsUsable;
        if (isUsable ()) {
            getEventDispatcher ().fireToolUsableEvent ();
        } else {
            getEventDispatcher ().fireToolUnusableEvent ();
        }
    }
}


public void setEnabled (boolean newIsEnabled) {
    if (isEnabled () != newIsEnabled) {
        myIsEnabled = newIsEnabled;
        if (isEnabled ()) {
            getEventDispatcher ().fireToolEnabledEvent ();
        } else {
            getEventDispatcher ().fireToolDisabledEvent ();
            setUsable (false);
            deactivate ();
        }
    }
}


public boolean isEnabled () {
    return myIsEnabled;
}


protected void setAnchorX (int newAnchorX) {
    myAnchorX = newAnchorX;
}


protected int getAnchorX () {
    return myAnchorX;
}


protected void setAnchorY (int newAnchorY) {
    myAnchorY = newAnchorY;
}


protected int getAnchorY () {
    return myAnchorY;
}


public Undoable getUndoActivity () {
    return myUndoActivity;
}


public void setUndoActivity (Undoable newUndoActivity) {
    myUndoActivity = newUndoActivity;
}


public boolean isActive () {
    return (editor ().tool () == this) && isUsable ();
}


public void addToolListener (ToolListener newToolListener) {
    getEventDispatcher ().addToolListener (newToolListener);
}


public void removeToolListener (ToolListener oldToolListener) {
    getEventDispatcher ().removeToolListener (oldToolListener);
}


private void setEventDispatcher (AbstractTool.EventDispatcher newEventDispatcher) {
    myEventDispatcher = newEventDispatcher;
}


protected AbstractTool.EventDispatcher getEventDispatcher () {
    return myEventDispatcher;
}


public AbstractTool.EventDispatcher createEventDispatcher () {
    return new AbstractTool.EventDispatcher (this);
}


protected void checkUsable () {
    if (isEnabled ()) {
        setUsable ((getActiveView () != null) && getActiveView ().isInteractive ());
    }
}


public EventDispatcher (Tool newObservedTool) {
    myRegisteredListeners = CollectionsFactory.current ().createList ();
    myObservedTool = newObservedTool;
}


public void fireToolUsableEvent () {
    Iterator iter = myRegisteredListeners.iterator ();
    while (iter.hasNext ()) {
        ((ToolListener) iter.next ()).toolUsable (new EventObject (myObservedTool));
    }
}


public void fireToolUnusableEvent () {
    Iterator iter = myRegisteredListeners.iterator ();
    while (iter.hasNext ()) {
        ((ToolListener) iter.next ()).toolUnusable (new EventObject (myObservedTool));
    }
}


public void fireToolActivatedEvent () {
    Iterator iter = myRegisteredListeners.iterator ();
    while (iter.hasNext ()) {
        ((ToolListener) iter.next ()).toolActivated (new EventObject (myObservedTool));
    }
}


public void fireToolDeactivatedEvent () {
    Iterator iter = myRegisteredListeners.iterator ();
    while (iter.hasNext ()) {
        ((ToolListener) iter.next ()).toolDeactivated (new EventObject (myObservedTool));
    }
}


public void fireToolEnabledEvent () {
    Iterator iter = myRegisteredListeners.iterator ();
    while (iter.hasNext ()) {
        ((ToolListener) iter.next ()).toolEnabled (new EventObject (myObservedTool));
    }
}


public void fireToolDisabledEvent () {
    Iterator iter = myRegisteredListeners.iterator ();
    while (iter.hasNext ()) {
        ((ToolListener) iter.next ()).toolDisabled (new EventObject (myObservedTool));
    }
}


public void addToolListener (ToolListener newToolListener) {
    if (! myRegisteredListeners.contains (newToolListener)) {
        myRegisteredListeners.add (newToolListener);
    }
}


----------------------------------------

public Point locate (Figure parm1) {
    Rectangle r = parm1.displayBox ();
    int circumference = r.width * 2 + r.height * 2;
    int insets = 2 * 4 * CORNERSPACE;
    int spacing = circumference / (fPPS * 4 + 4);
    float hSpacing = (float) r.width / (fPPS + 1);
    float vSpacing = (float) r.height / (fPPS + 1);
    int x, y;
    if (fIndex 

public OffsetLocator () {
    fBase = null;
    fOffsetX = 0;
    fOffsetY = 0;
}


public OffsetLocator (Locator base) {
    this ();
    fBase = base;
}


public OffsetLocator (Locator base, int offsetX, int offsetY) {
    this (base);
    fOffsetX = offsetX;
    fOffsetY = offsetY;
}


public Point locate (Figure owner) {
    Point p = fBase.locate (owner);
    p.x += fOffsetX;
    p.y += fOffsetY;
    return p;
}


public void moveBy (int dx, int dy) {
    fOffsetX += dx;
    fOffsetY += dy;
}


public void write (StorableOutput dw) {
    super.write (dw);
    dw.writeInt (fOffsetX);
    dw.writeInt (fOffsetY);
    dw.writeStorable (fBase);
}


public void read (StorableInput dr) throws IOException {
    super.read (dr);
    fOffsetX = dr.readInt ();
    fOffsetY = dr.readInt ();
    fBase = (Locator) dr.readStorable ();
}


public LocatorConnector () {
    setLocator (null);
}


public LocatorConnector (Figure owner, Locator l) {
    super (owner);
    setLocator (l);
}


public boolean containsPoint (int x, int y) {
    return displayBox ().contains (x, y);
}


public Rectangle displayBox () {
    Point p = getLocator ().locate (owner ());
    return new Rectangle (p.x - SIZE / 2, p.y - SIZE / 2, SIZE, SIZE);
}


public void draw (Graphics g) {
    Rectangle r = displayBox ();
    g.setColor (Color.blue);
    g.fillOval (r.x, r.y, r.width, r.height);
    g.setColor (Color.black);
    g.drawOval (r.x, r.y, r.width, r.height);
}


public void write (StorableOutput dw) {
    super.write (dw);
    dw.writeStorable (getLocator ());
}


public void read (StorableInput dr) throws IOException {
    super.read (dr);
    setLocator ((Locator) dr.readStorable ());
}


protected void setLocator (Locator newLocator) {
    myLocator = newLocator;
}


public Locator getLocator () {
    return myLocator;
}


public InsertIntoDrawingVisitor (Drawing newDrawing) {
    myInsertedFigures = CollectionsFactory.current ().createSet ();
    setDrawing (newDrawing);
}


private void setDrawing (Drawing newDrawing) {
    myDrawing = newDrawing;
}


protected Drawing getDrawing () {
    return myDrawing;
}


public void visitFigure (Figure hostFigure) {
    if (! myInsertedFigures.contains (hostFigure) && ! getDrawing ().includes (hostFigure)) {
        Figure addedFigure = getDrawing ().add (hostFigure);
        myInsertedFigures.add (addedFigure);
    }
}


public void visitHandle (Handle hostHandle) {
}


public void visitFigureChangeListener (FigureChangeListener hostFigureChangeListener) {
}


public FigureEnumeration getInsertedFigures () {
    return new FigureEnumerator (myInsertedFigures);
}


public DecoratorFigure () {
    initialize ();
}


public DecoratorFigure (Figure figure) {
    initialize ();
    decorate (figure);
}


protected void initialize () {
}


public Insets connectionInsets () {
    return getDecoratedFigure ().connectionInsets ();
}


public boolean canConnect () {
    return getDecoratedFigure ().canConnect ();
}


public boolean containsPoint (int x, int y) {
    return getDecoratedFigure ().containsPoint (x, y);
}


public void decorate (Figure figure) {
    setDecoratedFigure (figure);
    getDecoratedFigure ().addToContainer (this);
}


public Figure peelDecoration () {
    getDecoratedFigure ().removeFromContainer (this);
    removeDependendFigure (getDecoratedFigure ());
    return getDecoratedFigure ();
}


public void setDecoratedFigure (Figure newDecoratedFigure) {
    myDecoratedFigure = newDecoratedFigure;
}


public Figure getDecoratedFigure () {
    return myDecoratedFigure;
}


public Rectangle displayBox () {
    return getDecoratedFigure ().displayBox ();
}


public void basicDisplayBox (Point origin, Point corner) {
    getDecoratedFigure ().basicDisplayBox (origin, corner);
}


public void draw (Graphics g) {
    getDecoratedFigure ().draw (g);
}


public Figure findFigureInside (int x, int y) {
    Figure foundFigure = getDecoratedFigure ().findFigureInside (x, y);
    if ((foundFigure != null) && (foundFigure == getDecoratedFigure ())) {
        return this;
    } else {
        return foundFigure;
    }
}


public HandleEnumeration handles () {
    return getDecoratedFigure ().handles ();
}


public boolean includes (Figure figure) {
    return (super.includes (figure) || getDecoratedFigure ().includes (figure));
}


public void moveBy (int x, int y) {
    getDecoratedFigure ().moveBy (x, y);
}


protected void basicMoveBy (int x, int y) {
}


public void release () {
    super.release ();
    getDecoratedFigure ().removeFromContainer (this);
    getDecoratedFigure ().release ();
}


public void figureInvalidated (FigureChangeEvent e) {
    if (listener () != null) {
        listener ().figureInvalidated (e);
    }
}


public void figureChanged (FigureChangeEvent e) {
}


public void figureRemoved (FigureChangeEvent e) {
}


public void figureRequestUpdate (FigureChangeEvent e) {
    if (listener () != null) {
        listener ().figureRequestUpdate (e);
    }
}


public void figureRequestRemove (FigureChangeEvent e) {
    if (listener () != null) {
        listener ().figureRequestRemove (new FigureChangeEvent (this));
    }
}


public FigureEnumeration figures () {
    return getDecoratedFigure ().figures ();
}


public FigureEnumeration decompose () {
    return getDecoratedFigure ().decompose ();
}


public void setAttribute (String name, Object value) {
    getDecoratedFigure ().setAttribute (name, value);
}


public void setAttribute (FigureAttributeConstant attributeConstant, Object value) {
    getDecoratedFigure ().setAttribute (attributeConstant, value);
}


public Object getAttribute (String name) {
    return getDecoratedFigure ().getAttribute (name);
}


public Object getAttribute (FigureAttributeConstant attributeConstant) {
    return getDecoratedFigure ().getAttribute (attributeConstant);
}


public Locator connectedTextLocator (Figure text) {
    return getDecoratedFigure ().connectedTextLocator (text);
}


public Connector connectorAt (int x, int y) {
    return getDecoratedFigure ().connectorAt (x, y);
}


public void connectorVisibility (boolean isVisible, ConnectionFigure courtingConnection) {
    getDecoratedFigure ().connectorVisibility (isVisible, null);
}


public void write (StorableOutput dw) {
    super.write (dw);
    dw.writeStorable (getDecoratedFigure ());
}


public void read (StorableInput dr) throws IOException {
    super.read (dr);
    decorate ((Figure) dr.readStorable ());
}


private void readObject (ObjectInputStream s) throws ClassNotFoundException, IOException {
    s.defaultReadObject ();
    getDecoratedFigure ().addToContainer (this);
}


public TextHolder getTextHolder () {
    return getDecoratedFigure ().getTextHolder ();
}


public synchronized FigureEnumeration getDependendFigures () {
    return getDecoratedFigure ().getDependendFigures ();
}


public synchronized void addDependendFigure (Figure newDependendFigure) {
    getDecoratedFigure ().addDependendFigure (newDependendFigure);
}


public synchronized void removeDependendFigure (Figure oldDependendFigure) {
    getDecoratedFigure ().removeDependendFigure (oldDependendFigure);
}


public AbstractTool (DrawingEditor newDrawingEditor) {
    myDrawingEditor = newDrawingEditor;
    setEventDispatcher (createEventDispatcher ());
    setEnabled (true);
    checkUsable ();
    editor ().addViewChangeListener (this);
}


public void activate () {
    if (getActiveView () != null) {
        getActiveView ().clearSelection ();
        getActiveView ().checkDamage ();
        getEventDispatcher ().fireToolActivatedEvent ();
    }
}


public void deactivate () {
    if (isActive ()) {
        if (getActiveView () != null) {
            getActiveView ().setCursor (Cursor.getDefaultCursor ());
        }
        getEventDispatcher ().fireToolDeactivatedEvent ();
    }
}


public void viewSelectionChanged (DrawingView oldView, DrawingView newView) {
    if (isActive ()) {
        deactivate ();
        activate ();
    }
    checkUsable ();
}


public void viewCreated (DrawingView view) {
}


public void viewDestroying (DrawingView view) {
}


public void mouseDown (MouseEvent e, int x, int y) {
    setAnchorX (x);
    setAnchorY (y);
    setView ((DrawingView) e.getSource ());
}


public void mouseDrag (MouseEvent e, int x, int y) {
}


public void mouseUp (MouseEvent e, int x, int y) {
}


public void mouseMove (MouseEvent evt, int x, int y) {
}


public void keyDown (KeyEvent evt, int key) {
}


public Drawing drawing () {
    return view ().drawing ();
}


public Drawing getActiveDrawing () {
    return getActiveView ().drawing ();
}


public DrawingEditor editor () {
    return myDrawingEditor;
}


protected void setEditor (DrawingEditor newDrawingEditor) {
    myDrawingEditor = newDrawingEditor;
}


public DrawingView view () {
    return myDrawingView;
}


protected void setView (DrawingView newDrawingView) {
    myDrawingView = newDrawingView;
}


public DrawingView getActiveView () {
    return editor ().view ();
}


public boolean isUsable () {
    return isEnabled () && myIsUsable;
}


public void setUsable (boolean newIsUsable) {
    if (isUsable () != newIsUsable) {
        myIsUsable = newIsUsable;
        if (isUsable ()) {
            getEventDispatcher ().fireToolUsableEvent ();
        } else {
            getEventDispatcher ().fireToolUnusableEvent ();
        }
    }
}


public void setEnabled (boolean newIsEnabled) {
    if (isEnabled () != newIsEnabled) {
        myIsEnabled = newIsEnabled;
        if (isEnabled ()) {
            getEventDispatcher ().fireToolEnabledEvent ();
        } else {
            getEventDispatcher ().fireToolDisabledEvent ();
            setUsable (false);
            deactivate ();
        }
    }
}


public boolean isEnabled () {
    return myIsEnabled;
}


protected void setAnchorX (int newAnchorX) {
    myAnchorX = newAnchorX;
}


protected int getAnchorX () {
    return myAnchorX;
}


protected void setAnchorY (int newAnchorY) {
    myAnchorY = newAnchorY;
}


protected int getAnchorY () {
    return myAnchorY;
}


public Undoable getUndoActivity () {
    return myUndoActivity;
}


public void setUndoActivity (Undoable newUndoActivity) {
    myUndoActivity = newUndoActivity;
}


public boolean isActive () {
    return (editor ().tool () == this) && isUsable ();
}


public void addToolListener (ToolListener newToolListener) {
    getEventDispatcher ().addToolListener (newToolListener);
}


public void removeToolListener (ToolListener oldToolListener) {
    getEventDispatcher ().removeToolListener (oldToolListener);
}


private void setEventDispatcher (AbstractTool.EventDispatcher newEventDispatcher) {
    myEventDispatcher = newEventDispatcher;
}


protected AbstractTool.EventDispatcher getEventDispatcher () {
    return myEventDispatcher;
}


public AbstractTool.EventDispatcher createEventDispatcher () {
    return new AbstractTool.EventDispatcher (this);
}


protected void checkUsable () {
    if (isEnabled ()) {
        setUsable ((getActiveView () != null) && getActiveView ().isInteractive ());
    }
}


public EventDispatcher (Tool newObservedTool) {
    myRegisteredListeners = CollectionsFactory.current ().createList ();
    myObservedTool = newObservedTool;
}


public void fireToolUsableEvent () {
    Iterator iter = myRegisteredListeners.iterator ();
    while (iter.hasNext ()) {
        ((ToolListener) iter.next ()).toolUsable (new EventObject (myObservedTool));
    }
}


public void fireToolUnusableEvent () {
    Iterator iter = myRegisteredListeners.iterator ();
    while (iter.hasNext ()) {
        ((ToolListener) iter.next ()).toolUnusable (new EventObject (myObservedTool));
    }
}


public void fireToolActivatedEvent () {
    Iterator iter = myRegisteredListeners.iterator ();
    while (iter.hasNext ()) {
        ((ToolListener) iter.next ()).toolActivated (new EventObject (myObservedTool));
    }
}


public void fireToolDeactivatedEvent () {
    Iterator iter = myRegisteredListeners.iterator ();
    while (iter.hasNext ()) {
        ((ToolListener) iter.next ()).toolDeactivated (new EventObject (myObservedTool));
    }
}


public void fireToolEnabledEvent () {
    Iterator iter = myRegisteredListeners.iterator ();
    while (iter.hasNext ()) {
        ((ToolListener) iter.next ()).toolEnabled (new EventObject (myObservedTool));
    }
}


public void fireToolDisabledEvent () {
    Iterator iter = myRegisteredListeners.iterator ();
    while (iter.hasNext ()) {
        ((ToolListener) iter.next ()).toolDisabled (new EventObject (myObservedTool));
    }
}


public void addToolListener (ToolListener newToolListener) {
    if (! myRegisteredListeners.contains (newToolListener)) {
        myRegisteredListeners.add (newToolListener);
    }
}


----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ConnectionTool.java 223 233
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/ConnectionTool.java 314 324
----------------------------------------

protected ConnectionFigure findConnection (int x, int y, Drawing drawing) {
    FigureEnumeration fe = drawing.figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        figure = figure.findFigureInside (x, y);
        if (figure != null && (figure instanceof ConnectionFigure)) {
            return (ConnectionFigure) figure;
        }
    }
    return null;
}

----------------------------------------

protected Figure findConnectableFigure (int x, int y, Drawing drawing) {
    FigureEnumeration fe = drawing.figuresReverse ();
    while (fe.hasNextFigure ()) {
        Figure figure = fe.nextFigure ();
        if (! figure.includes (getConnection ()) && figure.canConnect () && figure.containsPoint (x, y)) {
            return figure;
        }
    }
    return null;
}

----------------------------------------
$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$
0
0
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/AbstractTool.java 212 223
/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/JHotDraw54b1/src/CH/ifa/draw/standard/AbstractTool.java 225 238
----------------------------------------

public void setUsable (boolean newIsUsable) {
    if (isUsable () != newIsUsable) {
        myIsUsable = newIsUsable;
        if (isUsable ()) {
            getEventDispatcher ().fireToolUsableEvent ();
        } else {
            getEventDispatcher ().fireToolUnusableEvent ();
        }
    }
}

----------------------------------------

public void setEnabled (boolean newIsEnabled) {
    if (isEnabled () != newIsEnabled) {
        myIsEnabled = newIsEnabled;
        if (isEnabled ()) {
            getEventDispatcher ().fireToolEnabledEvent ();
        } else {
            getEventDispatcher ().fireToolDisabledEvent ();
            setUsable (false);
            deactivate ();
        }
    }
}

----------------------------------------


****************************************************
*************Clone Analysis Stats ******************
****************************************************
Total Potential Clones ==> 964
Minimum Line ==> 11
Maximum Line ==> 2500
Threshold ==> 0.5
Clones Found ==> 113
****************************************************
