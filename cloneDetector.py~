
#################################################################################
###################CODE CLONE VALIDATION STARTS##################################
#################################################################################


import pickle
import pybrain
import uuid
import subprocess
import os
import xml.etree.ElementTree as ET



#load the trained Neural Net
fileObject = open('trainedNetwork', 'rb')
loaded_fnn = pickle.load(fileObject)




def execTxl(txlFilePath, sourceCode, lang, saveOutputFile=False):
	#get an unique file name for storing the code temporarily
	fileName = str(uuid.uuid4())
	sourceFile = 'tmp_file_dir/'+fileName+'.txt'

	
	#write submitted source code to corresponding files
	with open(sourceFile,"w") as fo:
		fo.write(sourceCode)

	#get the required txl file for feature extraction
	#txlPath = '/home/ubuntu/Webpage/txl_features/txl_features/java/PrettyPrint.txl'

	#do the feature extraction by txl
	p = subprocess.Popen(['/usr/local/bin/txl', '-Dapply', txlFilePath, sourceFile],  stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	out, err = p.communicate()


	#convert to utf-8 format for easier readibility
	out = str(out)
	err = str(err)

	err = err.replace(sourceFile, 'YOUR_SOURCE_FILE')
	err = err.replace(txlFilePath, 'REQUIRED_TXL_FILE')

	#once done remove the temp file
	os.remove(sourceFile)


	if saveOutputFile==False:
		#print out
		return out, err
	else:
		outputFileLocation = str(uuid.uuid4())
		outputFileLocation = 'tmp_file_dir/'+outputFileLocation+'.txt'
		with open(outputFileLocation,"w") as fo:
			fo.write(out)

		return outputFileLocation, out, err
	








def getCodeCloneSimilarity(sourceCode1, sourceCode2, lang, txlFilePath):
	saveOutputFile=True
	outputFileLocation1, out1, err1 = execTxl(txlFilePath, sourceCode1, lang, saveOutputFile)
	outputFileLocation2, out2, err2 = execTxl(txlFilePath, sourceCode2, lang, saveOutputFile)

	p = subprocess.Popen(['/usr/bin/java', '-jar', 'feature_extractor/calculateCloneSimilarity.jar',outputFileLocation1, outputFileLocation2],  stdout=subprocess.PIPE, stderr=subprocess.PIPE)
	similarityValue, err = p.communicate()

	
	similarityValue = str(similarityValue)
	similarityValue = similarityValue.replace('\n', '')
	err = str(err)

	#once done remove the temp files
	os.remove(outputFileLocation1)
	os.remove(outputFileLocation2)

	#print similarityValue
	
	return similarityValue




def similaritiesNormalizedByLine(sourceCode1, sourceCode2, lang):

	txlFilePath = 'txl_features/java/PrettyPrint.txl'
	type1sim_by_line = getCodeCloneSimilarity(sourceCode1, sourceCode2, lang, txlFilePath)

	txlFilePath = 'txl_features/java/normalizeLiteralsToDefault.txl'
	type2sim_by_line = getCodeCloneSimilarity(sourceCode1, sourceCode2, lang, txlFilePath)

	txlFilePath = 'txl_features/java/normalizeLiteralsToZero.txl'
	type3sim_by_line = getCodeCloneSimilarity(sourceCode1, sourceCode2, lang, txlFilePath)

	

	return type1sim_by_line, type2sim_by_line, type3sim_by_line




def similaritiesNormalizedByToken(sourceCode1, sourceCode2, lang):

	txlFilePath = 'txl_features/java/consistentRenameIdentifiers.txl'
	type1sim_by_token = getCodeCloneSimilarity(sourceCode1, sourceCode2, lang, txlFilePath)

	txlFilePath = 'txl_features/java/normalizeLiteralsToZero.txl'
	type2sim_by_token = getCodeCloneSimilarity(sourceCode1, sourceCode2, lang, txlFilePath)

	txlFilePath = 'txl_features/java/normalizeLiteralsToZero.txl'
	type3sim_by_token = getCodeCloneSimilarity(sourceCode1, sourceCode2, lang, txlFilePath)

	

	return type1sim_by_token, type2sim_by_token, type3sim_by_token
	











def getValidationScore(sourceCode1, sourceCode2, lang):

	type1sim_by_line, type2sim_by_line, type3sim_by_line = similaritiesNormalizedByLine(sourceCode1, sourceCode2, lang)
	type1sim_by_token, type2sim_by_token, type3sim_by_token = similaritiesNormalizedByToken(sourceCode1, sourceCode2, lang)

	network_prediction = loaded_fnn.activate([type1sim_by_line, type2sim_by_line, type3sim_by_line, type1sim_by_token, type2sim_by_token, type3sim_by_token])

	#print 'true_clone_probability_score ==> ', network_prediction[1]
	#print 'false_clone_probability_score ==> ', network_prediction[0]
	
	#return true probability score
	return 	network_prediction[1]










#Clone Detector Calling

sourceCode1 = '''
protected DrawingView createDrawingView () {
    DrawingView createdDrawingView = createDrawingView (createDrawing ());
    createdDrawingView.drawing ().setTitle (getDefaultDrawingTitle ());
    return createdDrawingView;
}
'''

sourceCode2 = '''
public Tool getDefaultTool () {
    if (fDefaultToolButton != null) {
        return fDefaultToolButton.tool ();
    } else {
        return null;
    }
}
'''

lang = 'java'

#getValidationScore(sourceCode1, sourceCode2, lang)
#execTxl('txl_features/java/PrettyPrint.txl', sourceCode1, lang)
#getCodeCloneSimilarity(sourceCode1, sourceCode2, lang, 'txl_features/java/PrettyPrint.txl')
#similaritiesNormalizedByToken(sourceCode1, sourceCode2, lang)
#getValidationScore(sourceCode1, sourceCode2, lang)






###############
### parsing and iterating over the potential clones
###############

tree1 = ET.parse('jHotDraw.xml')
root1 = tree1.getroot()

tree2 = ET.parse('jHotDraw.xml')
root2 = tree2.getroot()



for child1 in root1:
	src1 = child1.text
	for child2 in root2:
		src2 = child2.text
		if child1.attrib != child2.attrib:			
			trueCloneProb = getValidationScore(src1, src2, 'java')
			if trueCloneProb > 0.5:
				print '***************************** CLONE PAIR ***************************'
				print src1
				print ' =========================== '
				print src2	





#################################################################################
####################CODE CLONE VALIDATION ENDS###################################
#################################################################################


