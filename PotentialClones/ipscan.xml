<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="88" endline="90">
public void run () {
    __RockSawShutdown ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="105" endline="107">
TimeVal () {
    seconds = microseconds = 0;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="109" endline="116">
void setInMilliseconds (int milliseconds) {
    seconds = milliseconds / 1000;
    if (seconds > 0) milliseconds -= (seconds * 1000);

    microseconds = milliseconds * 1000;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="118" endline="120">
int getInMilliseconds () {
    return (seconds * 1000 + microseconds / 1000);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="122" endline="124">
boolean isZero () {
    return (seconds == 0 && microseconds == 0);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="139" endline="151">
public RawSocket () {
    __socket = __UNDEFINED;
    __family = __UNDEFINED;
    __stimeout = new TimeVal ();
    __rtimeout = new TimeVal ();
    String os = System.getProperty ("os.name");
    if (os != null && os.startsWith ("SunOS")) setUseSelectTimeout (true);
    else setUseSelectTimeout (false);

}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="158" endline="160">
public boolean isOpen () {
    return (__socket > 0);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="173" endline="177">
private static String __getErrorMessage () {
    StringBuffer buf = new StringBuffer ();
    __getErrorMessage (buf);
    return buf.toString ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="179" endline="181">
private static void __throwIOException () throws IOException {
    throw new IOException (__getErrorMessage ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="183" endline="185">
private static void __throwSocketException () throws SocketException {
    throw new SocketException (__getErrorMessage ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="187" endline="191">
private static void __throwInterruptedIOException () throws InterruptedIOException {
    throw new InterruptedIOException (__getErrorMessage ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="223" endline="236">
public void open (int protocolFamily, int protocol) throws IllegalStateException, IOException {
    if (isOpen ()) throw new IllegalStateException ();

    __socket = __socket (protocolFamily, protocol);
    if (__socket < 0) {
        __socket = __UNDEFINED;
        __throwIOException ();
    }
    __family = protocolFamily;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="245" endline="252">
public void close () throws IOException {
    int result = __close (__socket);
    __socket = __UNDEFINED;
    __family = __UNDEFINED;
    if (result != 0) __throwIOException ();

}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="277" endline="282">
public void setIPHeaderInclude (boolean on) throws SocketException {
    int result = __setIPHeaderInclude (__socket, on);
    if (result < 0) __throwSocketException ();

}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="291" endline="298">
public boolean getIPHeaderInclude () throws SocketException {
    int result = __getIPHeaderInclude (__socket);
    if (result < 0) __throwSocketException ();

    return (result > 0);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="309" endline="314">
public void setSendBufferSize (int size) throws SocketException {
    int result = __setSendBufferSize (__socket, size);
    if (result < 0) __throwSocketException ();

}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="325" endline="332">
public int getSendBufferSize () throws SocketException {
    int result = __getSendBufferSize (__socket);
    if (result < 0) __throwSocketException ();

    return result;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="343" endline="348">
public void setReceiveBufferSize (int size) throws SocketException {
    int result = __setReceiveBufferSize (__socket, size);
    if (result < 0) __throwSocketException ();

}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="359" endline="366">
public int getReceiveBufferSize () throws SocketException {
    int result = __getReceiveBufferSize (__socket);
    if (result < 0) __throwSocketException ();

    return result;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="391" endline="393">
public void setUseSelectTimeout (boolean useSelect) {
    __useSelectTimeout = useSelect;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="406" endline="408">
public boolean getUseSelectTimeout () {
    return __useSelectTimeout;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="420" endline="430">
public void setSendTimeout (int timeout) throws SocketException {
    __stimeout.setInMilliseconds (timeout);
    if (! getUseSelectTimeout ()) {
        int result = __setSendTimeout (__socket, timeout);
        if (result < 0) __throwSocketException ();

    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="441" endline="454">
public int getSendTimeout () throws SocketException {
    int result;
    if (getUseSelectTimeout ()) result = __stimeout.getInMilliseconds ();
    else {
        result = __getSendTimeout (__socket);
        if (result < 0) __throwSocketException ();

    }
    return result;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="466" endline="476">
public void setReceiveTimeout (int timeout) throws SocketException {
    __rtimeout.setInMilliseconds (timeout);
    if (! getUseSelectTimeout ()) {
        int result = __setReceiveTimeout (__socket, timeout);
        if (result < 0) __throwSocketException ();

    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="487" endline="500">
public int getReceiveTimeout () throws SocketException {
    int result;
    if (getUseSelectTimeout ()) result = __rtimeout.getInMilliseconds ();
    else {
        result = __getReceiveTimeout (__socket);
        if (result < 0) __throwSocketException ();

    }
    return result;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="522" endline="552">
public int read (InetAddress address, byte [] data, int offset, int length) throws IllegalArgumentException, IOException, InterruptedIOException {
    if (offset < 0 || length < 0 || length > data.length - offset) throw new IllegalArgumentException ("Invalid offset or length.");

    int result = 0;
    if (getUseSelectTimeout () && ! __rtimeout.isZero ()) result = __select (__socket, true, __rtimeout.seconds, __rtimeout.microseconds);

    if (result == 0) result = __recvfrom (__socket, data, offset, length, __family, address.getAddress ());

    if (result < 0) {
        if (__isErrorEAGAIN ()) __throwInterruptedIOException ();
        else __throwIOException ();

    }
    return result;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="556" endline="560">
public int read (InetAddress address, byte [] data) throws IOException, InterruptedIOException {
    return read (address, data, 0, data.length);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="583" endline="608">
public int write (InetAddress address, byte [] data, int offset, int length) throws IllegalArgumentException, IOException, InterruptedIOException {
    if (offset < 0 || length < 0 || length > data.length - offset) throw new IllegalArgumentException ("Invalid offset or length.");

    int result = 0;
    if (getUseSelectTimeout () && ! __stimeout.isZero ()) result = __select (__socket, false, __stimeout.seconds, __stimeout.microseconds);

    if (result == 0) result = __sendto (__socket, data, offset, length, __family, address.getAddress ());

    if (result < 0) {
        if (__isErrorEAGAIN ()) __throwInterruptedIOException ();
        else __throwIOException ();

    }
    return result;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/rocksaw/src/java/org/savarese/rocksaw/net/RawSocket.java" startline="612" endline="616">
public int write (InetAddress address, byte [] data) throws IOException, InterruptedIOException {
    return write (address, data, 0, data.length);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/win-installer/Installer/DetectJVM.java" startline="8" endline="19">
public static void main (String [] args) {
    boolean print = args.length > 0 && "-print".equals (args [0]);
    for (String key : keys) {
        String property = System.getProperty (key);
        if (print) System.out.println (key + "=" + property);

        if (property != null) {
            int errCode = (property.indexOf ("64") >= 0) ? 64 : 32;
            if (print) System.out.println ("err code=" + errCode);

            System.exit (errCode);
        }
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPPacket.java" startline="65" endline="68">
public ICMPPacket (int size) {
    super (size);
    _offset = 0;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPPacket.java" startline="76" endline="80">
public ICMPPacket (ICMPPacket packet) {
    super (packet.size ());
    copy (packet);
    _offset = packet._offset;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPPacket.java" startline="87" endline="90">
public void setIPHeaderLength (int length) {
    super.setIPHeaderLength (length);
    _offset = getIPHeaderByteLength ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPPacket.java" startline="96" endline="98">
public final int getCombinedHeaderByteLength () {
    return _offset + getICMPHeaderByteLength ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPPacket.java" startline="106" endline="111">
public final void setICMPDataByteLength (int length) {
    if (length < 0) length = 0;

    setIPPacketLength (getCombinedHeaderByteLength () + length);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPPacket.java" startline="117" endline="119">
public final int getICMPDataByteLength () {
    return getIPPacketLength () - getCombinedHeaderByteLength ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPPacket.java" startline="126" endline="128">
public final int getICMPPacketByteLength () {
    return getIPPacketLength () - _offset;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPPacket.java" startline="138" endline="148">
public final void copyData (ICMPPacket packet) {
    if (_data_.length < packet._data_.length) {
        byte [] data = new byte [packet._data_.length];
        System.arraycopy (_data_, 0, data, 0, getCombinedHeaderByteLength ());
        _data_ = data;
    }
    int length = packet.getICMPDataByteLength ();
    System.arraycopy (packet._data_, packet.getCombinedHeaderByteLength (), _data_, getCombinedHeaderByteLength (), length);
    setICMPDataByteLength (length);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPPacket.java" startline="151" endline="154">
public void setData (byte [] data) {
    super.setData (data);
    _offset = getIPHeaderByteLength ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPPacket.java" startline="162" endline="164">
public final void setType (int type) {
    _data_ [_offset + OFFSET_TYPE] = (byte) (type & 0xff);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPPacket.java" startline="170" endline="172">
public final int getType () {
    return (_data_ [_offset + OFFSET_TYPE] & 0xff);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPPacket.java" startline="180" endline="182">
public final void setCode (int code) {
    _data_ [_offset + OFFSET_CODE] = (byte) (code & 0xff);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPPacket.java" startline="188" endline="190">
public final int getCode () {
    return (_data_ [_offset + OFFSET_CODE] & 0xff);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPPacket.java" startline="196" endline="199">
public final int getICMPChecksum () {
    return (((_data_ [_offset + OFFSET_ICMP_CHECKSUM] & 0xff) << 8) | (_data_ [_offset + OFFSET_ICMP_CHECKSUM + 1] & 0xff));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPPacket.java" startline="211" endline="214">
public final int computeICMPChecksum (boolean update) {
    return _computeChecksum_ (_offset, _offset + OFFSET_ICMP_CHECKSUM, getIPPacketLength (), 0, update);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPPacket.java" startline="222" endline="224">
public final int computeICMPChecksum () {
    return computeICMPChecksum (true);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="97" endline="100">
public TCPPacket (int size) {
    super (size);
    __offset = 0;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="108" endline="112">
public TCPPacket (TCPPacket packet) {
    super (packet.size ());
    copy (packet);
    __offset = packet.__offset;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="121" endline="157">
public void clearSACK () {
    int headerLength = getTCPHeaderByteLength ();
    int offset = OFFSET_URG_POINTER + 2;
    if (headerLength > offset) {
        offset += __offset;
        headerLength += __offset;
        loop : do {
            byte kind = _data_ [offset];
            switch (kind) {
                case KIND_NOP :
                    ++ offset;
                    break;
                case KIND_EOL :
                    break loop;
                case KIND_SACK :
                    _data_ [offset] = KIND_NOP;
                    _data_ [offset + 1] = KIND_NOP;
                    break loop;
                default :
                    offset += _data_ [offset + 1];
                    break;
            }
        } while (offset < headerLength);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="167" endline="177">
public final void copyData (TCPPacket packet) {
    if (_data_.length < packet._data_.length) {
        byte [] data = new byte [packet._data_.length];
        System.arraycopy (_data_, 0, data, 0, getCombinedHeaderByteLength ());
        _data_ = data;
    }
    int length = packet.getTCPDataByteLength ();
    System.arraycopy (packet._data_, packet.getCombinedHeaderByteLength (), _data_, getCombinedHeaderByteLength (), length);
    setTCPDataByteLength (length);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="183" endline="185">
public boolean isSet (int mask) {
    return ((_data_ [__offset + OFFSET_CONTROL] & mask) == mask);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="192" endline="194">
public boolean isSetAny (int mask) {
    return ((_data_ [__offset + OFFSET_CONTROL] & mask) != 0);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="202" endline="205">
public boolean isSetOnly (int mask) {
    int flags = _data_ [__offset + OFFSET_CONTROL] & 0xff;
    return ((flags & mask) == flags);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="214" endline="218">
public void addControlFlags (int mask) {
    int flags = _data_ [__offset + OFFSET_CONTROL] & 0xff;
    flags |= mask;
    _data_ [__offset + OFFSET_CONTROL] = (byte) (flags & 0xff);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="226" endline="231">
public void removeControlFlags (int mask) {
    int flags = _data_ [__offset + OFFSET_CONTROL] & 0xff;
    flags |= mask;
    flags ^= mask;
    _data_ [__offset + OFFSET_CONTROL] = (byte) (flags & 0xff);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="239" endline="241">
public void setControlFlags (int mask) {
    _data_ [__offset + OFFSET_CONTROL] = (byte) (mask & 0xff);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="244" endline="247">
public void setData (byte [] data) {
    super.setData (data);
    __offset = getIPHeaderByteLength ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="255" endline="258">
public final void setSourcePort (int port) {
    _data_ [__offset + OFFSET_SOURCE_PORT] = (byte) ((port>> 8) & 0xff);
    _data_ [__offset + OFFSET_SOURCE_PORT + 1] = (byte) (port & 0xff);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="266" endline="269">
public final void setDestinationPort (int port) {
    _data_ [__offset + OFFSET_DESTINATION_PORT] = (byte) ((port>> 8) & 0xff);
    _data_ [__offset + OFFSET_DESTINATION_PORT + 1] = (byte) (port & 0xff);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="275" endline="278">
public final int getSourcePort () {
    return (((_data_ [__offset + OFFSET_SOURCE_PORT] & 0xff) << 8) | (_data_ [__offset + OFFSET_SOURCE_PORT + 1] & 0xff));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="284" endline="287">
public final int getDestinationPort () {
    return (((_data_ [__offset + OFFSET_DESTINATION_PORT] & 0xff) << 8) | (_data_ [__offset + OFFSET_DESTINATION_PORT + 1] & 0xff));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="295" endline="298">
public final void setSequenceNumber (long seq) {
    OctetConverter.intToOctets ((int) (seq & 0xffffffff), _data_, __offset + OFFSET_SEQUENCE);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="304" endline="309">
public final long getSequenceNumber () {
    return (((_data_ [__offset + OFFSET_SEQUENCE] & 0xffL) << 24) | ((_data_ [__offset + OFFSET_SEQUENCE + 1] & 0xffL) << 16) | ((_data_ [__offset + OFFSET_SEQUENCE + 2] & 0xffL) << 8) | (_data_ [__offset + OFFSET_SEQUENCE + 3] & 0xffL));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="317" endline="320">
public final void setAckNumber (long seq) {
    OctetConverter.intToOctets ((int) (seq & 0xffffffff), _data_, __offset + OFFSET_ACK);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="326" endline="331">
public final long getAckNumber () {
    return (((_data_ [__offset + OFFSET_ACK] & 0xffL) << 24) | ((_data_ [__offset + OFFSET_ACK + 1] & 0xffL) << 16) | ((_data_ [__offset + OFFSET_ACK + 2] & 0xffL) << 8) | (_data_ [__offset + OFFSET_ACK + 3] & 0xffL));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="334" endline="337">
public void setIPHeaderLength (int length) {
    super.setIPHeaderLength (length);
    __offset = getIPHeaderByteLength ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="345" endline="348">
public final void setTCPHeaderLength (int length) {
    _data_ [__offset + OFFSET_HEADER_LENGTH] &= 0x0f;
    _data_ [__offset + OFFSET_HEADER_LENGTH] |= ((length << 4) & 0xf0);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="354" endline="356">
public final int getTCPHeaderLength () {
    return (_data_ [__offset + OFFSET_HEADER_LENGTH] & 0xf0)>> 4;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="362" endline="364">
public final int getTCPHeaderByteLength () {
    return getTCPHeaderLength () << 2;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="372" endline="375">
public final void setWindowSize (int window) {
    _data_ [__offset + OFFSET_WINDOW_SIZE] = (byte) ((window>> 8) & 0xff);
    _data_ [__offset + OFFSET_WINDOW_SIZE + 1] = (byte) (window & 0xff);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="381" endline="384">
public final int getWindowSize () {
    return (((_data_ [__offset + OFFSET_WINDOW_SIZE] & 0xff) << 8) | (_data_ [__offset + OFFSET_WINDOW_SIZE + 1] & 0xff));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="392" endline="395">
public final void setUrgentPointer (int pointer) {
    _data_ [__offset + OFFSET_URG_POINTER] = (byte) ((pointer>> 8) & 0xff);
    _data_ [__offset + OFFSET_URG_POINTER + 1] = (byte) (pointer & 0xff);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="401" endline="404">
public final int getUrgentPointer () {
    return (((_data_ [__offset + OFFSET_URG_POINTER] & 0xff) << 8) | (_data_ [__offset + OFFSET_URG_POINTER + 1] & 0xff));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="410" endline="413">
public final int getTCPChecksum () {
    return (((_data_ [__offset + OFFSET_TCP_CHECKSUM] & 0xff) << 8) | (_data_ [__offset + OFFSET_TCP_CHECKSUM + 1] & 0xff));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="420" endline="422">
public final int getTCPPacketByteLength () {
    return getIPPacketLength () - __offset;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="428" endline="430">
public final int getCombinedHeaderByteLength () {
    return __offset + getTCPHeaderByteLength ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="438" endline="443">
public final void setTCPDataByteLength (int length) {
    if (length < 0) length = 0;

    setIPPacketLength (getCombinedHeaderByteLength () + length);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="446" endline="448">
public final int getTCPDataByteLength () {
    return getIPPacketLength () - getCombinedHeaderByteLength ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="451" endline="465">
private final int __getVirtualHeaderTotal () {
    int s1 = ((_data_ [OFFSET_SOURCE_ADDRESS] & 0xff) << 8) | (_data_ [OFFSET_SOURCE_ADDRESS + 1] & 0xff);
    int s2 = ((_data_ [OFFSET_SOURCE_ADDRESS + 2] & 0xff) << 8) | (_data_ [OFFSET_SOURCE_ADDRESS + 3] & 0xff);
    int d1 = ((_data_ [OFFSET_DESTINATION_ADDRESS] & 0xff) << 8) | (_data_ [OFFSET_DESTINATION_ADDRESS + 1] & 0xff);
    int d2 = ((_data_ [OFFSET_DESTINATION_ADDRESS + 2] & 0xff) << 8) | (_data_ [OFFSET_DESTINATION_ADDRESS + 3] & 0xff);
    return s1 + s2 + d1 + d2 + getProtocol () + getTCPPacketByteLength ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="477" endline="481">
public final int computeTCPChecksum (boolean update) {
    return _computeChecksum_ (__offset, __offset + OFFSET_TCP_CHECKSUM, getIPPacketLength (), __getVirtualHeaderTotal (), update);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/TCPPacket.java" startline="489" endline="491">
public final int computeTCPChecksum () {
    return computeTCPChecksum (true);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPEchoPacket.java" startline="43" endline="45">
public ICMPEchoPacket (int size) {
    super (size);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPEchoPacket.java" startline="53" endline="55">
public ICMPEchoPacket (ICMPEchoPacket packet) {
    super (packet);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPEchoPacket.java" startline="58" endline="60">
public int getICMPHeaderByteLength () {
    return 8;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPEchoPacket.java" startline="68" endline="71">
public final void setIdentifier (int id) {
    _data_ [_offset + OFFSET_IDENTIFIER] = (byte) ((id>> 8) & 0xff);
    _data_ [_offset + OFFSET_IDENTIFIER + 1] = (byte) (id & 0xff);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPEchoPacket.java" startline="77" endline="80">
public final int getIdentifier () {
    return (((_data_ [_offset + OFFSET_IDENTIFIER] & 0xff) << 8) | (_data_ [_offset + OFFSET_IDENTIFIER + 1] & 0xff));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPEchoPacket.java" startline="88" endline="91">
public final void setSequenceNumber (int seq) {
    _data_ [_offset + OFFSET_SEQUENCE] = (byte) ((seq>> 8) & 0xff);
    _data_ [_offset + OFFSET_SEQUENCE + 1] = (byte) (seq & 0xff);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/ICMPEchoPacket.java" startline="97" endline="100">
public final int getSequenceNumber () {
    return (((_data_ [_offset + OFFSET_SEQUENCE] & 0xff) << 8) | (_data_ [_offset + OFFSET_SEQUENCE + 1] & 0xff));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/OctetConverter.java" startline="31" endline="31">
private OctetConverter () {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/OctetConverter.java" startline="40" endline="45">
public static final int octetsToInt (byte [] octets, int offset) {
    return (((octets [offset] & 0xff) << 24) | ((octets [offset + 1] & 0xff) << 16) | ((octets [offset + 2] & 0xff) << 8) | (octets [offset + 3] & 0xff));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/OctetConverter.java" startline="51" endline="53">
public static final int octetsToInt (byte [] octets) {
    return octetsToInt (octets, 0);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/OctetConverter.java" startline="63" endline="72">
public static final long octetsToLong (byte [] octets, int offset) {
    return (((octets [offset] & 0xffffL) << 56) | ((octets [offset + 1] & 0xffL) << 48) | ((octets [offset + 2] & 0xffL) << 40) | ((octets [offset + 3] & 0xffL) << 32) | ((octets [offset + 4] & 0xffL) << 24) | ((octets [offset + 5] & 0xffL) << 16) | ((octets [offset + 6] & 0xffL) << 8) | (octets [offset + 7] & 0xffL));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/OctetConverter.java" startline="78" endline="80">
public static final long octetsToLong (byte [] octets) {
    return octetsToLong (octets, 0);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/OctetConverter.java" startline="90" endline="100">
public static final void octetsToString (StringBuffer buffer, byte [] octets, int offset) {
    buffer.append (octets [offset ++] & 0xff);
    buffer.append (".");
    buffer.append (octets [offset ++] & 0xff);
    buffer.append (".");
    buffer.append (octets [offset ++] & 0xff);
    buffer.append (".");
    buffer.append (octets [offset ++] & 0xff);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/OctetConverter.java" startline="106" endline="108">
public static final void octetsToString (StringBuffer buffer, byte [] octets) {
    octetsToString (buffer, octets, 0);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/OctetConverter.java" startline="118" endline="126">
public static final void intToString (StringBuffer buffer, int address) {
    buffer.append (0xff & (address>>> 24));
    buffer.append (".");
    buffer.append (0xff & (address>>> 16));
    buffer.append (".");
    buffer.append (0xff & (address>>> 8));
    buffer.append (".");
    buffer.append (0xff & address);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/OctetConverter.java" startline="137" endline="144">
public static final void intToOctets (int address, byte [] octets, int offset) {
    octets [offset] = (byte) (0xff & (address>>> 24));
    octets [offset + 1] = (byte) (0xff & (address>>> 16));
    octets [offset + 2] = (byte) (0xff & (address>>> 8));
    octets [offset + 3] = (byte) (0xff & address);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/OctetConverter.java" startline="150" endline="152">
public static final void intToOctets (int address, byte [] octets) {
    intToOctets (address, octets, 0);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/OctetConverter.java" startline="162" endline="173">
public static final void longToOctets (long address, byte [] octets, int offset) {
    octets [offset] = (byte) (0xffL & (address>>> 56));
    octets [offset + 1] = (byte) (0xffL & (address>>> 48));
    octets [offset + 2] = (byte) (0xffL & (address>>> 40));
    octets [offset + 3] = (byte) (0xffL & (address>>> 32));
    octets [offset + 4] = (byte) (0xffL & (address>>> 24));
    octets [offset + 5] = (byte) (0xffL & (address>>> 16));
    octets [offset + 6] = (byte) (0xffL & (address>>> 8));
    octets [offset + 7] = (byte) (0xffL & address);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/OctetConverter.java" startline="179" endline="181">
public static final void longToOctets (long address, byte [] octets) {
    longToOctets (address, octets, 0);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/UDPPacket.java" startline="55" endline="58">
public UDPPacket (int size) {
    super (size);
    __offset = 0;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/UDPPacket.java" startline="66" endline="70">
public UDPPacket (UDPPacket packet) {
    super (packet.size ());
    copy (packet);
    __offset = packet.__offset;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/UDPPacket.java" startline="80" endline="90">
public final void copyData (UDPPacket packet) {
    if (_data_.length < packet._data_.length) {
        byte [] data = new byte [packet._data_.length];
        System.arraycopy (_data_, 0, data, 0, getCombinedHeaderByteLength ());
        _data_ = data;
    }
    int length = packet.getUDPDataByteLength ();
    System.arraycopy (packet._data_, packet.getCombinedHeaderByteLength (), _data_, getCombinedHeaderByteLength (), length);
    setUDPDataByteLength (length);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/UDPPacket.java" startline="93" endline="96">
public void setData (byte [] data) {
    super.setData (data);
    __offset = getIPHeaderByteLength ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/UDPPacket.java" startline="104" endline="107">
public final void setSourcePort (int port) {
    _data_ [__offset + OFFSET_SOURCE_PORT] = (byte) ((port>> 8) & 0xff);
    _data_ [__offset + OFFSET_SOURCE_PORT + 1] = (byte) (port & 0xff);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/UDPPacket.java" startline="115" endline="118">
public final void setDestinationPort (int port) {
    _data_ [__offset + OFFSET_DESTINATION_PORT] = (byte) ((port>> 8) & 0xff);
    _data_ [__offset + OFFSET_DESTINATION_PORT + 1] = (byte) (port & 0xff);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/UDPPacket.java" startline="124" endline="127">
public final int getSourcePort () {
    return (((_data_ [__offset + OFFSET_SOURCE_PORT] & 0xff) << 8) | (_data_ [__offset + OFFSET_SOURCE_PORT + 1] & 0xff));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/UDPPacket.java" startline="133" endline="136">
public final int getDestinationPort () {
    return (((_data_ [__offset + OFFSET_DESTINATION_PORT] & 0xff) << 8) | (_data_ [__offset + OFFSET_DESTINATION_PORT + 1] & 0xff));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/UDPPacket.java" startline="139" endline="142">
public void setIPHeaderLength (int length) {
    super.setIPHeaderLength (length);
    __offset = getIPHeaderByteLength ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/UDPPacket.java" startline="150" endline="153">
public void setUDPPacketLength (int length) {
    _data_ [__offset + OFFSET_UDP_TOTAL_LENGTH] = (byte) ((length>> 8) & 0xff);
    _data_ [__offset + OFFSET_UDP_TOTAL_LENGTH + 1] = (byte) (length & 0xff);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/UDPPacket.java" startline="159" endline="162">
public final int getUDPPacketLength () {
    return (((_data_ [__offset + OFFSET_UDP_TOTAL_LENGTH] & 0xff) << 8) | (_data_ [__offset + OFFSET_UDP_TOTAL_LENGTH + 1] & 0xff));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/UDPPacket.java" startline="168" endline="171">
public final int getUDPChecksum () {
    return (((_data_ [__offset + OFFSET_UDP_CHECKSUM] & 0xff) << 8) | (_data_ [__offset + OFFSET_UDP_CHECKSUM + 1] & 0xff));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/UDPPacket.java" startline="180" endline="182">
public final int getUDPPacketByteLength () {
    return getIPPacketLength () - __offset;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/UDPPacket.java" startline="188" endline="190">
public final int getCombinedHeaderByteLength () {
    return __offset + LENGTH_UDP_HEADER;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/UDPPacket.java" startline="198" endline="203">
public final void setUDPDataByteLength (int length) {
    if (length < 0) length = 0;

    setIPPacketLength (getCombinedHeaderByteLength () + length);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/UDPPacket.java" startline="206" endline="208">
public final int getUDPDataByteLength () {
    return getIPPacketLength () - getCombinedHeaderByteLength ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/UDPPacket.java" startline="211" endline="225">
private final int __getVirtualHeaderTotal () {
    int s1 = ((_data_ [OFFSET_SOURCE_ADDRESS] & 0xff) << 8) | (_data_ [OFFSET_SOURCE_ADDRESS + 1] & 0xff);
    int s2 = ((_data_ [OFFSET_SOURCE_ADDRESS + 2] & 0xff) << 8) | (_data_ [OFFSET_SOURCE_ADDRESS + 3] & 0xff);
    int d1 = ((_data_ [OFFSET_DESTINATION_ADDRESS] & 0xff) << 8) | (_data_ [OFFSET_DESTINATION_ADDRESS + 1] & 0xff);
    int d2 = ((_data_ [OFFSET_DESTINATION_ADDRESS + 2] & 0xff) << 8) | (_data_ [OFFSET_DESTINATION_ADDRESS + 3] & 0xff);
    return s1 + s2 + d1 + d2 + getProtocol () + getUDPPacketByteLength ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/UDPPacket.java" startline="237" endline="241">
public final int computeUDPChecksum (boolean update) {
    return _computeChecksum_ (__offset, __offset + OFFSET_UDP_CHECKSUM, getIPPacketLength (), __getVirtualHeaderTotal (), update);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/UDPPacket.java" startline="249" endline="251">
public final int computeUDPChecksum () {
    return computeUDPChecksum (true);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="91" endline="93">
public IPPacket (int size) {
    setData (new byte [size]);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="99" endline="101">
public int size () {
    return _data_.length;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="114" endline="116">
public void setData (byte [] data) {
    _data_ = data;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="125" endline="127">
public void getData (byte [] data) {
    System.arraycopy (_data_, 0, data, 0, data.length);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="137" endline="141">
public final void copy (IPPacket packet) {
    if (_data_.length != packet.size ()) setData (new byte [packet.size ()]);

    System.arraycopy (packet._data_, 0, _data_, 0, _data_.length);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="149" endline="152">
public final void setIPVersion (int version) {
    _data_ [0] &= 0x0f;
    _data_ [0] |= ((version << 4) & 0xf0);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="160" endline="162">
public final int getIPVersion () {
    return ((_data_ [0] & 0xf0)>> 4);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="172" endline="176">
public void setIPHeaderLength (int length) {
    _data_ [0] &= 0xf0;
    _data_ [0] |= (length & 0x0f);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="182" endline="184">
public final int getIPHeaderLength () {
    return (_data_ [0] & 0x0f);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="190" endline="192">
public final int getIPHeaderByteLength () {
    return getIPHeaderLength () << 2;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="202" endline="204">
public final void setTypeOfService (int service) {
    _data_ [OFFSET_TYPE_OF_SERVICE] = (byte) (service & 0xff);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="212" endline="214">
public final int getTypeOfService () {
    return (_data_ [OFFSET_TYPE_OF_SERVICE] & 0xff);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="222" endline="225">
public final void setIPPacketLength (int length) {
    _data_ [OFFSET_TOTAL_LENGTH] = (byte) ((length>> 8) & 0xff);
    _data_ [OFFSET_TOTAL_LENGTH + 1] = (byte) (length & 0xff);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="231" endline="234">
public final int getIPPacketLength () {
    return (((_data_ [OFFSET_TOTAL_LENGTH] & 0xff) << 8) | (_data_ [OFFSET_TOTAL_LENGTH + 1] & 0xff));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="242" endline="245">
public void setIdentification (int id) {
    _data_ [OFFSET_IDENTIFICATION] = (byte) ((id>> 8) & 0xff);
    _data_ [OFFSET_IDENTIFICATION + 1] = (byte) (id & 0xff);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="253" endline="256">
public final int getIdentification () {
    return (((_data_ [OFFSET_IDENTIFICATION] & 0xff) << 8) | (_data_ [OFFSET_IDENTIFICATION + 1] & 0xff));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="266" endline="269">
public final void setIPFlags (int flags) {
    _data_ [OFFSET_FLAGS] &= 0x1f;
    _data_ [OFFSET_FLAGS] |= ((flags << 5) & 0xe0);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="277" endline="279">
public final int getIPFlags () {
    return ((_data_ [OFFSET_FLAGS] & 0xe0)>> 5);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="288" endline="292">
public void setFragmentOffset (int offset) {
    _data_ [OFFSET_FLAGS] &= 0xe0;
    _data_ [OFFSET_FLAGS] |= ((offset>> 8) & 0x1f);
    _data_ [OFFSET_FLAGS + 1] = (byte) (offset & 0xff);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="300" endline="303">
public final int getFragmentOffset () {
    return (((_data_ [OFFSET_FLAGS] & 0x1f) << 8) | (_data_ [OFFSET_FLAGS + 1] & 0xff));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="311" endline="313">
public final void setProtocol (int protocol) {
    _data_ [OFFSET_PROTOCOL] = (byte) protocol;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="319" endline="321">
public final int getProtocol () {
    return _data_ [OFFSET_PROTOCOL];
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="329" endline="331">
public final void setTTL (int ttl) {
    _data_ [OFFSET_TTL] = (byte) ttl;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="337" endline="339">
public final int getTTL () {
    return _data_ [OFFSET_TTL];
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="347" endline="385">
protected int _computeChecksum_ (int startOffset, int checksumOffset, int length, int virtualHeaderTotal, boolean update) {
    int total = 0;
    int i = startOffset;
    int imax = checksumOffset;
    while (i < imax) total += (((_data_ [i ++] & 0xff) << 8) | (_data_ [i ++] & 0xff));

    i = checksumOffset + 2;
    imax = length - (length % 2);
    while (i < imax) total += (((_data_ [i ++] & 0xff) << 8) | (_data_ [i ++] & 0xff));

    if (i < length) total += ((_data_ [i] & 0xff) << 8);

    total += virtualHeaderTotal;
    while ((total & 0xffff0000) != 0) total = (total & 0xffff) + (total>>> 16);

    total = (~ total & 0xffff);
    if (update) {
        _data_ [checksumOffset] = (byte) (total>> 8);
        _data_ [checksumOffset + 1] = (byte) (total & 0xff);
    }
    return total;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="397" endline="400">
public final int computeIPChecksum (boolean update) {
    return _computeChecksum_ (0, OFFSET_IP_CHECKSUM, getIPHeaderByteLength (), 0, update);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="408" endline="410">
public final int computeIPChecksum () {
    return computeIPChecksum (true);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="416" endline="419">
public final int getIPChecksum () {
    return (((_data_ [OFFSET_IP_CHECKSUM] & 0xff) << 8) | (_data_ [OFFSET_IP_CHECKSUM + 1] & 0xff));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="428" endline="432">
public final void getSource (byte [] address) {
    System.arraycopy (_data_, OFFSET_SOURCE_ADDRESS, address, 0, (address.length < LENGTH_SOURCE_ADDRESS ? address.length : LENGTH_SOURCE_ADDRESS));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="441" endline="445">
public final void getDestination (byte [] address) {
    System.arraycopy (_data_, OFFSET_DESTINATION_ADDRESS, address, 0, (address.length < LENGTH_DESTINATION_ADDRESS ? address.length : LENGTH_DESTINATION_ADDRESS));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="453" endline="455">
public final void getSource (StringBuffer buffer) {
    OctetConverter.octetsToString (buffer, _data_, OFFSET_SOURCE_ADDRESS);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="463" endline="465">
public final void getDestination (StringBuffer buffer) {
    OctetConverter.octetsToString (buffer, _data_, OFFSET_DESTINATION_ADDRESS);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="473" endline="475">
public final void setSourceAsWord (int src) {
    OctetConverter.intToOctets (src, _data_, OFFSET_SOURCE_ADDRESS);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="483" endline="485">
public final void setDestinationAsWord (int dest) {
    OctetConverter.intToOctets (dest, _data_, OFFSET_DESTINATION_ADDRESS);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="491" endline="493">
public final int getSourceAsWord () {
    return OctetConverter.octetsToInt (_data_, OFFSET_SOURCE_ADDRESS);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="499" endline="501">
public final int getDestinationAsWord () {
    return OctetConverter.octetsToInt (_data_, OFFSET_DESTINATION_ADDRESS);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="507" endline="513">
public final InetAddress getSourceAsInetAddress () throws UnknownHostException {
    byte [] octets = new byte [4];
    getSource (octets);
    return InetAddress.getByAddress (octets);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/ext/vserv-tcpip/src/java/org/savarese/vserv/tcpip/IPPacket.java" startline="520" endline="526">
public final InetAddress getDestinationAsInetAddress () throws UnknownHostException {
    byte [] octets = new byte [4];
    getDestination (octets);
    return InetAddress.getByAddress (octets);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/util/IOUtils.java" startline="11" endline="17">
public static void closeQuietly (Socket socket) {
    if (socket != null) try {
        socket.close ();
    } catch (IOException ignore) {
    }

}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/util/IOUtils.java" startline="19" endline="21">
public static void closeQuietly (DatagramSocket socket) {
    if (socket != null) socket.close ();

}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/util/IOUtils.java" startline="23" endline="29">
public static void closeQuietly (RawSocket socket) {
    if (socket != null) try {
        socket.close ();
    } catch (IOException ignore) {
    }

}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/util/IOUtils.java" startline="31" endline="37">
public static void closeQuietly (Closeable closeable) {
    if (closeable != null) try {
        closeable.close ();
    } catch (IOException ignore) {
    }

}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/util/GoogleAnalytics.java" startline="20" endline="22">
public void report (String screen) {
    report ("screenview", screen);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/util/GoogleAnalytics.java" startline="24" endline="48">
public void report (String type, String content) {
    try {
        Config config = Config.getConfig ();
        URL url = new URL ("https://www.google-analytics.com/collect");
        HttpURLConnection conn = (HttpURLConnection) url.openConnection ();
        conn.setRequestMethod ("POST");
        conn.setRequestProperty ("Content-Type", "application/x-www-form-urlencoded; charset=UTF-8");
        conn.setDoOutput (true);
        OutputStream os = conn.getOutputStream ();
        String contentParam = "exception".equals (type) ? "exd" : "cd";
        String payload = "v=1&t=" + type + "&tid=" + Version.GA_ID + "&cid=" + config.getUUID () + "&an=ipscan&av=" + Version.getVersion () + "&" + contentParam + "=" + URLEncoder.encode (content, "UTF-8") + "&ul=" + config.getLocale () + "&vp=" + config.forGUI ().mainWindowSize.x + "x" + config.forGUI ().mainWindowSize.y + "&cd1=" + URLEncoder.encode (System.getProperty ("os.name") + " " + System.getProperty ("os.version") + " " + System.getProperty ("os.arch"), "UTF-8") + "&cd2=" + URLEncoder.encode ("Java " + System.getProperty ("java.version"), "UTF-8");
        os.write (payload.getBytes ());
        os.close ();
        conn.getContent ();
        conn.disconnect ();
    } catch (IOException e) {
        Logger.getLogger (getClass ().getName ()).log (WARNING, "Failed to report", e);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/util/GoogleAnalytics.java" startline="50" endline="52">
public void report (Throwable e) {
    report ("exception", extractFirstStackFrame (e));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/util/GoogleAnalytics.java" startline="54" endline="58">
static String extractFirstStackFrame (Throwable e) {
    StackTraceElement [] stackTrace = e.getStackTrace ();
    return e.toString () + (stackTrace.length == 0 ? "" : "\n" + stackTrace [0].getClassName () + "." + stackTrace [0].getMethodName () + ":" + stackTrace [0].getLineNumber ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/util/GoogleAnalytics.java" startline="60" endline="66">
public void asyncReport (final String screen) {
    new Thread () {
        @Override
        public void run () {
            report (screen);
        }}

    .start ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/util/GoogleAnalytics.java" startline="62" endline="64">
public void run () {
    report (screen);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/util/ThreadResourceBinder.java" startline="14" endline="17">
public T bind (T resource) {
    resources.put (Thread.currentThread ().getId (), resource);
    return resource;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/util/ThreadResourceBinder.java" startline="19" endline="22">
public void close () {
    for (T resource : resources.values ()) close (resource);

    resources.clear ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/util/ThreadResourceBinder.java" startline="24" endline="28">
private void close (T resource) {
    if (resource instanceof DatagramSocket) closeQuietly ((DatagramSocket) resource);
    else if (resource instanceof Socket) closeQuietly ((Socket) resource);
    else if (resource instanceof Closeable) closeQuietly ((Closeable) resource);

}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/util/ThreadResourceBinder.java" startline="30" endline="33">
public void closeAndUnbind (T resource) {
    close (resource);
    resources.remove (Thread.currentThread ().getId ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/util/InetAddressUtils.java" startline="33" endline="46">
public static InetAddress startRangeByNetmask (InetAddress address, InetAddress netmask) {
    byte [] netmaskBytes = netmask.getAddress ();
    byte [] addressBytes = address.getAddress ();
    for (int i = 0;
    i < addressBytes.length; i ++) {
        addressBytes [i] = (byte) (addressBytes [i] & netmaskBytes [i]);
    }
    try {
        return InetAddress.getByAddress (addressBytes);
    } catch (UnknownHostException e) {
        throw new IllegalArgumentException (e);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/util/InetAddressUtils.java" startline="48" endline="60">
public static InetAddress endRangeByNetmask (InetAddress address, InetAddress netmask) {
    byte [] netmaskBytes = netmask.getAddress ();
    byte [] addressBytes = address.getAddress ();
    for (int i = 0;
    i < addressBytes.length; i ++) {
        addressBytes [i] = (byte) (addressBytes [i] | ~ (netmaskBytes [i]));
    }
    try {
        return InetAddress.getByAddress (addressBytes);
    } catch (UnknownHostException e) {
        throw new IllegalArgumentException (e);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/util/InetAddressUtils.java" startline="66" endline="77">
public static boolean greaterThan (InetAddress inetAddress1, InetAddress inetAddress2) {
    byte [] address1 = inetAddress1.getAddress ();
    byte [] address2 = inetAddress2.getAddress ();
    for (int i = 0;
    i < address1.length; i ++) {
        if ((address1 [i] & 0xFF) > (address2 [i] & 0xFF)) return true;
        else if ((address1 [i] & 0xFF) < (address2 [i] & 0xFF)) break;

    }
    return false;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/util/InetAddressUtils.java" startline="82" endline="84">
public static InetAddress increment (InetAddress address) {
    return modifyInetAddress (address, true);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/util/InetAddressUtils.java" startline="89" endline="91">
public static InetAddress decrement (InetAddress address) {
    return modifyInetAddress (address, false);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/util/InetAddressUtils.java" startline="101" endline="124">
private static InetAddress modifyInetAddress (InetAddress address, boolean isIncrement) {
    try {
        byte [] newAddress = address.getAddress ();
        for (int i = newAddress.length - 1;
        i >= 0; i --) {
            if (isIncrement) {
                if (++ newAddress [i] != 0x00) {
                    break;
                }
            } else {
                if (-- newAddress [i] != 0x00) {
                    break;
                }
            }
        }
        return InetAddress.getByAddress (newAddress);
    } catch (UnknownHostException e) {
        assert false : e;
        return null;
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/util/InetAddressUtils.java" startline="136" endline="154">
public static InetAddress parseNetmask (String netmaskString) throws UnknownHostException {
    if (netmaskString.startsWith ("/")) {
        int totalBits = Integer.parseInt (netmaskString.substring (1));
        byte [] mask = new byte [4];
        for (int i = 0;
        i < mask.length; i ++) {
            int curByteBits = totalBits >= 8 ? 8 : totalBits;
            totalBits -= curByteBits;
            mask [i] = (byte) ((((1 << curByteBits) - 1) << (8 - curByteBits)) & 0xFF);
        }
        return InetAddress.getByAddress (mask);
    }
    netmaskString = netmaskString.replaceAll ("\\.\\.", ".255.");
    netmaskString = netmaskString.replaceAll ("\\.\\.", ".255.");
    return InetAddress.getByName (netmaskString);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/util/InetAddressUtils.java" startline="163" endline="167">
public static void maskPrototypeAddressBytes (byte [] addressBytes, byte [] maskBytes, byte [] prototypeBytes) {
    for (int i = 0;
    i < addressBytes.length; i ++) {
        addressBytes [i] = (byte) ((addressBytes [i] & ~ maskBytes [i]) | (prototypeBytes [i] & maskBytes [i]));
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/util/InetAddressUtils.java" startline="173" endline="176">
public static boolean isLikelyBroadcast (InetAddress address) {
    byte [] bytes = address.getAddress ();
    return bytes [bytes.length - 1] == 0 || bytes [bytes.length - 1] == (byte) 0xFF;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/util/InetAddressUtils.java" startline="178" endline="195">
public static InterfaceAddress getLocalInterface () {
    InterfaceAddress anyAddress = null;
    try {
        for (Enumeration < NetworkInterface > i = getNetworkInterfaces ();
        i.hasMoreElements ();) {
            NetworkInterface networkInterface = i.nextElement ();
            for (InterfaceAddress ifAddr : networkInterface.getInterfaceAddresses ()) {
                anyAddress = ifAddr;
                InetAddress addr = ifAddr.getAddress ();
                if (! addr.isLoopbackAddress () && addr instanceof Inet4Address) return ifAddr;

            }
        }
    } catch (SocketException e) {
        LOG.log (Level.FINE, "Cannot enumerate network interfaces", e);
    }
    return anyAddress;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/util/SequenceIterator.java" startline="20" endline="26">
public SequenceIterator (Iterator < E >...iterators) {
    this.iterators = iterators;
    if (! iterators [iterators.length - 1].hasNext ()) throw new IllegalArgumentException ();

}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/util/SequenceIterator.java" startline="28" endline="31">
public boolean hasNext () {
    return iterators [iterators.length - 1].hasNext ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/util/SequenceIterator.java" startline="33" endline="39">
public E next () {
    if (! iterators [currentIndex].hasNext ()) currentIndex ++;

    return iterators [currentIndex].next ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/util/SequenceIterator.java" startline="41" endline="43">
public void remove () {
    iterators [currentIndex].remove ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/util/NetBIOSResolver.java" startline="24" endline="26">
public NetBIOSResolver (int timeout) throws SocketException {
    socket.setSoTimeout (timeout);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/util/NetBIOSResolver.java" startline="28" endline="45">
public String [] resolve (InetAddress ip) throws IOException {
    socket.send (new DatagramPacket (REQUEST_DATA, REQUEST_DATA.length, ip, NETBIOS_UDP_PORT));
    byte [] response = new byte [1024];
    DatagramPacket responsePacket = new DatagramPacket (response, response.length);
    socket.receive (responsePacket);
    if (responsePacket.getLength () < RESPONSE_BASE_LEN) {
        return null;
    }
    int nameCount = response [RESPONSE_BASE_LEN - 1] & 0xFF;
    if (responsePacket.getLength () < RESPONSE_BASE_LEN + RESPONSE_NAME_BLOCK_LEN * (nameCount - 1)) {
        return null;
    }
    return extractNames (response, nameCount);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/util/NetBIOSResolver.java" startline="47" endline="72">
static String [] extractNames (byte [] response, int nameCount) {
    String computerName = name (response, 0);
    String groupName = null;
    for (int i = 1;
    i < nameCount; i ++) {
        if (nameType (response, i) == NAME_TYPE_DOMAIN && (nameFlag (response, i) & GROUP_NAME_FLAG) > 0) {
            groupName = name (response, i);
            break;
        }
    }
    String userName = null;
    for (int i = nameCount - 1;
    i > 0; i --) {
        if (nameType (response, i) == NAME_TYPE_MESSENGER) {
            userName = name (response, i);
            break;
        }
    }
    String macAddress = String.format ("%02X-%02X-%02X-%02X-%02X-%02X", nameByte (response, nameCount, 0), nameByte (response, nameCount, 1), nameByte (response, nameCount, 2), nameByte (response, nameCount, 3), nameByte (response, nameCount, 4), nameByte (response, nameCount, 5));
    return new String [] {computerName, userName, groupName, macAddress};
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/util/NetBIOSResolver.java" startline="74" endline="78">
private static String name (byte [] response, int i) {
    return new String (response, RESPONSE_BASE_LEN + RESPONSE_NAME_BLOCK_LEN * i, RESPONSE_NAME_LEN).trim ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/util/NetBIOSResolver.java" startline="80" endline="82">
private static int nameByte (byte [] response, int i, int n) {
    return response [RESPONSE_BASE_LEN + RESPONSE_NAME_BLOCK_LEN * i + n] & 0xFF;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/util/NetBIOSResolver.java" startline="84" endline="87">
private static int nameFlag (byte [] response, int i) {
    return response [RESPONSE_BASE_LEN + RESPONSE_NAME_BLOCK_LEN * i + RESPONSE_NAME_LEN + 1] & 0xFF + (response [RESPONSE_BASE_LEN + RESPONSE_NAME_BLOCK_LEN * i + RESPONSE_NAME_LEN + 2] & 0xFF) * 0xFF;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/util/NetBIOSResolver.java" startline="89" endline="91">
private static int nameType (byte [] response, int i) {
    return response [RESPONSE_BASE_LEN + RESPONSE_NAME_BLOCK_LEN * i + RESPONSE_NAME_LEN] & 0xFF;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/util/NetBIOSResolver.java" startline="93" endline="95">
public void close () {
    socket.close ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/util/MDNSResolver.java" startline="16" endline="21">
public MDNSResolver (int timeout) throws IOException {
    socket.setSoTimeout (timeout);
    socket.setTimeToLive (1);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/util/MDNSResolver.java" startline="23" endline="33">
void writeName (DataOutputStream out, String name) throws IOException {
    int s = 0, e;
    while ((e = name.indexOf ('.', s)) != - 1) {
        out.writeByte (e - s);
        out.write (name.substring (s, e).getBytes ());
        s = e + 1;
    }
    out.write (name.length () - s);
    out.write (name.substring (s).getBytes ());
    out.writeByte (0);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/util/MDNSResolver.java" startline="35" endline="45">
String decodeName (byte [] data, int offset, int length) {
    StringBuilder s = new StringBuilder (length);
    for (int i = offset;
    i < offset + length; i ++) {
        byte len = data [i];
        if (len == 0) break;

        s.append (new String (data, i + 1, len)).append ('.');
        i += len;
    }
    s.setLength (s.length () - 1);
    return s.toString ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/util/MDNSResolver.java" startline="47" endline="55">
byte [] dnsRequest (int id, String name) throws IOException {
    ByteArrayOutputStream baos = new ByteArrayOutputStream ();
    DataOutputStream out = new DataOutputStream (baos);
    out.writeShort (id);
    out.write (new byte [] {0, 0, 0, 1, 0, 0, 0, 0, 0, 0});
    writeName (out, name);
    out.write (new byte [] {0, 0xc, 0, 1});
    return baos.toByteArray ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/util/MDNSResolver.java" startline="57" endline="60">
String reverseName (byte [] addr) {
    return (addr [3] & 0xFF) + "." + (addr [2] & 0xFF) + "." + (addr [1] & 0xFF) + "." + (addr [0] & 0xFF) + ".in-addr.arpa";
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/util/MDNSResolver.java" startline="62" endline="75">
public String resolve (InetAddress ip) throws IOException {
    byte [] addr = ip.getAddress ();
    int requestId = addr [2] * 0xFF + addr [3];
    byte [] request = dnsRequest (requestId, reverseName (addr));
    socket.send (new DatagramPacket (request, request.length, mdnsIP, mdnsPort));
    DatagramPacket respPacket = new DatagramPacket (new byte [512], 512);
    socket.receive (respPacket);
    byte [] response = respPacket.getData ();
    if (response [0] != request [0] && response [1] != request [1]) return null;

    int numQueries = response [5];
    int offset = (numQueries == 0 ? 12 : request.length) + 2 + 2 + 2 + 4 + 2;
    return decodeName (response, offset, respPacket.getLength () - offset);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/util/MDNSResolver.java" startline="77" endline="79">
public void close () {
    socket.close ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/util/MDNSResolver.java" startline="81" endline="83">
public static void main (String [] args) throws IOException {
    System.out.println (new MDNSResolver (2000).resolve (InetAddress.getByName ("192.168.0.10")));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/Scanner.java" startline="27" endline="29">
public Scanner (FetcherRegistry fetcherRegistry) {
    this.fetcherRegistry = fetcherRegistry;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/Scanner.java" startline="36" endline="57">
public void scan (ScanningSubject subject, ScanningResult result) {
    int fetcherIndex = 0;
    boolean isScanningInterrupted = false;
    for (Fetcher fetcher : fetcherRegistry.getSelectedFetchers ()) {
        currentFetchers.put (Thread.currentThread ().getId (), fetcher);
        Object value = NotScanned.VALUE;
        if (! subject.isAddressAborted () && ! isScanningInterrupted) {
            value = fetcher.scan (subject);
            isScanningInterrupted = Thread.currentThread ().isInterrupted ();
            if (value == null) value = isScanningInterrupted ? NotScanned.VALUE : NotAvailable.VALUE;

        }
        result.setValue (fetcherIndex, value);
        fetcherIndex ++;
    }
    result.setType (subject.getResultType ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/Scanner.java" startline="59" endline="62">
public void interrupt (Thread thread) {
    Fetcher fetcher = currentFetchers.get (thread.getId ());
    if (fetcher != null) fetcher.cleanup ();

}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/Scanner.java" startline="67" endline="71">
public void init () {
    for (Fetcher fetcher : fetcherRegistry.getSelectedFetchers ()) {
        fetcher.init ();
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/Scanner.java" startline="76" endline="81">
public void cleanup () {
    currentFetchers.clear ();
    for (Fetcher fetcher : fetcherRegistry.getSelectedFetchers ()) {
        fetcher.cleanup ();
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningResult.java" startline="25" endline="29">
public boolean matches (ResultType that) {
    if (this.ordinal () <= DEAD.ordinal ()) return that.ordinal () <= DEAD.ordinal ();

    return this.ordinal () <= that.ordinal ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningResult.java" startline="48" endline="53">
public ScanningResult (InetAddress address, int numberOfFetchers) {
    this.address = address;
    values = new Object [numberOfFetchers];
    values [0] = address.getHostAddress ();
    type = ResultType.UNKNOWN;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningResult.java" startline="59" endline="63">
public void reset () {
    values = new Object [values.length];
    values [0] = address.getHostAddress ();
    type = ResultType.UNKNOWN;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningResult.java" startline="65" endline="67">
public InetAddress getAddress () {
    return address;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningResult.java" startline="72" endline="74">
public boolean isReady () {
    return type != ResultType.UNKNOWN;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningResult.java" startline="79" endline="81">
public List < Object > getValues () {
    return Arrays.asList (values);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningResult.java" startline="83" endline="85">
public void setValues (Object [] values) {
    this.values = values;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningResult.java" startline="90" endline="92">
public void setType (ResultType type) {
    this.type = type;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningResult.java" startline="97" endline="99">
public ResultType getType () {
    return type;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningResult.java" startline="106" endline="108">
public void setValue (int fetcherIndex, Object value) {
    values [fetcherIndex] = value;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningResult.java" startline="115" endline="130">
public String toString () {
    String newLine = System.getProperty ("line.separator");
    StringBuilder details = new StringBuilder (1024);
    Iterator < ? > iterator = getValues ().iterator ();
    List < Fetcher > fetchers = resultList.getFetchers ();
    for (int i = 0;
    iterator.hasNext (); i ++) {
        String fetcherName = fetchers.get (i).getName ();
        details.append (fetcherName).append (":\t");
        Object value = iterator.next ();
        details.append (value != null ? value : "");
        details.append (newLine);
    }
    return details.toString ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningSubject.java" startline="46" endline="50">
public ScanningSubject (InetAddress address) {
    this.address = address;
    this.parameters = new HashMap < String, Object > ();
    this.config = Config.getConfig ().forScanner ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningSubject.java" startline="52" endline="54">
public InetAddress getAddress () {
    return address;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningSubject.java" startline="59" endline="61">
public void setParameter (String name, Object value) {
    parameters.put (name, value);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningSubject.java" startline="67" endline="69">
public Object getParameter (String name) {
    return parameters.get (name);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningSubject.java" startline="75" endline="77">
public boolean hasParameter (String name) {
    return parameters.containsKey (name);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningSubject.java" startline="82" endline="84">
public ResultType getResultType () {
    return resultType;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningSubject.java" startline="90" endline="92">
public void setResultType (ResultType resultType) {
    this.resultType = resultType;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningSubject.java" startline="97" endline="99">
public boolean isAddressAborted () {
    return isAborted;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningSubject.java" startline="104" endline="106">
public void abortAddressScanning () {
    this.isAborted = true;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningSubject.java" startline="108" endline="110">
public boolean isAnyPortRequested () {
    return requestedPorts != null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningSubject.java" startline="115" endline="117">
public Iterator < Integer > requestedPortsIterator () {
    return requestedPorts == null ? null : requestedPorts.iterator ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningSubject.java" startline="122" endline="126">
public void addRequestedPort (Integer requestedPort) {
    if (requestedPorts == null) requestedPorts = new ArrayList < Integer > ();

    requestedPorts.add (requestedPort);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningSubject.java" startline="131" endline="146">
public int getAdaptedPortTimeout () {
    if (adaptedPortTimeout > 0) return adaptedPortTimeout;

    PingResult pingResult = (PingResult) getParameter (PARAMETER_PING_RESULT);
    if (pingResult != null) {
        if (config.adaptPortTimeout && pingResult.isTimeoutAdaptationAllowed ()) {
            adaptedPortTimeout = Math.min (Math.max (pingResult.getLongestTime () * 3, config.minPortTimeout), config.portTimeout);
            return adaptedPortTimeout;
        }
    }
    return config.portTimeout;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningSubject.java" startline="148" endline="150">
public boolean isLocal () {
    return address.isSiteLocalAddress ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningSubject.java" startline="153" endline="163">
public String toString () {
    StringBuilder sb = new StringBuilder (address.getHostAddress ());
    if (requestedPorts != null) {
        sb.append (':');
        for (Integer port : requestedPorts) sb.append (port).append (',');

        if (sb.charAt (sb.length () - 1) == ',') sb.deleteCharAt (sb.length () - 1);

    }
    return sb.toString ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/PortIterator.java" startline="32" endline="56">
public PortIterator (String portString) {
    if (portString != null && (portString = portString.trim ()).length () > 0) {
        String [] portRanges = portString.split ("[\\s\t\n\r,;]+");
        portRangeStart = new int [portRanges.length + 1];
        portRangeEnd = new int [portRanges.length];
        for (int i = 0;
        i < portRanges.length; i ++) {
            String range = portRanges [i];
            int dashPos = range.indexOf ('-') + 1;
            int endPort = Integer.parseInt (range.substring (dashPos));
            portRangeEnd [i] = endPort;
            portRangeStart [i] = dashPos == 0 ? endPort : Integer.parseInt (range.substring (0, dashPos - 1));
            if (endPort <= 0 || endPort >= 65536) {
                throw new NumberFormatException (endPort + " port is out of range");
            }
        }
        currentPort = portRangeStart [0];
        rangeCountMinus1 = portRanges.length - 1;
        hasNext = rangeCountMinus1 >= 0;
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/PortIterator.java" startline="61" endline="63">
public boolean hasNext () {
    return hasNext;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/PortIterator.java" startline="68" endline="78">
public Integer next () {
    int returnPort = currentPort ++;
    if (currentPort > portRangeEnd [rangeIndex]) {
        hasNext = rangeIndex < rangeCountMinus1;
        rangeIndex ++;
        currentPort = portRangeStart [rangeIndex];
    }
    return returnPort;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/PortIterator.java" startline="80" endline="88">
public int size () {
    int size = 0;
    if (portRangeStart != null) {
        for (int i = 0;
        i <= rangeCountMinus1; i ++) {
            size += portRangeEnd [i] - portRangeStart [i] + 1;
        }
    }
    return size;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/PortIterator.java" startline="94" endline="101">
public PortIterator copy () {
    try {
        return (PortIterator) super.clone ();
    } catch (CloneNotSupportedException e) {
        throw new RuntimeException (e);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/PortIterator.java" startline="103" endline="105">
public void remove () {
    throw new UnsupportedOperationException ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/LibraryLoader.java" startline="22" endline="51">
public static void loadLibrary (String library) {
    String filename = System.mapLibraryName (library);
    String fullFilename = System.getProperty ("java.io.tmpdir") + System.getProperty ("file.separator") + filename;
    try {
        System.load (fullFilename);
    } catch (UnsatisfiedLinkError err2) {
        try {
            InputStream is = LibraryLoader.class.getClassLoader ().getResourceAsStream (filename);
            if (is == null) {
                throw new IOException (filename + " not found in the jar file (classpath)");
            }
            byte [] buffer = new byte [4096];
            OutputStream os = new FileOutputStream (fullFilename);
            int read;
            while ((read = is.read (buffer)) != - 1) {
                os.write (buffer, 0, read);
            }
            os.close ();
            is.close ();
            new File (fullFilename).setExecutable (true, false);
            System.load (fullFilename);
        } catch (IOException ioe) {
            throw new RuntimeException ("Unable to extract native library: " + library, ioe);
        }
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="49" endline="51">
public ScanningResultList (FetcherRegistry fetcherRegistry) {
    this.fetcherRegistry = fetcherRegistry;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="53" endline="56">
public ScanningResultList (FetcherRegistry fetcherRegistry, StateMachine stateMachine) {
    this (fetcherRegistry);
    stateMachine.addTransitionListener (new StopScanningListener ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="62" endline="64">
public List < Fetcher > getFetchers () {
    return selectedFetchers;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="69" endline="71">
public boolean areResultsAvailable () {
    return ! resultList.isEmpty ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="76" endline="78">
public boolean isInfoAvailable () {
    return info != null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="83" endline="85">
public String getFeederInfo () {
    return feederInfo;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="90" endline="92">
public String getFeederName () {
    return feederName;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="99" endline="106">
public synchronized ScanningResult createResult (InetAddress address) {
    info.numScanned ++;
    Integer index = resultIndexes.get (address);
    if (index == null) {
        return new ScanningResult (address, fetcherRegistry.getSelectedFetchers ().size ());
    }
    return resultList.get (index);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="115" endline="126">
public synchronized void registerAtIndex (int index, ScanningResult result) {
    if (resultIndexes.put (result.getAddress (), index) != null) throw new IllegalStateException (result.getAddress () + " is already registered in the list");

    result.resultList = this;
    resultList.add (index, result);
    if (result.isReady ()) updateStatistics (result);

}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="131" endline="133">
public synchronized boolean isRegistered (ScanningResult result) {
    return resultIndexes.containsKey (result.getAddress ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="139" endline="145">
public synchronized int update (ScanningResult result) {
    if (result.isReady ()) updateStatistics (result);

    return resultIndexes.get (result.getAddress ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="150" endline="155">
public synchronized void clear () {
    resultList.clear ();
    resultIndexes.clear ();
    selectedFetchers = null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="161" endline="169">
public synchronized void initNewScan (Feeder feeder) {
    selectedFetchers = new ArrayList < Fetcher > (fetcherRegistry.getSelectedFetchers ());
    this.feederInfo = feeder.getInfo ();
    this.feederName = feeder.getName ();
    this.info = new ScanInfo ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="174" endline="176">
public ScanInfo getScanInfo () {
    return info;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="183" endline="185">
public synchronized Iterator < ScanningResult > iterator () {
    return resultList.iterator ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="191" endline="193">
public synchronized ScanningResult getResult (int index) {
    return resultList.get (index);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="199" endline="212">
public synchronized void remove (int [] indices) {
    List < ScanningResult > newList = new ArrayList < ScanningResult > (RESULT_LIST_INITIAL_SIZE);
    Map < InetAddress, Integer > newMap = new HashMap < InetAddress, Integer > (RESULT_LIST_INITIAL_SIZE);
    for (int i = 0;
    i < resultList.size (); i ++) {
        if (Arrays.binarySearch (indices, i) < 0) {
            newList.add (resultList.get (i));
            newMap.put (resultList.get (i).getAddress (), newList.size () - 1);
        }
    }
    resultList = newList;
    resultIndexes = newMap;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="219" endline="229">
public synchronized void sort (int columnIndex, boolean ascending) {
    resultsComparator.byIndex (columnIndex, ascending);
    Collections.sort (resultList, resultsComparator);
    resultIndexes = new HashMap < InetAddress, Integer > (RESULT_LIST_INITIAL_SIZE);
    for (int i = 0;
    i < resultList.size (); i ++) {
        resultIndexes.put (resultList.get (i).getAddress (), i);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="237" endline="250">
public int findText (String text, int startIndex) {
    text = text.toLowerCase ();
    for (int i = startIndex;
    i < resultList.size (); i ++) {
        ScanningResult scanningResult = getResult (i);
        for (Object value : scanningResult.getValues ()) {
            if (value != null && value.toString ().toLowerCase ().contains (text)) {
                return i;
            }
        }
    }
    return - 1;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="252" endline="263">
private void updateStatistics (ScanningResult result) {
    if (info == null) {
        return;
    }
    if (result.getType () == ResultType.ALIVE) {
        info.numAlive ++;
    } else if (result.getType () == ResultType.WITH_PORTS) {
        info.numAlive ++;
        info.numWithPorts ++;
    }

}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="265" endline="272">
public int getFetcherIndex (String fetcherId) {
    int index = 0;
    for (Fetcher fetcher : getFetchers ()) {
        if (fetcherId.equals (fetcher.getId ())) return index;

        index ++;
    }
    return - 1;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="292" endline="297">
public long getScanTime () {
    long endTime = this.endTime;
    if (endTime == 0) endTime = System.currentTimeMillis ();

    return endTime - startTime;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="302" endline="304">
public int getHostCount () {
    return numScanned;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="309" endline="311">
public int getAliveCount () {
    return numAlive;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="316" endline="318">
public int getWithPortsCount () {
    return numWithPorts;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="323" endline="325">
public boolean isCompletedNormally () {
    return scanFinished && ! scanAborted;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningResultList.java" startline="329" endline="340">
public void transitionTo (ScanningState state, Transition transition) {
    synchronized (ScanningResultList.this) {
        if (transition == Transition.COMPLETE && state == ScanningState.IDLE) {
            info.endTime = System.currentTimeMillis ();
            info.scanFinished = true;
        } else if (state == ScanningState.KILLING) {
            info.scanAborted = true;
        }

    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/UserErrorException.java" startline="20" endline="22">
public UserErrorException (String label) {
    super (Labels.getLabel ("exception.UserErrorException." + label));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/UserErrorException.java" startline="24" endline="27">
public UserErrorException (String label, Throwable cause) {
    this (label);
    initCause (cause);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/UserErrorException.java" startline="29" endline="31">
public UserErrorException (String label, String rawInfo) {
    super (Labels.getLabel ("exception.UserErrorException." + label) + rawInfo);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/state/StateMachine.java" startline="33" endline="35">
public boolean inState (ScanningState state) {
    return this.state == state;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/state/StateMachine.java" startline="40" endline="42">
public ScanningState getState () {
    return state;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/state/StateMachine.java" startline="47" endline="55">
public void addTransitionListener (StateTransitionListener listener) {
    try {
        listenersLock.writeLock ().lock ();
        transitionListeners.add (listener);
    } finally {
        listenersLock.writeLock ().unlock ();
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/state/StateMachine.java" startline="60" endline="68">
public void removeTransitionListener (StateTransitionListener listener) {
    try {
        listenersLock.writeLock ().lock ();
        transitionListeners.remove (listener);
    } finally {
        listenersLock.writeLock ().unlock ();
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/state/StateMachine.java" startline="74" endline="79">
void transitionTo (ScanningState newState, Transition transition) {
    if (state != newState) {
        state = newState;
        notifyAboutTransition (transition);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/state/StateMachine.java" startline="81" endline="91">
protected void notifyAboutTransition (Transition transition) {
    try {
        listenersLock.readLock ().lock ();
        for (StateTransitionListener listener : transitionListeners) {
            listener.transitionTo (state, transition);
        }
    } finally {
        listenersLock.readLock ().unlock ();
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/state/StateMachine.java" startline="97" endline="102">
public void transitionToNext () {
    if (state != ScanningState.KILLING) {
        transitionTo (state.next (), Transition.NEXT);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/state/StateMachine.java" startline="107" endline="118">
public void stop () {
    if (state == ScanningState.SCANNING) {
        transitionTo (ScanningState.STOPPING, Transition.STOP);
    } else if (state == ScanningState.STOPPING) {
        notifyAboutTransition (Transition.STOP);
    } else {
        throw new IllegalStateException ("Attempt to stop from " + state);
    }

}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/state/StateMachine.java" startline="123" endline="130">
public void complete () {
    if (state == ScanningState.STOPPING || state == ScanningState.KILLING) {
        transitionTo (ScanningState.IDLE, Transition.COMPLETE);
    } else {
        throw new IllegalStateException ("Attempt to complete from " + state);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/state/StateMachine.java" startline="135" endline="142">
public void rescan () {
    if (state == ScanningState.IDLE) {
        transitionTo (ScanningState.RESTARTING, Transition.RESCAN);
    } else {
        throw new IllegalStateException ("Attempt to rescan from " + state);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/state/StateMachine.java" startline="147" endline="154">
public void startScanning () {
    if (state == ScanningState.STARTING || state == ScanningState.RESTARTING) {
        transitionTo (ScanningState.SCANNING, Transition.START);
    } else {
        throw new IllegalStateException ("Attempt to go scanning from " + state);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/state/StateMachine.java" startline="159" endline="166">
public void continueScanning () {
    if (state == ScanningState.IDLE) {
        transitionTo (ScanningState.STARTING, Transition.CONTINUE);
    } else {
        throw new IllegalStateException ("Attempt to continue scanning from " + state);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/state/StateMachine.java" startline="171" endline="174">
public void init () {
    state = ScanningState.IDLE;
    notifyAboutTransition (Transition.INIT);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/state/StateMachine.java" startline="179" endline="182">
public void reset () {
    state = ScanningState.IDLE;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/state/ScanningState.java" startline="28" endline="37">
ScanningState next () {
    switch (this) {
        case IDLE :
            return STARTING;
        case STARTING :
            return SCANNING;
        case SCANNING :
            return STOPPING;
        case STOPPING :
            return KILLING;
        case RESTARTING :
            return SCANNING;
        default :
            return null;
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningResultComparator.java" startline="19" endline="55">
public int compare (ScanningResult r1, ScanningResult r2) {
    Object val1 = r1.getValues ().get (index);
    Object val2 = r2.getValues ().get (index);
    if (val1 == null) val1 = NotAvailable.VALUE;

    if (val2 == null) val2 = NotAvailable.VALUE;

    int result;
    if (val1 == val2) {
        result = 0;
    } else if (val1.getClass () == val2.getClass () && ! (val1 instanceof String) && val1 instanceof Comparable) {
        result = ((Comparable) val1).compareTo (val2);
    } else {
        if (val1 instanceof Empty) result = ((Empty) val1).compareTo (val2);
        else if (val2 instanceof Empty) result = - ((Empty) val2).compareTo (val1);
        else {
            result = val1.toString ().compareToIgnoreCase (val2.toString ());
        }

    }

    if (result == 0 && index != 0) {
        result = ((Comparable) r1.getValues ().get (0)).compareTo (r2.getValues ().get (0));
    }
    return result * (ascending ? 1 : - 1);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScanningResultComparator.java" startline="57" endline="63">
public void byIndex (int index, boolean ascending) {
    this.index = index;
    this.ascending = ascending;
    Empty.setSortDirection (ascending);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/net/ICMPPinger.java" startline="35" endline="37">
public ICMPPinger (int timeout) {
    this.timeout = timeout;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/net/ICMPPinger.java" startline="39" endline="53">
private RawSocket createRawSocket () throws IOException {
    RawSocket socket = new RawSocket ();
    socket.open (RawSocket.PF_INET, IPPacket.PROTOCOL_ICMP);
    try {
        socket.setSendTimeout (timeout);
        socket.setReceiveTimeout (timeout);
    } catch (java.net.SocketException se) {
        socket.setUseSelectTimeout (true);
        socket.setSendTimeout (timeout);
        socket.setReceiveTimeout (timeout);
    }
    return socket;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/net/ICMPPinger.java" startline="55" endline="109">
private void sendReceiveEchoPacket (RawSocket socket, InetAddress address, int sequence, PingResult result) throws IOException {
    ICMPEchoPacket packet = new ICMPEchoPacket (1);
    byte [] data = new byte [84];
    packet.setData (data);
    packet.setIPHeaderLength (5);
    packet.setICMPDataByteLength (56);
    packet.setType (ICMPPacket.TYPE_ECHO_REQUEST);
    packet.setCode (0);
    packet.setIdentifier (hashCode () & 0xFFFF);
    packet.setSequenceNumber (sequence);
    int offset = packet.getIPHeaderByteLength ();
    int dataOffset = offset + packet.getICMPHeaderByteLength ();
    int length = packet.getICMPPacketByteLength ();
    OctetConverter.longToOctets (System.currentTimeMillis (), data, dataOffset);
    packet.computeICMPChecksum ();
    socket.write (address, data, offset, length);
    try {
        int skippedCount = 0;
        do {
            socket.read (address, data);
            skippedCount ++;
        } while (packet.getType () != ICMPPacket.TYPE_ECHO_REPLY || packet.getIdentifier () != (hashCode () & 0xFFFF) || packet.getSequenceNumber () != sequence);
        if (packet.getSourceAsInetAddress ().equals (address)) {
            long end = System.currentTimeMillis ();
            long start = OctetConverter.octetsToLong (data, dataOffset);
            long time = end - start;
            result.addReply (time);
            result.setTTL (packet.getTTL () & 0xFF);
        }
    } catch (InterruptedIOException e) {
        LOG.finer ("Receive timeout");
    } catch (UnknownHostException e) {
        LOG.log (Level.WARNING, "Cannot retrieve the source address of an ICMP packet", e);
    } catch (IOException e) {
        LOG.log (Level.WARNING, "Unable to read from the socket", e);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/net/ICMPPinger.java" startline="118" endline="138">
public PingResult ping (ScanningSubject subject, int count) throws IOException {
    PingResult result = new PingResult (subject.getAddress ());
    RawSocket socket = createRawSocket ();
    try {
        for (int i = 0;
        i < count && ! Thread.currentThread ().isInterrupted (); i ++) {
            try {
                sendReceiveEchoPacket (socket, subject.getAddress (), i, result);
            } catch (InterruptedIOException e) {
            }
        }
    } finally {
        closeQuietly (socket);
    }
    return result;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/net/ICMPPinger.java" startline="140" endline="141">
public void close () {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/net/TCPPinger.java" startline="35" endline="37">
public TCPPinger (int timeout) {
    this.timeout = timeout;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/net/TCPPinger.java" startline="39" endline="97">
public PingResult ping (ScanningSubject subject, int count) throws IOException {
    PingResult result = new PingResult (subject.getAddress ());
    int workingPort = - 1;
    Socket socket;
    for (int i = 0;
    i < count && ! Thread.currentThread ().isInterrupted (); i ++) {
        socket = new Socket ();
        int probePort = workingPort >= 0 ? workingPort : PROBE_TCP_PORTS [i % PROBE_TCP_PORTS.length];
        if (i == 0 && subject.isAnyPortRequested ()) probePort = subject.requestedPortsIterator ().next ();

        long startTime = System.currentTimeMillis ();
        try {
            socket.setReuseAddress (true);
            socket.setReceiveBufferSize (32);
            int timeout = result.isTimeoutAdaptationAllowed () ? min (result.getLongestTime () * 2, this.timeout) : this.timeout;
            socket.connect (new InetSocketAddress (subject.getAddress (), probePort), timeout);
            if (socket.isConnected ()) {
                success (result, startTime);
                workingPort = probePort;
            }
        } catch (SocketTimeoutException ignore) {
        } catch (NoRouteToHostException e) {
            break;
        } catch (IOException e) {
            String msg = e.getMessage ();
            if (msg.contains ("refused")) {
                success (result, startTime);
            } else if (msg.contains ("route to host") || msg.contains ("down") || msg.contains ("unreachable") || msg.contains ("closed")) {
                break;
            } else {
                LOG.log (FINER, subject.toString (), e);
            }

        } finally {
            closeQuietly (socket);
        }
    }
    return result;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/net/TCPPinger.java" startline="99" endline="103">
private void success (PingResult result, long startTime) {
    result.addReply (System.currentTimeMillis () - startTime);
    result.enableTimeoutAdaptation ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/net/TCPPinger.java" startline="105" endline="106">
public void close () {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/net/ICMPSharedPinger.java" startline="47" endline="71">
public ICMPSharedPinger (int timeout) throws IOException {
    sendingSocket = new RawSocket ();
    sendingSocket.open (RawSocket.PF_INET, IPPacket.PROTOCOL_ICMP);
    receivingSocket = new RawSocket ();
    receivingSocket.open (RawSocket.PF_INET, IPPacket.PROTOCOL_ICMP);
    this.timeout = timeout;
    try {
        sendingSocket.setSendTimeout (timeout);
        receivingSocket.setReceiveTimeout (timeout);
    } catch (java.net.SocketException se) {
        sendingSocket.setUseSelectTimeout (true);
        receivingSocket.setUseSelectTimeout (true);
        sendingSocket.setSendTimeout (timeout);
        receivingSocket.setReceiveTimeout (timeout);
    }
    receiverThread = new PacketReceiverThread ();
    receiverThread.start ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/net/ICMPSharedPinger.java" startline="73" endline="78">
public void close () throws IOException {
    synchronized (sendingSocket) {
        sendingSocket.close ();
    }
    receiverThread.interrupt ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/net/ICMPSharedPinger.java" startline="80" endline="146">
public PingResult ping (ScanningSubject subject, int count) throws IOException {
    InetAddress address = subject.getAddress ();
    PingResult result = new PingResult (address);
    results.put (address, result);
    ICMPEchoPacket packet = new ICMPEchoPacket (1);
    byte [] data = new byte [84];
    packet.setData (data);
    packet.setIPHeaderLength (5);
    packet.setICMPDataByteLength (56);
    packet.setType (ICMPPacket.TYPE_ECHO_REQUEST);
    packet.setCode (0);
    packet.setIdentifier (hashCode () & 0xFFFF);
    try {
        for (int i = 1;
        i <= count && ! Thread.currentThread ().isInterrupted (); i ++) {
            packet.setSequenceNumber (i);
            int offset = packet.getIPHeaderByteLength ();
            timeOffsetInPacket = offset + packet.getICMPHeaderByteLength ();
            int length = packet.getICMPPacketByteLength ();
            OctetConverter.longToOctets (System.currentTimeMillis (), data, timeOffsetInPacket);
            packet.computeICMPChecksum ();
            if (LOG.isLoggable (FINEST)) {
                LOG.finest ("Pinging " + i + result.address);
            }
            synchronized (sendingSocket) {
                sendingSocket.write (result.address, data, offset, length);
            }
            try {
                Thread.sleep (15);
            } catch (InterruptedException e) {
                Thread.currentThread ().interrupt ();
            }
        }
        int totalTimeout = timeout * count;
        while (totalTimeout > 0 && result.getReplyCount () < count) {
            if (LOG.isLoggable (FINEST)) {
                LOG.finest ("Waiting for response " + address + ": " + totalTimeout);
            }
            synchronized (result) {
                try {
                    result.wait (timeout);
                } catch (InterruptedException ignore) {
                }
            }
            totalTimeout -= timeout;
        }
        return result;
    } finally {
        results.remove (address);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/net/ICMPSharedPinger.java" startline="153" endline="157">
public PacketReceiverThread () {
    super ("Ping packet receiver");
    setDaemon (true);
    setPriority (Thread.MAX_PRIORITY);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/net/ICMPSharedPinger.java" startline="159" endline="239">
public void run () {
    ICMPEchoPacket packet = new ICMPEchoPacket (1);
    byte [] data = new byte [84];
    packet.setData (data);
    packet.setIPHeaderLength (5);
    packet.setICMPDataByteLength (56);
    InetAddress tmpAddress = null;
    try {
        tmpAddress = InetAddress.getLocalHost ();
    } catch (UnknownHostException e) {
        LOG.log (SEVERE, null, e);
    }
    try {
        receivingSocket.write (tmpAddress, data);
    } catch (IOException e) {
        LOG.log (WARNING, "Sending of test packet failed", e);
    }
    do {
        try {
            receivingSocket.read (tmpAddress, data);
            if (packet.getType () == ICMPPacket.TYPE_ECHO_REPLY && packet.getIdentifier () == (ICMPSharedPinger.this.hashCode () & 0xFFFF) && packet.getSequenceNumber () > 0) {
                long endTime = System.currentTimeMillis ();
                PingResult result = results.get (packet.getSourceAsInetAddress ());
                if (result == null) {
                    LOG.warning ("ICMP packet received from an unknown address: " + packet.getSourceAsInetAddress ());
                    continue;
                }
                long startTime = OctetConverter.octetsToLong (data, timeOffsetInPacket);
                long time = endTime - startTime;
                if (LOG.isLoggable (FINEST)) {
                    LOG.finest ("Received " + packet.getSequenceNumber () + packet.getSourceAsInetAddress () + ": " + time);
                }
                result.addReply (time);
                result.setTTL (packet.getTTL () & 0xFF);
                synchronized (result) {
                    result.notifyAll ();
                }
            } else if (packet.getType () == ICMPPacket.TYPE_HOST_UNREACHABLE) {
            }

        } catch (InterruptedIOException e) {
            LOG.finer ("Receive timeout");
        } catch (UnknownHostException e) {
            LOG.log (WARNING, "Cannot retrieve the source address of an ICMP packet", e);
        } catch (IOException e) {
            LOG.log (WARNING, "Unable to read from the socket", e);
        }
    } while (! interrupted ());
    closeQuietly (receivingSocket);
    LOG.fine ("Terminated");
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/net/WindowsPinger.java" startline="33" endline="35">
public WindowsPinger (int timeout) {
    this.timeout = timeout;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/net/WindowsPinger.java" startline="37" endline="66">
public PingResult ping (ScanningSubject subject, int count) throws IOException {
    Pointer handle = dll.IcmpCreateFile ();
    if (handle == null) throw new IOException ("Unable to create Windows native ICMP handle");

    IpAddrByVal ipaddr = new IpAddrByVal ();
    ipaddr.bytes = subject.getAddress ().getAddress ();
    int sendDataSize = 56;
    int replyDataSize = sendDataSize + (new IcmpEchoReply ().size ()) + 10;
    Pointer sendData = new Memory (sendDataSize);
    sendData.clear (sendDataSize);
    Pointer replyData = new Memory (replyDataSize);
    PingResult result = new PingResult (subject.getAddress ());
    try {
        for (int i = 1;
        i <= count && ! currentThread ().isInterrupted (); i ++) {
            int numReplies = dll.IcmpSendEcho (handle, ipaddr, sendData, (short) sendDataSize, null, replyData, replyDataSize, timeout);
            IcmpEchoReply echoReply = new IcmpEchoReply (replyData);
            if (numReplies > 0 && echoReply.status == 0 && Arrays.equals (echoReply.address.bytes, ipaddr.bytes)) {
                result.addReply (echoReply.roundTripTime);
                result.setTTL (echoReply.options.ttl & 0xFF);
            }
        }
    } finally {
        dll.IcmpCloseHandle (handle);
    }
    return result;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/net/WindowsPinger.java" startline="68" endline="70">
public void close () {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/net/WindowsPinger.java" startline="72" endline="76">
public static void main (String [] args) throws IOException {
    PingResult ping = new WindowsPinger (5000).ping (new ScanningSubject (InetAddress.getLocalHost ()), 3);
    System.out.println (ping.getAverageTime () + "ms");
    System.out.println ("TTL " + ping.getTTL ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/net/WinIpHlpDll.java" startline="20" endline="27">
public static WinIpHlpDll load () {
    try {
        return (WinIpHlpDll) Native.loadLibrary ("iphlpapi", WinIpHlpDll.class);
    } catch (UnsatisfiedLinkError e) {
        return (WinIpHlpDll) Native.loadLibrary ("icmp", WinIpHlpDll.class);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/net/WinIpHlpDll.java" startline="32" endline="39">
protected List < String > getFieldOrder () {
    ArrayList < String > fields = new ArrayList < String > ();
    for (Field field : getClass ().getFields ()) {
        if (! isStatic (field.getModifiers ())) fields.add (field.getName ());

    }
    return fields;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/net/WinIpHlpDll.java" startline="108" endline="109">
public IcmpEchoReply () {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/net/WinIpHlpDll.java" startline="111" endline="114">
public IcmpEchoReply (Pointer p) {
    useMemory (p);
    read ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/net/UDPPinger.java" startline="31" endline="33">
public UDPPinger (int timeout) {
    this.timeout = timeout;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/net/UDPPinger.java" startline="35" endline="77">
public PingResult ping (ScanningSubject subject, int count) throws IOException {
    PingResult result = new PingResult (subject.getAddress ());
    DatagramSocket socket = null;
    try {
        socket = new DatagramSocket ();
        socket.setSoTimeout (timeout);
        socket.connect (subject.getAddress (), PROBE_UDP_PORT);
        for (int i = 0;
        i < count && ! Thread.currentThread ().isInterrupted (); i ++) {
            byte [] payload = new byte [8];
            long startTime = System.currentTimeMillis ();
            ByteBuffer.wrap (payload).putLong (startTime);
            DatagramPacket packet = new DatagramPacket (payload, payload.length);
            try {
                socket.send (packet);
                socket.receive (packet);
            } catch (PortUnreachableException e) {
                result.addReply (System.currentTimeMillis () - startTime);
            } catch (SocketTimeoutException ignore) {
            } catch (NoRouteToHostException e) {
                break;
            } catch (SocketException e) {
                if (e.getMessage ().contains ("route to host")) {
                    break;
                }
            } catch (IOException e) {
                LOG.log (FINER, subject.toString (), e);
            }
        }
        return result;
    } finally {
        closeQuietly (socket);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/net/UDPPinger.java" startline="79" endline="80">
public void close () {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/net/PingResult.java" startline="25" endline="27">
public PingResult (InetAddress address) {
    this.address = address;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/net/PingResult.java" startline="29" endline="36">
public void addReply (long time) {
    replyCount ++;
    if (time > longestTime) longestTime = time;

    totalTime += time;
    timeoutAdaptationAllowed = replyCount > 2;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/net/PingResult.java" startline="38" endline="40">
public int getTTL () {
    return ttl;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/net/PingResult.java" startline="42" endline="44">
public void setTTL (int ttl) {
    this.ttl = ttl;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/net/PingResult.java" startline="46" endline="48">
public int getAverageTime () {
    return (int) (totalTime / replyCount);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/net/PingResult.java" startline="50" endline="52">
public int getLongestTime () {
    return (int) longestTime;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/net/PingResult.java" startline="54" endline="56">
public int getReplyCount () {
    return replyCount;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/net/PingResult.java" startline="61" endline="63">
public boolean isAlive () {
    return replyCount > 0;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/net/PingResult.java" startline="65" endline="68">
public void enableTimeoutAdaptation () {
    if (isAlive ()) timeoutAdaptationAllowed = true;

}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/net/PingResult.java" startline="70" endline="72">
public boolean isTimeoutAdaptationAllowed () {
    return timeoutAdaptationAllowed;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/net/CombinedUnprivilegedPinger.java" startline="26" endline="29">
public CombinedUnprivilegedPinger (int timeout) {
    udpPinger = new UDPPinger (timeout);
    tcpPinger = new TCPPinger (timeout);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/net/CombinedUnprivilegedPinger.java" startline="31" endline="39">
public PingResult ping (ScanningSubject subject, int count) throws IOException {
    PingResult result = udpPinger.ping (subject, max (1, count / 2));
    if (! result.isAlive ()) {
        result = tcpPinger.ping (subject, count);
    }
    return result;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/net/CombinedUnprivilegedPinger.java" startline="41" endline="44">
public void close () throws IOException {
    udpPinger.close ();
    tcpPinger.close ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/net/PingerRegistry.java" startline="39" endline="50">
public PingerRegistry (ScannerConfig scannerConfig) {
    this.scannerConfig = scannerConfig;
    pingers = new LinkedHashMap < String, Class < ? extends Pinger > > ();
    if (Platform.WINDOWS) pingers.put ("pinger.windows", WindowsPinger.class);

    pingers.put ("pinger.icmp", ICMPSharedPinger.class);
    pingers.put ("pinger.icmp2", ICMPPinger.class);
    pingers.put ("pinger.udp", UDPPinger.class);
    pingers.put ("pinger.tcp", TCPPinger.class);
    pingers.put ("pinger.combined", CombinedUnprivilegedPinger.class);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/net/PingerRegistry.java" startline="52" endline="54">
public String [] getRegisteredNames () {
    return pingers.keySet ().toArray (new String [pingers.size ()]);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/net/PingerRegistry.java" startline="59" endline="61">
public Pinger createPinger () throws FetcherException {
    return createPinger (scannerConfig.selectedPinger, scannerConfig.pingTimeout);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/net/PingerRegistry.java" startline="66" endline="81">
Pinger createPinger (String pingerName, int timeout) throws FetcherException {
    Class < ? extends Pinger > pingerClass = pingers.get (pingerName);
    Constructor < ? extends Pinger > constructor;
    try {
        constructor = pingerClass.getConstructor (int.class);
        return constructor.newInstance (timeout);
    } catch (Exception e) {
        Throwable t = e instanceof InvocationTargetException ? e.getCause () : e;
        String message = "Unable to create pinger: " + pingerName;
        LOG.log (SEVERE, message, t);
        if (t instanceof RuntimeException) throw (RuntimeException) t;

        throw new FetcherException ("pingerCreateFailure");
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/net/PingerRegistry.java" startline="83" endline="99">
public boolean checkSelectedPinger () {
    if (scannerConfig.selectedPinger.startsWith ("pinger.icmp")) {
        try {
            Pinger icmpPinger = createPinger (scannerConfig.selectedPinger, 250);
            icmpPinger.ping (new ScanningSubject (InetAddress.getLocalHost ()), 1);
        } catch (Throwable e) {
            LOG.info ("ICMP pinger failed: " + e);
            scannerConfig.selectedPinger = Platform.WINDOWS ? "pinger.windows" : "pinger.combined";
            return false;
        }
    }
    return true;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/PluginLoader.java" startline="41" endline="49">
public List < Class < ? extends Plugin > > getClasses () {
    List < Class < ? extends Plugin > > container = new ArrayList < Class < ? extends Plugin > > ();
    loadPluginsSpecifiedInSystemProperties (container);
    loadPluginJars (container, getOwnFile ());
    loadPluginJars (container, new File (System.getProperty ("user.home"), ".ipscan/placeholder"));
    return container;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/PluginLoader.java" startline="51" endline="56">
void loadPluginsSpecifiedInSystemProperties (List < Class < ? extends Plugin > > container) {
    String plugins = System.getProperty ("ipscan.plugins");
    if (plugins != null) {
        loadPluginClasses (container, getClass ().getClassLoader (), plugins);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/PluginLoader.java" startline="58" endline="72">
private void loadPluginClasses (List < Class < ? extends Plugin > > container, ClassLoader classLoader, String csvNames) {
    String [] classes = csvNames.split ("\\s*,\\s*");
    for (String className : classes) {
        try {
            Class clazz = Class.forName (className, true, classLoader);
            if (Plugin.class.isAssignableFrom (clazz)) container.add (clazz);
            else LOG.warning ("Plugin class " + clazz.getName () + " is not assignable to " + Plugin.class.getName ());

        } catch (ClassNotFoundException e) {
            LOG.warning ("Unable to load plugin: " + className);
        }
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/PluginLoader.java" startline="74" endline="108">
void loadPluginJars (List < Class < ? extends Plugin > > container, final File ownFile) {
    if (! ownFile.getParentFile ().exists ()) return;

    File [] jars = ownFile.getParentFile ().listFiles (new FilenameFilter () {
        @Override
        public boolean accept (File dir, String name) {
            return name.endsWith (".jar") && ! name.equals (ownFile.getName ());
        }}

    );
    PluginClassLoader loader = new PluginClassLoader ();
    for (File jar : jars) {
        try {
            JarFile jarFile = new JarFile (jar);
            Manifest manifest = jarFile.getManifest ();
            if (manifest == null) continue;

            jarFile.close ();
            String className = manifest.getMainAttributes ().getValue ("IPScan-Plugin");
            if (className != null) {
                loader.addURL (jar.toURI ().toURL ());
                loadPluginClasses (container, loader, className);
            }
            String classNames = manifest.getMainAttributes ().getValue ("IPScan-Plugins");
            if (classNames != null) {
                loader.addURL (jar.toURI ().toURL ());
                loadPluginClasses (container, loader, classNames);
            }
        } catch (Exception e) {
            LOG.warning ("Failed to load plugin jar " + jar + ": " + e);
        }
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/PluginLoader.java" startline="79" endline="81">
public boolean accept (File dir, String name) {
    return name.endsWith (".jar") && ! name.equals (ownFile.getName ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/PluginLoader.java" startline="110" endline="112">
private File getOwnFile () {
    return getClassLocation (getClass ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/PluginLoader.java" startline="114" endline="119">
File getClassLocation (Class clazz) {
    String ownPath = clazz.getResource (clazz.getSimpleName () + ".class").getFile ();
    if (ownPath.startsWith ("file:")) ownPath = ownPath.substring ("file:".length ());

    if (ownPath.indexOf ('!') >= 0) ownPath = ownPath.substring (0, ownPath.indexOf ('!'));

    return new File (ownPath);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/PluginLoader.java" startline="122" endline="124">
PluginClassLoader () {
    super (new URL [0], PluginLoader.class.getClassLoader ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/PluginLoader.java" startline="126" endline="128">
protected void addURL (URL url) {
    super.addURL (url);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScannerDispatcherThread.java" startline="47" endline="74">
public ScannerDispatcherThread (Feeder feeder, Scanner scanner, StateMachine stateMachine, ScanningProgressCallback progressCallback, ScanningResultList scanningResults, ScannerConfig scannerConfig, ScanningResultCallback resultsCallback) {
    setName (getClass ().getSimpleName ());
    this.config = scannerConfig;
    this.stateMachine = stateMachine;
    this.progressCallback = progressCallback;
    this.resultsCallback = resultsCallback;
    this.threadGroup = new ThreadGroup (getName ());
    this.threadPool = Executors.newFixedThreadPool (config.maxThreads, this);
    setDaemon (true);
    this.feeder = feeder;
    this.scanner = scanner;
    this.scanningResultList = scanningResults;
    try {
        this.scanningResultList.initNewScan (feeder);
        scanner.init ();
    } catch (RuntimeException e) {
        stateMachine.reset ();
        throw e;
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScannerDispatcherThread.java" startline="76" endline="144">
public void run () {
    try {
        stateMachine.addTransitionListener (this);
        long lastNotifyTime = 0;
        try {
            ScanningSubject subject = null;
            while (feeder.hasNext () && stateMachine.inState (SCANNING)) {
                Thread.sleep (config.threadDelay);
                if ((numActiveThreads.intValue () < config.maxThreads)) {
                    subject = feeder.next ();
                    if (config.skipBroadcastAddresses && InetAddressUtils.isLikelyBroadcast (subject.getAddress ())) {
                        continue;
                    }
                    ScanningResult result = scanningResultList.createResult (subject.getAddress ());
                    resultsCallback.prepareForResults (result);
                    AddressScannerTask scanningTask = new AddressScannerTask (subject, result);
                    threadPool.execute (scanningTask);
                }
                long now = System.currentTimeMillis ();
                if (now - lastNotifyTime >= UI_UPDATE_INTERVAL_MS && subject != null) {
                    lastNotifyTime = now;
                    progressCallback.updateProgress (subject.getAddress (), numActiveThreads.intValue (), feeder.percentageComplete ());
                }
            }
        } catch (InterruptedException e) {
        }
        stateMachine.stop ();
        threadPool.shutdown ();
        try {
            while (! threadPool.awaitTermination (UI_UPDATE_INTERVAL_MS, MILLISECONDS)) {
                progressCallback.updateProgress (null, numActiveThreads.intValue (), 100);
            }
        } catch (InterruptedException e) {
        }
        scanner.cleanup ();
        stateMachine.complete ();
    } finally {
        stateMachine.removeTransitionListener (this);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScannerDispatcherThread.java" startline="150" endline="155">
public void transitionTo (ScanningState state, Transition transition) {
    if (state == KILLING) {
        threadGroup.interrupt ();
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScannerDispatcherThread.java" startline="160" endline="171">
public Thread newThread (Runnable r) {
    return new Thread (threadGroup, r) {

        {
            setDaemon (true);
        }

        @Override
        public void interrupt () {
            scanner.interrupt (this);
            super.interrupt ();
        }}

    ;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScannerDispatcherThread.java" startline="166" endline="169">
public void interrupt () {
    scanner.interrupt (this);
    super.interrupt ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScannerDispatcherThread.java" startline="181" endline="185">
AddressScannerTask (ScanningSubject subject, ScanningResult result) {
    this.subject = subject;
    this.result = result;
    numActiveThreads.incrementAndGet ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScannerDispatcherThread.java" startline="187" endline="198">
public void run () {
    Thread.currentThread ().setName (getClass ().getSimpleName () + ": " + subject);
    try {
        scanner.scan (subject, result);
        resultsCallback.consumeResults (result);
    } finally {
        numActiveThreads.decrementAndGet ();
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/values/IntegerWithUnit.java" startline="21" endline="24">
public IntegerWithUnit (int value, String unitLabel) {
    this.value = value;
    this.unitLabel = unitLabel;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/values/IntegerWithUnit.java" startline="26" endline="28">
public int intValue () {
    return value;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/values/IntegerWithUnit.java" startline="30" endline="32">
public String toString () {
    return value + Labels.getLabel ("unit." + unitLabel);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/values/IntegerWithUnit.java" startline="34" endline="36">
public int hashCode () {
    return value;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/values/IntegerWithUnit.java" startline="38" endline="46">
public boolean equals (Object obj) {
    if (this == obj) return true;

    if (obj == null) return false;

    if (obj instanceof IntegerWithUnit) return value == ((IntegerWithUnit) obj).value;

    return false;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/values/IntegerWithUnit.java" startline="48" endline="54">
public int compareTo (IntegerWithUnit n) {
    if (this == n) return 0;

    if (n == null) return 1;

    return value == n.value ? 0 : value > n.value ? 1 : - 1;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/values/NotAvailable.java" startline="17" endline="17">
private NotAvailable () {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/values/NotAvailable.java" startline="22" endline="24">
public String toString () {
    return Config.getConfig ().forScanner ().notAvailableText;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/values/NotAvailable.java" startline="27" endline="32">
public int compareTo (Object that) {
    if (that == NotScanned.VALUE) return - sortDirection;

    return super.compareTo (that);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/values/Empty.java" startline="24" endline="26">
public static void setSortDirection (boolean ascending) {
    Empty.sortDirection = ascending ? 1 : - 1;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/values/Empty.java" startline="28" endline="33">
public int compareTo (Object that) {
    if (this == that) return 0;

    return sortDirection;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/values/NumericRangeList.java" startline="31" endline="40">
public NumericRangeList (Collection < Integer > numbers, boolean displayAsRanges) {
    this.numbers = new int [numbers.size ()];
    int c = 0;
    for (Number n : numbers) {
        this.numbers [c ++] = n.intValue ();
    }
    this.displayAsRanges = displayAsRanges;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/values/NumericRangeList.java" startline="45" endline="83">
public String toString () {
    StringBuilder sb = new StringBuilder ();
    int prevNumber = Integer.MAX_VALUE;
    int rangeStartNumber = 0;
    boolean isRange = false;
    int i = 0;
    if (numbers.length > 0) {
        prevNumber = numbers [0];
        sb.append (prevNumber);
    }
    while (++ i < numbers.length) {
        int curNumber = numbers [i];
        if (displayAsRanges && prevNumber + 1 == curNumber) {
            if (! isRange) {
                isRange = true;
                rangeStartNumber = prevNumber;
            }
        } else {
            if (isRange) {
                sb.append (rangeStartNumber + 1 == prevNumber ? ',' : '-').append (prevNumber);
                isRange = false;
            }
            sb.append (',').append (curNumber);
        }
        prevNumber = curNumber;
    }
    if (isRange) {
        sb.append (rangeStartNumber + 1 == prevNumber ? ',' : '-').append (prevNumber);
    }
    return sb.toString ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/values/NumericRangeList.java" startline="85" endline="95">
public int compareTo (NumericRangeList that) {
    int result = this.numbers.length - that.numbers.length;
    if (result == 0) {
        for (int i = 0;
        i < this.numbers.length && result == 0; i ++) {
            result = this.numbers [i] - that.numbers [i];
        }
    }
    return result;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/values/NotScanned.java" startline="17" endline="17">
private NotScanned () {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/values/NotScanned.java" startline="22" endline="24">
public String toString () {
    return Config.getConfig ().forScanner ().notScannedText;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/values/NotScanned.java" startline="27" endline="32">
public int compareTo (Object that) {
    if (that == NotAvailable.VALUE) return sortDirection;

    return super.compareTo (that);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/values/InetAddressHolder.java" startline="21" endline="24">
public InetAddressHolder (InetAddress address) {
    s = address.getHostAddress ();
    a = address.getAddress ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/values/InetAddressHolder.java" startline="26" endline="42">
public int compareTo (InetAddressHolder that) {
    byte [] b1 = this.a;
    byte [] b2 = that.a;
    for (int i = 0;
    i < b1.length; i ++) {
        if (b1 [i] == b2 [i]) continue;
        else if ((b1 [i] & 0xFF) > (b2 [i] & 0xFF)) return 1;
        else return - 1;

    }
    return 0;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/values/InetAddressHolder.java" startline="45" endline="47">
public String toString () {
    return s;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/values/InetAddressHolder.java" startline="50" endline="52">
public int hashCode () {
    return s.hashCode ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/values/InetAddressHolder.java" startline="55" endline="70">
public boolean equals (Object obj) {
    if (this == obj) return true;

    if (obj == null) return false;

    if (getClass () != obj.getClass ()) return false;

    final InetAddressHolder other = (InetAddressHolder) obj;
    if (s == null) {
        if (other.s != null) return false;

    } else if (! s.equals (other.s)) return false;

    return true;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScannerDispatcherThreadFactory.java" startline="30" endline="35">
public ScannerDispatcherThreadFactory (ScanningResultList scanningResults, Scanner scanner, StateMachine stateMachine, ScannerConfig scannerConfig) {
    this.scanningResults = scanningResults;
    this.scanner = scanner;
    this.stateMachine = stateMachine;
    this.scannerConfig = scannerConfig;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/core/ScannerDispatcherThreadFactory.java" startline="37" endline="39">
public ScannerDispatcherThread createScannerThread (Feeder feeder, ScanningProgressCallback progressCallback, ScanningResultCallback resultsCallback) {
    return new ScannerDispatcherThread (feeder, scanner, stateMachine, progressCallback, scanningResults, scannerConfig, resultsCallback);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/feeders/RandomFeeder.java" startline="35" endline="37">
public String getId () {
    return "feeder.random";
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/feeders/RandomFeeder.java" startline="39" endline="40">
public RandomFeeder () {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/feeders/RandomFeeder.java" startline="42" endline="64">
public RandomFeeder (String prototypeIP, String mask, int count) {
    try {
        this.prototypeBytes = InetAddress.getByName (prototypeIP).getAddress ();
    } catch (UnknownHostException e) {
        throw new FeederException ("malformedIP");
    }
    try {
        this.maskBytes = InetAddressUtils.parseNetmask (mask).getAddress ();
    } catch (UnknownHostException e) {
        throw new FeederException ("invalidNetmask");
    }
    if (count <= 0) {
        throw new FeederException ("random.invalidCount");
    }
    this.currentNumber = 0;
    this.addressCount = count;
    this.currentBytes = new byte [prototypeBytes.length];
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/feeders/RandomFeeder.java" startline="66" endline="68">
public int percentageComplete () {
    return Math.round ((float) currentNumber * 100 / addressCount);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/feeders/RandomFeeder.java" startline="70" endline="72">
public boolean hasNext () {
    return currentNumber < addressCount;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/feeders/RandomFeeder.java" startline="74" endline="85">
public ScanningSubject next () {
    currentNumber ++;
    random.nextBytes (currentBytes);
    try {
        InetAddressUtils.maskPrototypeAddressBytes (currentBytes, maskBytes, prototypeBytes);
        return new ScanningSubject (InetAddress.getByAddress (currentBytes));
    } catch (UnknownHostException e) {
        throw new RuntimeException (e);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/feeders/RandomFeeder.java" startline="87" endline="95">
public String getInfo () {
    try {
        return addressCount + ": " + InetAddress.getByAddress (prototypeBytes).getHostAddress () + " / " + InetAddress.getByAddress (maskBytes).getHostAddress ();
    } catch (UnknownHostException e) {
        assert false : e;
        return null;
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/feeders/RescanFeeder.java" startline="32" endline="35">
public RescanFeeder (Feeder oldFeeder, String...ips) {
    this.originalFeeder = oldFeeder;
    initAddresses (ips);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/feeders/RescanFeeder.java" startline="40" endline="42">
public String getId () {
    return originalFeeder.getId ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/feeders/RescanFeeder.java" startline="45" endline="47">
public String getName () {
    return Labels.getLabel ("feeder.rescan.of") + originalFeeder.getName ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/feeders/RescanFeeder.java" startline="53" endline="67">
private int initAddresses (String...ips) {
    if (ips.length == 0) throw new IllegalArgumentException ("no IP addresses specified");

    try {
        addresses = new ArrayList < InetAddress > (ips.length);
        for (String s : ips) {
            addresses.add (InetAddress.getByName (s));
        }
    } catch (UnknownHostException e) {
        throw new FeederException ("malformedIP");
    }
    return ips.length;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/feeders/RescanFeeder.java" startline="69" endline="71">
public boolean hasNext () {
    return current < addresses.size ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/feeders/RescanFeeder.java" startline="73" endline="75">
public ScanningSubject next () {
    return new ScanningSubject (addresses.get (current ++));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/feeders/RescanFeeder.java" startline="77" endline="79">
public int percentageComplete () {
    return current * 100 / addresses.size ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/feeders/RescanFeeder.java" startline="84" endline="86">
public String getInfo () {
    return originalFeeder.getInfo ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/feeders/AbstractFeeder.java" startline="18" endline="20">
public String getName () {
    return Labels.getLabel (getId ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/feeders/AbstractFeeder.java" startline="23" endline="25">
public String toString () {
    return getName () + ": " + getInfo ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/feeders/FileFeeder.java" startline="43" endline="45">
public String getId () {
    return "feeder.file";
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/feeders/FileFeeder.java" startline="47" endline="48">
public FileFeeder () {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/feeders/FileFeeder.java" startline="50" endline="57">
public FileFeeder (String fileName) {
    try {
        readAddresses (new FileReader (fileName));
    } catch (FileNotFoundException e) {
        throw new FeederException ("file.notExists");
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/feeders/FileFeeder.java" startline="59" endline="61">
public FileFeeder (Reader reader) {
    readAddresses (reader);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/feeders/FileFeeder.java" startline="63" endline="106">
private void readAddresses (Reader reader) {
    BufferedReader fileReader = new BufferedReader (reader);
    currentIndex = 0;
    foundHosts = new LinkedHashMap < String, ScanningSubject > ();
    try {
        String fileLine;
        while ((fileLine = fileReader.readLine ()) != null) {
            Matcher matcher = InetAddressUtils.HOSTNAME_REGEX.matcher (fileLine);
            while (matcher.find ()) {
                try {
                    String address = matcher.group ();
                    ScanningSubject subject = foundHosts.get (address);
                    if (subject == null) subject = new ScanningSubject (InetAddress.getByName (address));

                    if (! matcher.hitEnd () && fileLine.charAt (matcher.end ()) == ':') {
                        Matcher portMatcher = PORT_REGEX.matcher (fileLine.substring (matcher.end () + 1));
                        if (portMatcher.lookingAt ()) {
                            subject.addRequestedPort (Integer.valueOf (portMatcher.group ()));
                        }
                    }
                    foundHosts.put (address, subject);
                } catch (UnknownHostException e) {
                    LOG.log (WARNING, e.toString ());
                }
            }
        }
        if (foundHosts.isEmpty ()) {
            throw new FeederException ("file.nothingFound");
        }
    } catch (IOException e) {
        throw new FeederException ("file.errorWhileReading");
    } finally {
        closeQuietly (fileReader);
    }
    foundIPAddressesIterator = foundHosts.values ().iterator ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/feeders/FileFeeder.java" startline="108" endline="110">
public int percentageComplete () {
    return Math.round ((float) currentIndex * 100 / foundHosts.size ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/feeders/FileFeeder.java" startline="112" endline="114">
public boolean hasNext () {
    return foundIPAddressesIterator.hasNext ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/feeders/FileFeeder.java" startline="116" endline="119">
public ScanningSubject next () {
    currentIndex ++;
    return foundIPAddressesIterator.next ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/feeders/FileFeeder.java" startline="121" endline="124">
public String getInfo () {
    return Integer.toString (foundHosts.size ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/feeders/RangeFeeder.java" startline="36" endline="38">
public String getId () {
    return "feeder.range";
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/feeders/RangeFeeder.java" startline="40" endline="41">
public RangeFeeder () {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/feeders/RangeFeeder.java" startline="43" endline="59">
public RangeFeeder (String startIP, String endIP) {
    try {
        this.startIP = this.currentIP = InetAddress.getByName (startIP);
        this.endIP = this.originalEndIP = InetAddress.getByName (endIP);
        this.isReverse = false;
    } catch (UnknownHostException e) {
        throw new FeederException ("malformedIP");
    }
    if (InetAddressUtils.greaterThan (this.startIP, this.endIP)) {
        this.isReverse = true;
        this.endIP = InetAddressUtils.decrement (InetAddressUtils.decrement (this.endIP));
    }
    initPercentageIncrement ();
    this.endIP = InetAddressUtils.increment (this.endIP);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/feeders/RangeFeeder.java" startline="64" endline="74">
private void initPercentageIncrement () {
    long rawEndIP = OctetConverter.octetsToInt (this.endIP.getAddress ());
    long rawStartIP = OctetConverter.octetsToInt (this.startIP.getAddress ());
    rawEndIP = rawEndIP >= 0 ? rawEndIP : rawEndIP + Integer.MAX_VALUE;
    rawStartIP = rawStartIP >= 0 ? rawStartIP : rawStartIP + Integer.MAX_VALUE;
    percentageIncrement = Math.abs (100.0 / (rawEndIP - rawStartIP + 1));
    percentageComplete = 0;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/feeders/RangeFeeder.java" startline="76" endline="79">
public boolean hasNext () {
    return ! currentIP.equals (endIP);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/feeders/RangeFeeder.java" startline="81" endline="90">
public ScanningSubject next () {
    percentageComplete += percentageIncrement;
    InetAddress prevIP = this.currentIP;
    if (this.isReverse) {
        this.currentIP = InetAddressUtils.decrement (prevIP);
    } else {
        this.currentIP = InetAddressUtils.increment (prevIP);
    }
    return new ScanningSubject (prevIP);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/feeders/RangeFeeder.java" startline="92" endline="94">
public int percentageComplete () {
    return (int) Math.round (percentageComplete);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/feeders/RangeFeeder.java" startline="96" endline="99">
public String getInfo () {
    return startIP.getHostAddress () + " - " + originalEndIP.getHostAddress ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/feeders/FeederException.java" startline="17" endline="19">
public FeederException (String message) {
    super (message);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/feeders/FeederException.java" startline="21" endline="24">
public FeederException (String message, Throwable cause) {
    super (message);
    initCause (cause);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/feeders/SmartTextFeeder.java" startline="24" endline="26">
public String getId () {
    return null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/feeders/SmartTextFeeder.java" startline="28" endline="41">
public SmartTextFeeder (String text) {
    text = text.replaceAll ("\\w+", "");
    int slashPos = text.indexOf ('/');
    if (slashPos >= 0) {
        text = text.substring (0, slashPos);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/feeders/SmartTextFeeder.java" startline="43" endline="45">
public boolean hasNext () {
    return false;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/feeders/SmartTextFeeder.java" startline="47" endline="49">
public ScanningSubject next () {
    return null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/feeders/SmartTextFeeder.java" startline="51" endline="53">
public int percentageComplete () {
    return 0;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/feeders/SmartTextFeeder.java" startline="55" endline="57">
public String getInfo () {
    return null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/WebDetectFetcher.java" startline="20" endline="22">
public WebDetectFetcher (ScannerConfig scannerConfig) {
    super (scannerConfig, 80, "HEAD /robots.txt HTTP/1.0\r\n\r\n", "^[Ss]erver:\\s+(.*)$");
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/WebDetectFetcher.java" startline="24" endline="26">
public String getId () {
    return "fetcher.webDetect";
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/WinMACFetcher.java" startline="13" endline="13">
public WinMACFetcher () {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/WinMACFetcher.java" startline="15" endline="29">
public String resolveMAC (InetAddress address) {
    IpAddrByVal destIP = new IpAddrByVal ();
    destIP.bytes = address.getAddress ();
    Pointer pmac = new Memory (8);
    Pointer plen = new Memory (4);
    plen.setInt (0, 8);
    int result = dll.SendARP (destIP, 0, pmac, plen);
    if (result != 0) return null;

    byte [] bytes = pmac.getByteArray (0, plen.getInt (0));
    return bytesToMAC (bytes);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/PingTTLFetcher.java" startline="23" endline="25">
public PingTTLFetcher (PingerRegistry pingerRegistry, ScannerConfig scannerConfig) {
    super (pingerRegistry, scannerConfig);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/PingTTLFetcher.java" startline="27" endline="29">
public String getId () {
    return "fetcher.ping.ttl";
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/PingTTLFetcher.java" startline="31" endline="35">
public Object scan (ScanningSubject subject) {
    PingResult result = executePing (subject);
    subject.setResultType (result.isAlive () ? ResultType.ALIVE : ResultType.DEAD);
    return result.isAlive () && result.getTTL () > 0 ? result.getTTL () : null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/PortsFetcher.java" startline="48" endline="50">
public PortsFetcher (ScannerConfig scannerConfig) {
    this.config = scannerConfig;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/PortsFetcher.java" startline="52" endline="54">
public String getId () {
    return ID;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/PortsFetcher.java" startline="57" endline="60">
public String getFullName () {
    int numPorts = new PortIterator (config.portString).size ();
    return getName () + " [" + numPorts + (config.useRequestedPorts ? "+" : "") + "]";
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/PortsFetcher.java" startline="63" endline="65">
public Class < ? extends FetcherPrefs > getPreferencesClass () {
    return PortsFetcherPrefs.class;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/PortsFetcher.java" startline="74" endline="127">
protected boolean scanPorts (ScanningSubject subject) {
    SortedSet < Integer > openPorts = getOpenPorts (subject);
    if (openPorts == null) {
        openPorts = new TreeSet < Integer > ();
        SortedSet < Integer > filteredPorts = new TreeSet < Integer > ();
        subject.setParameter (PARAMETER_OPEN_PORTS, openPorts);
        subject.setParameter (PARAMETER_FILTERED_PORTS, filteredPorts);
        int portTimeout = subject.getAdaptedPortTimeout ();
        Iterator < Integer > portsIterator = portIteratorPrototype.copy ();
        if (config.useRequestedPorts && subject.isAnyPortRequested ()) {
            portsIterator = new SequenceIterator < Integer > (portsIterator, subject.requestedPortsIterator ());
        }
        if (! portsIterator.hasNext ()) {
            return false;
        }
        while (portsIterator.hasNext () && ! Thread.currentThread ().isInterrupted ()) {
            Socket socket = sockets.bind (new Socket ());
            int port = portsIterator.next ();
            try {
                socket.setReuseAddress (true);
                socket.setReceiveBufferSize (32);
                socket.connect (new InetSocketAddress (subject.getAddress (), port), portTimeout);
                socket.setSoLinger (true, 0);
                socket.setSendBufferSize (16);
                socket.setTcpNoDelay (true);
                if (socket.isConnected ()) openPorts.add (port);

            } catch (SocketTimeoutException e) {
                filteredPorts.add (port);
            } catch (IOException e) {
                assert e instanceof ConnectException : e;
            } finally {
                sockets.closeAndUnbind (socket);
            }
        }
    }
    return true;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/PortsFetcher.java" startline="130" endline="132">
protected SortedSet < Integer > getFilteredPorts (ScanningSubject subject) {
    return (SortedSet < Integer >) subject.getParameter (PARAMETER_FILTERED_PORTS);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/PortsFetcher.java" startline="135" endline="137">
protected SortedSet < Integer > getOpenPorts (ScanningSubject subject) {
    return (SortedSet < Integer >) subject.getParameter (PARAMETER_OPEN_PORTS);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/PortsFetcher.java" startline="142" endline="153">
public Object scan (ScanningSubject subject) {
    boolean portsScanned = scanPorts (subject);
    if (! portsScanned) return NotScanned.VALUE;

    SortedSet < Integer > openPorts = getOpenPorts (subject);
    if (! openPorts.isEmpty ()) {
        subject.setResultType (ResultType.WITH_PORTS);
        return new NumericRangeList (openPorts, displayAsRanges);
    }
    return null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/PortsFetcher.java" startline="155" endline="158">
public void init () {
    this.portIteratorPrototype = new PortIterator (config.portString);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/PortsFetcher.java" startline="161" endline="163">
public void cleanup () {
    sockets.close ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/CommentFetcher.java" startline="22" endline="24">
public CommentFetcher (CommentsConfig commentsConfig) {
    this.commentsConfig = commentsConfig;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/CommentFetcher.java" startline="26" endline="28">
public String getId () {
    return ID;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/CommentFetcher.java" startline="30" endline="33">
public Object scan (ScanningSubject subject) {
    String mac = (String) subject.getParameter (MACFetcher.ID);
    return commentsConfig.getComment (subject.getAddress (), mac);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/HostnameFetcher.java" startline="50" endline="50">
public HostnameFetcher () {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/HostnameFetcher.java" startline="52" endline="54">
public String getId () {
    return ID;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/HostnameFetcher.java" startline="57" endline="70">
private String resolveWithRegularDNS (InetAddress ip) {
    try {
        return (String) getHostByAddr.invoke (inetAddressImpl, ip.getAddress ());
    } catch (Exception e) {
        if (e instanceof InvocationTargetException && e.getCause () instanceof UnknownHostException) return null;

        String hostname = ip.getCanonicalHostName ();
        return ip.getHostAddress ().equals (hostname) ? null : hostname;
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/HostnameFetcher.java" startline="72" endline="89">
private String resolveWithMulticastDNS (ScanningSubject subject) {
    try {
        MDNSResolver resolver = new MDNSResolver (subject.getAdaptedPortTimeout ());
        String name = resolver.resolve (subject.getAddress ());
        resolver.close ();
        return name;
    } catch (SocketTimeoutException e) {
        return null;
    } catch (SocketException e) {
        return null;
    } catch (Exception e) {
        LOG.log (WARNING, "Failed to query mDNS for " + subject, e);
        return null;
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/HostnameFetcher.java" startline="91" endline="108">
private String resolveWithNetBIOS (ScanningSubject subject) {
    try {
        NetBIOSResolver resolver = new NetBIOSResolver (subject.getAdaptedPortTimeout ());
        String [] names = resolver.resolve (subject.getAddress ());
        resolver.close ();
        return names == null ? null : names [0];
    } catch (SocketTimeoutException e) {
        return null;
    } catch (SocketException e) {
        return null;
    } catch (Exception e) {
        LOG.log (WARNING, "Failed to query NetBIOS for " + subject, e);
        return null;
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/HostnameFetcher.java" startline="110" endline="115">
public Object scan (ScanningSubject subject) {
    String name = resolveWithRegularDNS (subject.getAddress ());
    if (name == null && subject.isLocal ()) name = resolveWithMulticastDNS (subject);

    if (name == null && subject.isLocal ()) name = resolveWithNetBIOS (subject);

    return name;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/PingFetcher.java" startline="43" endline="46">
public PingFetcher (PingerRegistry pingerRegistry, ScannerConfig scannerConfig) {
    this.pingerRegistry = pingerRegistry;
    this.config = scannerConfig;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/PingFetcher.java" startline="48" endline="50">
public String getId () {
    return ID;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/PingFetcher.java" startline="53" endline="55">
public Class < ? extends FetcherPrefs > getPreferencesClass () {
    return PingFetcherPrefs.class;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/PingFetcher.java" startline="57" endline="74">
protected PingResult executePing (ScanningSubject subject) {
    if (subject.hasParameter (PARAMETER_PING_RESULT)) return (PingResult) subject.getParameter (PARAMETER_PING_RESULT);

    PingResult result;
    try {
        result = pinger.ping (subject, config.pingCount);
    } catch (IOException e) {
        LOG.log (Level.WARNING, "Pinging failed", e);
        result = new PingResult (subject.getAddress ());
    }
    subject.setParameter (PARAMETER_PING_RESULT, result);
    return result;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/PingFetcher.java" startline="76" endline="86">
public Object scan (ScanningSubject subject) {
    PingResult result = executePing (subject);
    subject.setResultType (result.isAlive () ? ResultType.ALIVE : ResultType.DEAD);
    if (! result.isAlive () && ! config.scanDeadHosts) {
        subject.abortAddressScanning ();
    }
    return result.isAlive () ? new IntegerWithUnit (result.getAverageTime (), "ms") : null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/PingFetcher.java" startline="88" endline="92">
public void init () {
    if (pinger == null) {
        pinger = pingerRegistry.createPinger ();
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/PingFetcher.java" startline="94" endline="102">
public void cleanup () {
    try {
        if (pinger != null) pinger.close ();

    } catch (IOException e) {
        throw new FetcherException (e);
    }
    pinger = null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/PortTextFetcher.java" startline="40" endline="46">
public PortTextFetcher (ScannerConfig scannerConfig, int defaultPort, String textToSend, String matchingRegexp) {
    this.scannerConfig = scannerConfig;
    this.defaultPort = defaultPort;
    this.textToSend = getPreferences ().get ("textToSend", textToSend);
    this.matchingRegexp = Pattern.compile (getPreferences ().get ("matchingRegexp", matchingRegexp));
    this.extractGroup = getPreferences ().getInt ("extractGroup", 1);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/PortTextFetcher.java" startline="48" endline="93">
public Object scan (ScanningSubject subject) {
    Iterator < Integer > portIterator = subject.isAnyPortRequested () ? subject.requestedPortsIterator () : Collections.singleton (defaultPort).iterator ();
    while (portIterator.hasNext () && ! Thread.currentThread ().isInterrupted ()) {
        Socket socket = new Socket ();
        try {
            socket.connect (new InetSocketAddress (subject.getAddress (), portIterator.next ()), subject.getAdaptedPortTimeout ());
            socket.setTcpNoDelay (true);
            socket.setSoTimeout (scannerConfig.portTimeout * 2);
            socket.setSoLinger (true, 0);
            socket.getOutputStream ().write (textToSend.getBytes ());
            BufferedReader in = new BufferedReader (new InputStreamReader (socket.getInputStream ()));
            String line;
            while ((line = in.readLine ()) != null) {
                Matcher matcher = matchingRegexp.matcher (line);
                if (matcher.find ()) {
                    subject.setResultType (ResultType.WITH_PORTS);
                    return matcher.group (extractGroup);
                }
            }
        } catch (ConnectException e) {
        } catch (SocketTimeoutException e) {
        } catch (SocketException e) {
        } catch (IOException e) {
            LOG.log (Level.FINE, subject.getAddress ().toString (), e);
        } finally {
            try {
                socket.close ();
            } catch (IOException e) {
            }
        }
    }
    return null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/PortTextFetcher.java" startline="96" endline="98">
public Class < ? extends FetcherPrefs > getPreferencesClass () {
    return PortTextFetcherPrefs.class;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/PortTextFetcher.java" startline="100" endline="102">
public String getTextToSend () {
    return textToSend;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/PortTextFetcher.java" startline="104" endline="106">
public void setTextToSend (String textToSend) {
    this.textToSend = textToSend;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/PortTextFetcher.java" startline="108" endline="110">
public Pattern getMatchingRegexp () {
    return matchingRegexp;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/PortTextFetcher.java" startline="112" endline="114">
public void setMatchingRegexp (Pattern matchingRegexp) {
    this.matchingRegexp = matchingRegexp;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/PortTextFetcher.java" startline="116" endline="118">
public int getExtractGroup () {
    return extractGroup;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/PortTextFetcher.java" startline="120" endline="122">
public void setExtractGroup (int extractGroup) {
    this.extractGroup = extractGroup;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/MACFetcher.java" startline="14" endline="16">
public String getId () {
    return ID;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/MACFetcher.java" startline="19" endline="24">
public final String scan (ScanningSubject subject) {
    String mac = (String) subject.getParameter (ID);
    if (mac == null) mac = resolveMAC (subject.getAddress ());

    subject.setParameter (ID, mac);
    return mac;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/MACFetcher.java" startline="28" endline="33">
static String bytesToMAC (byte [] bytes) {
    StringBuilder mac = new StringBuilder ();
    for (byte b : bytes) mac.append (String.format ("%02X", b)).append (":");

    if (mac.length () > 0) mac.deleteCharAt (mac.length () - 1);

    return mac.toString ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/MACFetcher.java" startline="35" endline="38">
static String extractMAC (String line) {
    Matcher m = macAddressPattern.matcher (line);
    return m.find () ? addLeadingZeroes (m.group ().toUpperCase ()) : null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/MACFetcher.java" startline="40" endline="42">
private static String addLeadingZeroes (String mac) {
    return leadingZeroesPattern.matcher (mac).replaceAll ("0$1");
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/FetcherRegistry.java" startline="38" endline="46">
public FetcherRegistry (List < Fetcher > fetchers, Preferences preferences, PreferencesDialog preferencesDialog) {
    this.preferences = preferences;
    this.preferencesDialog = preferencesDialog;
    registeredFetchers = createFetchersMap (fetchers);
    loadSelectedFetchers (preferences);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/FetcherRegistry.java" startline="48" endline="54">
private Map < String, Fetcher > createFetchersMap (List < Fetcher > fetchers) {
    Map < String, Fetcher > registeredFetchers = new LinkedHashMap < String, Fetcher > (fetchers.size ());
    for (Fetcher fetcher : fetchers) {
        registeredFetchers.put (fetcher.getId (), fetcher);
    }
    return Collections.unmodifiableMap (registeredFetchers);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/FetcherRegistry.java" startline="56" endline="78">
private void loadSelectedFetchers (Preferences preferences) {
    String fetcherPrefValue = preferences.get (PREFERENCE_SELECTED_FETCHERS, null);
    if (fetcherPrefValue == null) {
        selectedFetchers = new LinkedHashMap < String, Fetcher > ();
        selectedFetchers.put (IPFetcher.ID, registeredFetchers.get (IPFetcher.ID));
        selectedFetchers.put (PingFetcher.ID, registeredFetchers.get (PingFetcher.ID));
        selectedFetchers.put (HostnameFetcher.ID, registeredFetchers.get (HostnameFetcher.ID));
        selectedFetchers.put (PortsFetcher.ID, registeredFetchers.get (PortsFetcher.ID));
    } else {
        String [] fetcherPrefs = fetcherPrefValue.split ("###");
        selectedFetchers = new LinkedHashMap < String, Fetcher > (registeredFetchers.size ());
        for (String fetcherPref : fetcherPrefs) {
            Fetcher fetcher = registeredFetchers.get (fetcherPref);
            if (fetcher != null) {
                selectedFetchers.put (fetcherPref, fetcher);
            }
        }
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/FetcherRegistry.java" startline="80" endline="90">
private void saveSelectedFetchers (Preferences preferences) {
    StringBuilder sb = new StringBuilder ();
    for (String fetcherName : selectedFetchers.keySet ()) {
        sb.append (fetcherName).append ("###");
    }
    String value = sb.toString ();
    if (value.endsWith ("###")) value = value.substring (0, value.length () - 3);

    preferences.put (PREFERENCE_SELECTED_FETCHERS, value);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/FetcherRegistry.java" startline="96" endline="98">
public void addListener (FetcherRegistryUpdateListener listener) {
    updateListeners.add (listener);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/FetcherRegistry.java" startline="103" endline="105">
public Collection < Fetcher > getRegisteredFetchers () {
    return registeredFetchers.values ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/FetcherRegistry.java" startline="110" endline="112">
public Collection < Fetcher > getSelectedFetchers () {
    return selectedFetchers.values ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/FetcherRegistry.java" startline="119" endline="128">
public int getSelectedFetcherIndex (String id) {
    int index = 0;
    for (Fetcher fetcher : selectedFetchers.values ()) {
        if (id.equals (fetcher.getId ())) {
            return index;
        }
        index ++;
    }
    return - 1;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/FetcherRegistry.java" startline="135" endline="150">
public void updateSelectedFetchers (String [] labels) {
    Map < String, Fetcher > newList = new LinkedHashMap < String, Fetcher > ();
    for (String label : labels) {
        newList.put (label, registeredFetchers.get (label));
    }
    selectedFetchers = newList;
    for (FetcherRegistryUpdateListener listener : updateListeners) {
        listener.handleUpdateOfSelectedFetchers (this);
    }
    saveSelectedFetchers (preferences);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/FetcherRegistry.java" startline="157" endline="169">
public void openPreferencesEditor (Fetcher fetcher) throws FetcherException {
    Class < ? extends FetcherPrefs > prefsEditorClass = fetcher.getPreferencesClass ();
    if (prefsEditorClass == null) throw new FetcherException ("preferences.notAvailable");

    try {
        FetcherPrefs prefs = createFetcherPrefsEditor (prefsEditorClass);
        prefs.openFor (fetcher);
    } catch (Exception e) {
        throw new RuntimeException ("Cannot instantiate fetcher preference editor: " + prefsEditorClass.getName ());
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/FetcherRegistry.java" startline="171" endline="179">
private FetcherPrefs createFetcherPrefsEditor (Class < ? extends FetcherPrefs > prefsClass) throws Exception {
    try {
        Constructor < ? extends FetcherPrefs > constructor = prefsClass.getConstructor (PreferencesDialog.class);
        return constructor.newInstance (preferencesDialog);
    } catch (NoSuchMethodException e) {
        return prefsClass.newInstance ();
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/FetcherException.java" startline="17" endline="19">
public FetcherException (Throwable cause) {
    super (cause);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/FetcherException.java" startline="21" endline="23">
public FetcherException (String label, Throwable cause) {
    super (label, cause);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/FetcherException.java" startline="25" endline="27">
public FetcherException (String label) {
    super (label);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/FilteredPortsFetcher.java" startline="23" endline="25">
public FilteredPortsFetcher (ScannerConfig scannerConfig) {
    super (scannerConfig);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/FilteredPortsFetcher.java" startline="27" endline="29">
public String getId () {
    return "fetcher.ports.filtered";
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/FilteredPortsFetcher.java" startline="31" endline="38">
public Object scan (ScanningSubject subject) {
    boolean portsScanned = scanPorts (subject);
    if (! portsScanned) return NotScanned.VALUE;

    SortedSet < Integer > filteredPorts = getFilteredPorts (subject);
    return filteredPorts.size () > 0 ? new NumericRangeList (filteredPorts, displayAsRanges) : null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/AbstractFetcher.java" startline="21" endline="23">
public String getName () {
    return Labels.getLabel (getId ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/AbstractFetcher.java" startline="25" endline="27">
public String getFullName () {
    return getName ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/AbstractFetcher.java" startline="29" endline="36">
public String getInfo () {
    try {
        return Labels.getLabel (getId () + ".info");
    } catch (MissingResourceException e) {
        return null;
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/AbstractFetcher.java" startline="38" endline="40">
public Preferences getPreferences () {
    return Config.getConfig ().getPreferences ().node (getId ().replace ("fetcher.", ""));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/AbstractFetcher.java" startline="42" endline="45">
public Class < ? extends FetcherPrefs > getPreferencesClass () {
    return null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/AbstractFetcher.java" startline="47" endline="49">
public void init () {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/AbstractFetcher.java" startline="51" endline="53">
public void cleanup () {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/MACVendorFetcher.java" startline="18" endline="20">
public MACVendorFetcher (MACFetcher macFetcher) {
    this.macFetcher = macFetcher;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/MACVendorFetcher.java" startline="23" endline="25">
public String getId () {
    return ID;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/MACVendorFetcher.java" startline="28" endline="41">
public void init () {
    BufferedReader reader = new BufferedReader (new InputStreamReader (getClass ().getResourceAsStream ("/mac-vendors.txt")));
    try {
        String line;
        while ((line = reader.readLine ()) != null) {
            String prefix = line.substring (0, 2) + ':' + line.substring (2, 4) + ':' + line.substring (4, 6);
            vendors.put (prefix, line.substring (6));
        }
        IOUtils.closeQuietly (reader);
    } catch (IOException e) {
        throw new RuntimeException (e);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/MACVendorFetcher.java" startline="44" endline="50">
public Object scan (ScanningSubject subject) {
    String mac = (String) subject.getParameter (MACFetcher.ID);
    if (mac == null) {
        mac = macFetcher.scan (subject);
    }
    return mac != null ? findMACVendor (mac) : null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/MACVendorFetcher.java" startline="52" endline="54">
String findMACVendor (String mac) {
    return vendors.get (mac.substring (0, 8));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/HTTPSenderFetcher.java" startline="20" endline="22">
public HTTPSenderFetcher (ScannerConfig scannerConfig) {
    super (scannerConfig, 3128, "GET http://www.google.com HTTP/1.0\r\n\r\n", "Location: (https?.*)$");
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/HTTPSenderFetcher.java" startline="24" endline="26">
public String getId () {
    return "fetcher.httpSender";
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/NetBIOSInfoFetcher.java" startline="27" endline="27">
public NetBIOSInfoFetcher () {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/NetBIOSInfoFetcher.java" startline="31" endline="33">
public String getId () {
    return "fetcher.netbios";
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/NetBIOSInfoFetcher.java" startline="35" endline="67">
public Object scan (ScanningSubject subject) {
    NetBIOSResolver netbios = null;
    try {
        netbios = new NetBIOSResolver (subject.getAdaptedPortTimeout ());
        String [] names = netbios.resolve (subject.getAddress ());
        if (names == null) return null;

        String computerName = names [0];
        String userName = names [1];
        String groupName = names [2];
        String macAddress = names [3];
        return (groupName != null ? groupName + "\\" : "") + (userName != null ? userName + "@" : "") + computerName + " [" + macAddress + "]";
    } catch (SocketTimeoutException e) {
        return null;
    } catch (SocketException e) {
        return null;
    } catch (Exception e) {
        LOG.log (WARNING, null, e);
        return null;
    } finally {
        if (netbios != null) netbios.close ();

    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/PacketLossFetcher.java" startline="18" endline="20">
public PacketLossFetcher (PingerRegistry pingerRegistry, ScannerConfig scannerConfig) {
    super (pingerRegistry, scannerConfig);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/UnixMACFetcher.java" startline="16" endline="21">
public UnixMACFetcher () {
    if (Platform.LINUX) arp = "arp -an ";
    else arp = "arp -n ";

}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/UnixMACFetcher.java" startline="23" endline="57">
public String resolveMAC (InetAddress address) {
    String ip = address.getHostAddress ();
    BufferedReader reader = null;
    try {
        Process process = Runtime.getRuntime ().exec (arp + ip);
        reader = new BufferedReader (new InputStreamReader (process.getInputStream ()));
        String line;
        while ((line = reader.readLine ()) != null) {
            if (line.contains (ip)) return extractMAC (line);

        }
        Enumeration < NetworkInterface > ifs = NetworkInterface.getNetworkInterfaces ();
        while (ifs.hasMoreElements ()) {
            NetworkInterface netif = ifs.nextElement ();
            if (netif.isUp () && ! netif.isVirtual () && ! netif.isLoopback ()) {
                Enumeration < InetAddress > addrs = netif.getInetAddresses ();
                while (addrs.hasMoreElements ()) {
                    InetAddress addr = addrs.nextElement ();
                    if (addr.equals (address)) return bytesToMAC (netif.getHardwareAddress ());

                }
            }
        }
        return null;
    } catch (Exception e) {
        return null;
    } finally {
        IOUtils.closeQuietly (reader);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/LastAliveTimeFetcher.java" startline="20" endline="23">
public String getId () {
    return null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/LastAliveTimeFetcher.java" startline="25" endline="28">
public Object scan (ScanningSubject subject) {
    return null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/IPFetcher.java" startline="19" endline="19">
public IPFetcher () {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/IPFetcher.java" startline="23" endline="25">
public String getId () {
    return ID;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/fetchers/IPFetcher.java" startline="27" endline="29">
public Object scan (ScanningSubject subject) {
    return new InetAddressHolder (subject.getAddress ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/CSVExporter.java" startline="21" endline="21">
public CSVExporter () {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/CSVExporter.java" startline="23" endline="25">
public String getId () {
    return "exporter.csv";
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/CSVExporter.java" startline="27" endline="29">
public String getFilenameExtension () {
    return "csv";
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/CSVExporter.java" startline="31" endline="40">
public void setFetchers (String [] fetcherNames) throws IOException {
    if (! append) {
        output.write (csvSafeString (fetcherNames [0]));
        for (int i = 1;
        i < fetcherNames.length; i ++) {
            output.write (DELIMETER);
            output.write (csvSafeString (fetcherNames [i]));
        }
        output.println ();
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/CSVExporter.java" startline="42" endline="50">
public void nextAddressResults (Object [] results) throws IOException {
    output.write (csvSafeString (results [0]));
    for (int i = 1;
    i < results.length; i ++) {
        Object result = results [i];
        output.write (DELIMETER);
        output.write (csvSafeString (result));
    }
    output.println ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/CSVExporter.java" startline="55" endline="59">
String csvSafeString (Object o) {
    if (o == null) return "";

    return o.toString ().replace (DELIMETER, DELIMETER_ESCAPED);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/SQLExporter.java" startline="21" endline="23">
public String getId () {
    return "exporter.sql";
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/SQLExporter.java" startline="25" endline="27">
public String getFilenameExtension () {
    return "sql";
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/SQLExporter.java" startline="29" endline="30">
public void setFetchers (String [] fetcherNames) throws IOException {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/SQLExporter.java" startline="32" endline="34">
public void nextAddressResults (Object [] results) throws IOException {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/ExporterRegistry.java" startline="27" endline="33">
public ExporterRegistry (List < Exporter > registeredExporters) {
    exporters = new LinkedHashMap < String, Exporter > ();
    for (Exporter exporter : registeredExporters) {
        exporters.put (exporter.getFilenameExtension (), exporter);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/ExporterRegistry.java" startline="38" endline="40">
public Iterator < Exporter > iterator () {
    return exporters.values ().iterator ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/ExporterRegistry.java" startline="47" endline="63">
public Exporter createExporter (String fileName) throws ExporterException {
    int extensionPos = fileName.lastIndexOf ('.') + 1;
    String extension = fileName.substring (extensionPos);
    Exporter prototype = exporters.get (extension);
    if (prototype == null) {
        throw new ExporterException ("exporter.unknown");
    }
    try {
        return (Exporter) prototype.clone ();
    } catch (CloneNotSupportedException e) {
        throw new RuntimeException (e);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/XMLExporter.java" startline="23" endline="23">
public XMLExporter () {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/XMLExporter.java" startline="28" endline="30">
public String getId () {
    return "exporter.xml";
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/XMLExporter.java" startline="32" endline="34">
public String getFilenameExtension () {
    return "xml";
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/XMLExporter.java" startline="37" endline="40">
public void shouldAppendTo (File file) {
    throw new ExporterException ("xml.noAppend");
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/XMLExporter.java" startline="43" endline="65">
public void start (OutputStream outputStream, String feederInfo) throws IOException {
    output = new PrintWriter (new OutputStreamWriter (outputStream, ENCODING));
    output.println ("<?xml version=\"1.0\" encoding=\"" + ENCODING + "\" standalone=\"yes\"?>");
    output.println ("<!-- This file has been generated by " + Version.getFullName () + " -->");
    output.println ("<!-- Visit the website at " + Version.WEBSITE + " -->");
    SimpleDateFormat sdf = new SimpleDateFormat ("yyyy-MM-dd hh:mm:ss");
    output.println ("<scanning_report time=\"" + sdf.format (new Date ()) + "\">");
    int colonPos = feederInfo.indexOf (':');
    String feederName = null;
    if (colonPos >= 0) {
        feederName = feederInfo.substring (0, colonPos);
        feederInfo = feederInfo.substring (colonPos + 1);
    }
    output.print ("\t<feeder" + (feederName != null ? " name=\"" + feederName.trim () + "\"" : "") + ">");
    output.print ("<![CDATA[" + feederInfo.trim () + "]]>");
    output.println ("</feeder>");
    output.println ("\t<hosts>");
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/XMLExporter.java" startline="68" endline="74">
public void end () throws IOException {
    output.println ("\t</hosts>");
    output.println ("</scanning_report>");
    if (output.checkError ()) {
        throw new IOException ();
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/XMLExporter.java" startline="76" endline="79">
public void setFetchers (String [] fetcherNames) throws IOException {
    ipFetcherIndex = IPListExporter.findFetcherById ("fetcher.ip", fetcherNames);
    this.fetcherNames = fetcherNames;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/XMLExporter.java" startline="81" endline="91">
public void nextAddressResults (Object [] results) throws IOException {
    output.println ("\t\t<host address=\"" + results [ipFetcherIndex] + "\">");
    for (int i = 0;
    i < results.length; i ++) {
        if (results [i] != null) {
            output.println ("\t\t\t<result name=\"" + fetcherNames [i] + "\"><![CDATA[" + results [i] + "]]></result>");
        }
    }
    output.println ("\t\t</host>");
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/ExportProcessor.java" startline="27" endline="31">
public ExportProcessor (Exporter exporter, File file, boolean append) {
    this.exporter = exporter;
    this.file = file;
    this.append = append;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/ExportProcessor.java" startline="38" endline="81">
public void process (ScanningResultList scanningResults, ScanningResultFilter filter) {
    FileOutputStream outputStream = null;
    try {
        if (append) {
            exporter.shouldAppendTo (file);
        }
        outputStream = new FileOutputStream (file, append);
        exporter.start (outputStream, scanningResults.getFeederInfo ());
        List < Fetcher > fetchers = scanningResults.getFetchers ();
        String [] fetcherNames = new String [fetchers.size ()];
        int i = 0;
        for (Fetcher fetcher : fetchers) {
            fetcherNames [i ++] = fetcher.getName ();
        }
        exporter.setFetchers (fetcherNames);
        int index = 0;
        for (ScanningResult scanningResult : scanningResults) {
            if (filter == null || filter.apply (index ++, scanningResult)) {
                exporter.nextAddressResults (scanningResult.getValues ().toArray ());
            }
        }
        exporter.end ();
    } catch (ExporterException e) {
        throw e;
    } catch (Exception e) {
        throw new ExporterException ("exporting failed", e);
    } finally {
        if (outputStream != null) {
            try {
                outputStream.close ();
            } catch (Exception ignore) {
            }
        }
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/ExporterException.java" startline="17" endline="19">
public ExporterException (String message) {
    super (message);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/ExporterException.java" startline="21" endline="24">
public ExporterException (String message, Throwable cause) {
    super (message);
    initCause (cause);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/AbstractExporter.java" startline="23" endline="25">
public String getName () {
    return Labels.getLabel (getId ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/AbstractExporter.java" startline="27" endline="29">
public void shouldAppendTo (File file) {
    this.append = true;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/AbstractExporter.java" startline="31" endline="33">
public void start (OutputStream outputStream, String feederInfo) throws IOException {
    output = new PrintWriter (new OutputStreamWriter (outputStream));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/AbstractExporter.java" startline="35" endline="39">
public void end () throws IOException {
    if (output.checkError ()) throw new IOException ();

}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/AbstractExporter.java" startline="41" endline="43">
public void nextAddressResults (Object [] results) throws IOException {
    nextAdressResults (results);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/AbstractExporter.java" startline="45" endline="46">
public void nextAdressResults (Object [] results) throws IOException {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/AbstractExporter.java" startline="48" endline="55">
public Exporter clone () {
    try {
        return (Exporter) super.clone ();
    } catch (CloneNotSupportedException e) {
        throw new RuntimeException (e);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/IPListExporter.java" startline="28" endline="28">
public IPListExporter () {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/IPListExporter.java" startline="30" endline="32">
public String getId () {
    return "exporter.ipList";
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/IPListExporter.java" startline="34" endline="36">
public String getFilenameExtension () {
    return "lst";
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/IPListExporter.java" startline="38" endline="41">
public void setFetchers (String [] fetcherNames) throws IOException {
    ipFetcherIndex = findFetcherById (IPFetcher.ID, fetcherNames);
    portsFetcherIndex = findFetcherById (PortsFetcher.ID, fetcherNames);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/IPListExporter.java" startline="51" endline="59">
static int findFetcherById (String fetcherId, String [] fetcherNames) {
    String fetcherName = Labels.getLabel (fetcherId);
    for (int i = 0;
    i < fetcherNames.length; i ++) {
        if (fetcherName.equals (fetcherNames [i])) {
            return i;
        }
    }
    throw new ExporterException ("fetcher.notFound");
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/IPListExporter.java" startline="61" endline="70">
public void nextAddressResults (Object [] results) throws IOException {
    String address = results [ipFetcherIndex].toString ();
    Object ports = results [portsFetcherIndex];
    if (ports != null && ports instanceof NumericRangeList) {
        for (PortIterator i = new PortIterator (ports.toString ());
        i.hasNext ();) {
            output.println (address + DELIMETER + i.next ());
        }
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/TXTExporter.java" startline="39" endline="39">
public TXTExporter () {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/TXTExporter.java" startline="41" endline="43">
public String getId () {
    return "exporter.txt";
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/TXTExporter.java" startline="45" endline="47">
public String getFilenameExtension () {
    return "txt";
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/TXTExporter.java" startline="49" endline="65">
public void start (OutputStream outputStream, String feederInfo) throws IOException {
    super.start (outputStream, feederInfo);
    if (! append) {
        output.print (Labels.getLabel ("exporter.txt.generated"));
        output.print (' ');
        output.println (Version.getFullName ());
        output.println (Version.WEBSITE);
        output.println ();
        output.print (Labels.getLabel ("exporter.txt.scanned"));
        output.print (' ');
        output.println (feederInfo);
        output.println (DateFormat.getDateTimeInstance ().format (new Date ()));
        output.println ();
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/TXTExporter.java" startline="67" endline="78">
public void setFetchers (String [] fetcherNames) throws IOException {
    padLengths = new int [fetcherNames.length];
    for (int i = 0;
    i < fetcherNames.length; i ++) {
        padLengths [i] = fetcherNames [i].length () * 3;
        if (! append) {
            output.write (pad (fetcherNames [i], padLengths [i]));
        }
    }
    if (! append) {
        output.println ();
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/TXTExporter.java" startline="80" endline="87">
public void nextAddressResults (Object [] results) throws IOException {
    output.write (pad (results [0], padLengths [0]));
    for (int i = 1;
    i < results.length; i ++) {
        Object result = results [i];
        output.write (pad (result, padLengths [i]));
    }
    output.println ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/TXTExporter.java" startline="93" endline="108">
String pad (Object o, int length) {
    if (length < 16) length = 16;

    String s;
    if (o == null) s = "";
    else s = o.toString ();

    if (s.length () >= length) {
        return s;
    }
    return s + "                                                                       ".substring (0, length - s.length ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/exporters/TXTExporter.java" startline="110" endline="179">
public List < ScanningResult > importResults (String fileName, AbstractFeederGUI feeder) throws IOException {
    List < ScanningResult > results = new ArrayList < ScanningResult > ();
    BufferedReader reader = null;
    try {
        reader = new BufferedReader (new FileReader (fileName));
        String startIP = null;
        String endIP = null;
        String lastLoadedIP = null;
        List < String > columns = emptyList ();
        int ipIndex = 0, pingIndex = 1, portsIndex = 3;
        String [] lookingFor = {Labels.getLabel ("exporter.txt.scanned"), Labels.getLabel (IPFetcher.ID)};
        int lookingForIndex = 0;
        String line;
        while ((line = reader.readLine ()) != null) {
            String [] sp;
            if (lookingForIndex < lookingFor.length) {
                sp = line.split ("\\s");
                if (lookingFor [lookingForIndex].equals (sp [0])) {
                    if (lookingForIndex == 0) {
                        startIP = sp [1];
                        endIP = sp [3];
                        lookingForIndex ++;
                    } else if (lookingForIndex == 1) {
                        sp = line.split ("\\s{2,}");
                        columns = asList (sp);
                        pingIndex = columns.indexOf (Labels.getLabel (PingFetcher.ID));
                        portsIndex = columns.indexOf (Labels.getLabel (PortsFetcher.ID));
                        lookingForIndex ++;
                    }

                }
                continue;
            }
            sp = line.split ("\\s{2,}");
            if (sp.length < columns.size ()) continue;

            InetAddress addr = InetAddress.getByName (sp [ipIndex]);
            lastLoadedIP = sp [ipIndex];
            ScanningResult r = new ScanningResult (addr, sp.length);
            if (portsIndex > 0 && sp [portsIndex].matches ("\\d.*")) r.setType (WITH_PORTS);
            else if (pingIndex > 0 && sp [pingIndex].matches ("\\d.*")) r.setType (ALIVE);
            else r.setType (DEAD);

            r.setValues (sp);
            results.add (r);
        }
        if (lastLoadedIP != null && ! lastLoadedIP.equals (endIP)) {
            InetAddress nextStartIP = increment (InetAddress.getByName (lastLoadedIP));
            startIP = nextStartIP.getHostAddress ();
        }
        feeder.unserialize (startIP, endIP);
        return results;
    } finally {
        closeQuietly (reader);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/ConfigModule.java" startline="10" endline="12">
Config getConfig () {
    return Config.getConfig ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/ConfigModule.java" startline="14" endline="16">
Labels getLabels () {
    return Labels.getInstance ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/ConfigModule.java" startline="18" endline="20">
public Preferences getPreferences () {
    return getConfig ().getPreferences ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/ConfigModule.java" startline="22" endline="24">
public ScannerConfig forScanner () {
    return getConfig ().forScanner ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/ConfigModule.java" startline="26" endline="28">
public OpenersConfig forOpeners () {
    return getConfig ().forOpeners ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/ConfigModule.java" startline="30" endline="32">
public FavoritesConfig forFavorites () {
    return getConfig ().forFavorites ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/ConfigModule.java" startline="34" endline="36">
public GUIConfig forGUI () {
    return getConfig ().forGUI ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/ScannerConfig.java" startline="39" endline="56">
ScannerConfig (Preferences preferences) {
    this.preferences = preferences;
    maxThreads = preferences.getInt ("maxThreads", Platform.CRIPPLED_WINDOWS ? 10 : 100);
    threadDelay = preferences.getInt ("threadDelay", 20);
    scanDeadHosts = preferences.getBoolean ("scanDeadHosts", false);
    selectedPinger = preferences.get ("selectedPinger", Platform.WINDOWS ? "pinger.windows" : "pinger.icmp");
    pingTimeout = preferences.getInt ("pingTimeout", 2000);
    pingCount = preferences.getInt ("pingCount", 3);
    skipBroadcastAddresses = preferences.getBoolean ("skipBroadcastAddresses", true);
    portTimeout = preferences.getInt ("portTimeout", 2000);
    adaptPortTimeout = preferences.getBoolean ("adaptPortTimeout", ! Platform.CRIPPLED_WINDOWS);
    minPortTimeout = preferences.getInt ("minPortTimeout", 100);
    portString = preferences.get ("portString", "");
    useRequestedPorts = preferences.getBoolean ("useRequestedPorts", true);
    notAvailableText = preferences.get ("notAvailableText", Labels.getLabel ("fetcher.value.notAvailable"));
    notScannedText = preferences.get ("notScannedText", Labels.getLabel ("fetcher.value.notScanned"));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/ScannerConfig.java" startline="61" endline="76">
public void store () {
    preferences.putInt ("maxThreads", maxThreads);
    preferences.putInt ("threadDelay", threadDelay);
    preferences.putBoolean ("scanDeadHosts", scanDeadHosts);
    preferences.put ("selectedPinger", selectedPinger);
    preferences.putInt ("pingTimeout", pingTimeout);
    preferences.putInt ("pingCount", pingCount);
    preferences.putBoolean ("skipBroadcastAddresses", skipBroadcastAddresses);
    preferences.putInt ("portTimeout", portTimeout);
    preferences.putBoolean ("adaptPortTimeout", adaptPortTimeout);
    preferences.putInt ("minPortTimeout", minPortTimeout);
    preferences.put ("portString", portString);
    preferences.putBoolean ("useRequestedPorts", useRequestedPorts);
    preferences.put ("notAvailableText", notAvailableText);
    preferences.put ("notScannedText", notScannedText);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/Labels.java" startline="40" endline="42">
Labels () {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/Labels.java" startline="44" endline="46">
public static Labels getInstance () {
    return instance;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/Labels.java" startline="53" endline="83">
public static void initialize (Locale locale) {
    if (instance != null && locale.equals (instance.locale)) {
        return;
    }
    instance = new Labels ();
    instance.locale = locale;
    InputStream labelsStream;
    try {
        labelsStream = Labels.class.getClassLoader ().getResourceAsStream ("messages.properties");
        if (labelsStream == null) {
            throw new MissingResourceException ("Labels not found!", Labels.class.getName (), "messages");
        }
        instance.labelsFallback = new PropertyResourceBundle (new InputStreamReader (labelsStream, "UTF-8"));
        labelsStream.close ();
    } catch (IOException e) {
        throw new MissingResourceException (e.toString (), Labels.class.getName (), "messages");
    }
    try {
        labelsStream = Labels.class.getClassLoader ().getResourceAsStream ("messages_" + locale.getLanguage () + ".properties");
        instance.labels = new PropertyResourceBundle (new InputStreamReader (labelsStream, "UTF-8"));
        labelsStream.close ();
    } catch (Exception e) {
        instance.labels = instance.labelsFallback;
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/Labels.java" startline="89" endline="92">
public InputStream getImageAsStream (String key) {
    String imagePath = get (key);
    return getClass ().getClassLoader ().getResourceAsStream (imagePath);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/Labels.java" startline="98" endline="107">
public String get (String key) {
    try {
        return labels.getString (key);
    } catch (MissingResourceException e) {
        String text = labelsFallback.getString (key);
        LOG.warning ("Used fallback label for " + key);
        return text;
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/Labels.java" startline="112" endline="114">
public static String getLabel (String key) {
    return getInstance ().get (key);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/FavoritesConfig.java" startline="19" endline="21">
public FavoritesConfig (Preferences preferences) {
    super (preferences, "favorites");
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/FavoritesConfig.java" startline="23" endline="30">
public void add (String key, FeederCreator feederCreator) {
    StringBuilder serializedFeeder = new StringBuilder (feederCreator.getFeederId ());
    serializedFeeder.append ('\t');
    for (String part : feederCreator.serialize ()) {
        serializedFeeder.append (part).append (":::");
    }
    super.add (key, serializedFeeder.toString ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/FavoritesConfig.java" startline="32" endline="36">
public String getFeederId (String key) {
    String value = get (key);
    int indexOf = value.indexOf ('\t');
    return value.substring (0, indexOf);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/FavoritesConfig.java" startline="38" endline="42">
public String [] getSerializedParts (String key) {
    String value = get (key);
    int indexOf = value.indexOf ('\t');
    return value.substring (indexOf + 1).split (":::");
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/GUIConfig.java" startline="41" endline="44">
GUIConfig (Preferences preferences) {
    this.preferences = preferences;
    load ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/GUIConfig.java" startline="46" endline="63">
private void load () {
    isFirstRun = preferences.getBoolean ("firstRun", true);
    lastRunVersion = preferences.get ("lastRunVersion", "Unknown");
    lastVersionCheck = preferences.getLong ("lastVersionCheck", System.currentTimeMillis ());
    activeFeeder = preferences.getInt ("activeFeeder", 0);
    displayMethod = DisplayMethod.valueOf (preferences.get ("displayMethod", DisplayMethod.ALL.toString ()));
    showScanStats = preferences.getBoolean ("showScanStats", true);
    askScanConfirmation = preferences.getBoolean ("askScanConfirmation", true);
    isMainWindowMaximized = preferences.getBoolean ("windowMaximized", false);
    mainWindowSize = new Point (preferences.getInt ("windowWidth", 600), preferences.getInt ("windowHeight", 360));
    detailsWindowSize = new Point (preferences.getInt ("detailsWidth", 300), preferences.getInt ("detailsHeight", 200));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/GUIConfig.java" startline="65" endline="82">
public void store () {
    preferences.putBoolean ("firstRun", isFirstRun);
    preferences.put ("lastRunVersion", lastRunVersion);
    preferences.putLong ("lastVersionCheck", lastVersionCheck);
    preferences.putInt ("activeFeeder", activeFeeder);
    preferences.put ("displayMethod", displayMethod.toString ());
    preferences.putBoolean ("showScanStats", showScanStats);
    preferences.putBoolean ("askScanConfirmation", askScanConfirmation);
    preferences.putBoolean ("windowMaximized", isMainWindowMaximized);
    if (! isMainWindowMaximized) {
        preferences.putInt ("windowWidth", mainWindowSize.x);
        preferences.putInt ("windowHeight", mainWindowSize.y);
    }
    preferences.putInt ("detailsWidth", detailsWindowSize.x);
    preferences.putInt ("detailsHeight", detailsWindowSize.y);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/GUIConfig.java" startline="84" endline="86">
public Point getMainWindowSize () {
    return mainWindowSize;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/GUIConfig.java" startline="88" endline="93">
public void setMainWindowSize (Point size, boolean isMaximized) {
    if (! isMaximized) {
        mainWindowSize = size;
    }
    isMainWindowMaximized = isMaximized;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/GUIConfig.java" startline="99" endline="112">
public int getColumnWidth (Fetcher fetcher) {
    int width = preferences.getInt ("columnWidth." + fetcher.getId (), 0);
    if (width == 0) {
        if (fetcher instanceof IPFetcher || fetcher instanceof HostnameFetcher) width = 140;
        else if (fetcher instanceof PingFetcher) width = 60;
        else width = 90;

    }
    return width;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/GUIConfig.java" startline="119" endline="121">
public void setColumnWidth (Fetcher fetcher, int width) {
    preferences.putInt ("columnWidth." + fetcher.getId (), width);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/Version.java" startline="46" endline="51">
public static String getVersion () {
    if (version == null) {
        loadVersionFromJar ();
    }
    return version;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/Version.java" startline="56" endline="61">
public static String getBuildDate () {
    if (buildDate == null) {
        loadVersionFromJar ();
    }
    return buildDate;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/Version.java" startline="63" endline="79">
private static void loadVersionFromJar () {
    try {
        String path = Version.class.getProtectionDomain ().getCodeSource ().getLocation ().toURI ().getPath ();
        if (path.endsWith (".jar") || path.endsWith (".exe")) {
            JarFile jarFile = new JarFile (path);
            Attributes attrs = jarFile.getManifest ().getMainAttributes ();
            version = attrs.getValue ("Version");
            buildDate = attrs.getValue ("Build-Date");
            return;
        }
    } catch (Exception e) {
        LoggerFactory.getLogger ().log (Level.WARNING, "Cannot obtain version", e);
    }
    version = "current";
    buildDate = "today";
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/Version.java" startline="81" endline="83">
public static String getFullName () {
    return NAME + " " + getVersion ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/Config.java" startline="34" endline="46">
Config () {
    preferences = Preferences.userRoot ().node ("ipscan");
    scannerConfig = new ScannerConfig (preferences);
    guiConfig = new GUIConfig (preferences);
    favoritesConfig = new FavoritesConfig (preferences);
    openersConfig = new OpenersConfig (preferences);
    language = preferences.get ("language", "system");
    uuid = preferences.get ("uuid", null);
    if (uuid == null) {
        uuid = UUID.randomUUID ().toString ();
        preferences.put ("uuid", uuid);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/Config.java" startline="51" endline="56">
public static Config getConfig () {
    if (globalConfig == null) {
        globalConfig = new Config ();
    }
    return globalConfig;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/Config.java" startline="58" endline="65">
public void store () {
    preferences.put ("language", language);
    preferences.put ("uuid", uuid);
    scannerConfig.store ();
    guiConfig.store ();
    favoritesConfig.store ();
    openersConfig.store ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/Config.java" startline="67" endline="69">
public Preferences getPreferences () {
    return preferences;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/Config.java" startline="74" endline="76">
public ScannerConfig forScanner () {
    return scannerConfig;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/Config.java" startline="81" endline="83">
FavoritesConfig forFavorites () {
    return favoritesConfig;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/Config.java" startline="88" endline="90">
public OpenersConfig forOpeners () {
    return openersConfig;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/Config.java" startline="95" endline="97">
public GUIConfig forGUI () {
    return guiConfig;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/Config.java" startline="99" endline="106">
public Locale getLocale () {
    if (language == null || "system".equals (language)) {
        return System.getProperty ("locale") == null ? Locale.getDefault () : new Locale (System.getProperty ("locale"));
    } else {
        return new Locale (language);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/Config.java" startline="108" endline="110">
public String getUUID () {
    return uuid;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/ComponentRegistry.java" startline="35" endline="37">
public Display getDisplay () {
    return Display.getDefault ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/ComponentRegistry.java" startline="39" endline="41">
public Shell mainShell () {
    return new Shell ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/ComponentRegistry.java" startline="43" endline="45">
public Menu mainMenu (Shell mainShell) {
    return new Menu (mainShell, SWT.BAR);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/ComponentRegistry.java" startline="47" endline="49">
public Composite feederArea (Shell mainShell) {
    return new Composite (mainShell, SWT.NONE);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/ComponentRegistry.java" startline="51" endline="53">
public Composite controlsArea (Shell mainShell) {
    return new Composite (mainShell, SWT.NONE);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/ComponentRegistry.java" startline="55" endline="57">
public Button startStopButton (@Named("controlsArea")
Composite controlsArea) {
    return new Button (controlsArea, SWT.NONE);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/ComponentRegistry.java" startline="59" endline="61">
public Combo feederSelectionCombo (@Named("controlsArea")
Composite controlsArea) {
    return new Combo (controlsArea, SWT.READ_ONLY);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/ComponentRegistry.java" startline="63" endline="65">
StateMachine stateMachine (SWTAwareStateMachine stateMachine) {
    return stateMachine;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/ComponentRegistry.java" startline="67" endline="69">
FeederRegistry < ? extends FeederCreator > feederRegistry (FeederGUIRegistry feederRegistry) {
    return feederRegistry;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/ComponentRegistry.java" startline="71" endline="73">
public List < AbstractFeederGUI > feeders (RangeFeederGUI f1, RandomFeederGUI f2, FileFeederGUI f3) {
    return Arrays.asList (f1, f2, f3);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/ComponentRegistry.java" startline="75" endline="77">
public List < Exporter > exporters (List < Class < ? extends Plugin > > plugins, TXTExporter e1, CSVExporter e2, XMLExporter e3, IPListExporter e4) {
    return addPlugins (Arrays.< Exporter > asList (e1, e2, e3, e4), Exporter.class, plugins);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/ComponentRegistry.java" startline="79" endline="84">
public List < Fetcher > fetchers (List < Class < ? extends Plugin > > plugins, IPFetcher f1, PingFetcher f2, PingTTLFetcher f3, HostnameFetcher f4, PortsFetcher f5, FilteredPortsFetcher f6, WebDetectFetcher f7, HTTPSenderFetcher f8, CommentFetcher f9, NetBIOSInfoFetcher f10, MACFetcher f11, MACVendorFetcher f12) {
    return addPlugins (Arrays.< Fetcher > asList (f1, f2, f3, f4, f5, f6, f7, f8, f9, f10, f11, f12), Fetcher.class, plugins);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/ComponentRegistry.java" startline="86" endline="88">
MACFetcher selectMacFetcher () {
    return Platform.WINDOWS ? new WinMACFetcher () : new UnixMACFetcher ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/ComponentRegistry.java" startline="91" endline="103">
private < T extends Plugin > List < T > addPlugins (List < T > original, Class < T > type, List < Class < ? extends Plugin > > classes) {
    List < T > result = new ArrayList < T > (original);
    for (Class clazz : classes) {
        try {
            if (type.isAssignableFrom (clazz)) result.add ((T) clazz.newInstance ());

        } catch (Exception e) {
            throw new RuntimeException ("Cannot instantiate plugin with default constructor: " + clazz.getName ());
        }
    }
    return result;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/Platform.java" startline="37" endline="39">
private static boolean between (double x, double min, double max) {
    return x >= min && x < max;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/CommandLineProcessor.java" startline="45" endline="48">
CommandLineProcessor (FeederRegistry < ? extends FeederCreator > feederCreators, ExporterRegistry exporters) {
    this.feederRegistry = feederCreators;
    this.exporters = exporters;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/CommandLineProcessor.java" startline="50" endline="56">
public CommandLineProcessor (FeederRegistry < ? extends FeederCreator > feederCreators, ExporterRegistry exporters, StateMachine stateMachine, ScanningResultList scanningResults) {
    this (feederCreators, exporters);
    this.stateMachine = stateMachine;
    this.scanningResults = scanningResults;
    if (stateMachine != null) stateMachine.addTransitionListener (this);

}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/CommandLineProcessor.java" startline="58" endline="60">
public boolean shouldAutoQuit () {
    return autoQuit;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/CommandLineProcessor.java" startline="62" endline="64">
public boolean shouldAutoStart () {
    return autoStart;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/CommandLineProcessor.java" startline="66" endline="110">
public void parse (String...args) {
    for (int i = 0;
    i < args.length; i ++) {
        String arg = args [i];
        if (arg.startsWith ("-f:")) {
            if (feederCreator != null) throw new IllegalArgumentException ("Only one feeder is allowed");

            feederCreator = findFeederCreator ("feeder." + arg.substring (3));
            feederArgs = new String [feederCreator.serializePartsLabels ().length];
            for (int j = 0;
            j < feederArgs.length; j ++) {
                feederArgs [j] = args [++ i];
                if (feederArgs [j].startsWith ("-")) throw new IllegalArgumentException (feederCreator.getFeederName () + " requires " + feederArgs.length + " arguments");

            }
        } else if (arg.equals ("-o")) {
            if (outputFilename != null) throw new IllegalArgumentException ("Only one exporter is allowed");

            outputFilename = args [++ i];
            if (outputFilename.startsWith ("-")) throw new IllegalArgumentException ("Output filename missing");

            exporter = findExporter (outputFilename);
            autoStart = true;
        } else if (arg.startsWith ("-")) {
            for (char option : arg.substring (1).toCharArray ()) {
                switch (option) {
                    case 's' :
                        autoStart = true;
                        break;
                    case 'q' :
                        autoQuit = true;
                        break;
                    case 'a' :
                        appendToFile = true;
                        break;
                    default :
                        throw new IllegalArgumentException ("Unknown option: " + option);
                }
            }
        } else throw new IllegalArgumentException ("Unknown argument: " + arg);

    }
    if (feederCreator == null) throw new IllegalArgumentException ("Feeder missing");

    feederCreator.unserialize (feederArgs);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/CommandLineProcessor.java" startline="113" endline="135">
public String toString () {
    StringBuilder usage = new StringBuilder ();
    usage.append ("Pass the following arguments:\n");
    usage.append ("[options] <feeder> <exporter>\n\n");
    usage.append ("Where <feeder> is one of:\n");
    for (FeederCreator creator : feederRegistry) {
        usage.append ("-f:").append (shortId (creator.getFeederId ()));
        for (String partLabel : creator.serializePartsLabels ()) {
            usage.append (" <").append (Labels.getLabel (partLabel)).append (">");
        }
        usage.append ('\n');
    }
    usage.append ("\n<exporter> is one of:\n");
    for (Exporter exporter : exporters) {
        usage.append ("-o filename.").append (shortId (exporter.getFilenameExtension ())).append ("\t\t").append (Labels.getLabel (exporter.getId ())).append ('\n');
    }
    usage.append ("\nAnd possible [options] are (grouping allowed):\n");
    usage.append ("-s\tstart scanning automatically\n");
    usage.append ("-q\tquit after exporting the results\n");
    usage.append ("-a\tappend to the file, do not overwrite\n");
    return usage.toString ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/CommandLineProcessor.java" startline="137" endline="139">
private String shortId (String longId) {
    return longId.substring (longId.lastIndexOf ('.') + 1);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/CommandLineProcessor.java" startline="141" endline="148">
private FeederCreator findFeederCreator (String feederId) {
    for (FeederCreator creator : feederRegistry) {
        if (feederId.equals (creator.getFeederId ())) {
            return creator;
        }
    }
    throw new IllegalArgumentException ("Feeder unknown: " + shortId (feederId));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/CommandLineProcessor.java" startline="150" endline="152">
private Exporter findExporter (String outputFilename) {
    return exporters.createExporter (outputFilename);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/CommandLineProcessor.java" startline="154" endline="175">
public void transitionTo (ScanningState state, Transition transition) {
    if (transition == Transition.INIT) {
        if (feederCreator != null) feederRegistry.select (feederCreator.getFeederId ());

        if (autoStart) {
            stateMachine.transitionToNext ();
        }
    } else if (transition == Transition.COMPLETE && state == ScanningState.IDLE && exporter != null) {
        ExportProcessor processor = new ExportProcessor (exporter, new File (outputFilename), appendToFile);
        processor.process (scanningResults, null);
        if (autoQuit) {
            System.err.println ("Saved results to " + outputFilename);
            System.exit (0);
        }
    }

}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/OpenersConfig.java" startline="21" endline="38">
public OpenersConfig (Preferences preferences) {
    super (preferences, "openers");
    if (size () == 0) {
        Labels labels = Labels.getInstance ();
        if (Platform.WINDOWS) add (labels.get ("opener.netbios"), new Opener ("\\\\${fetcher.ip}", false, null));

        add (labels.get ("opener.web"), new Opener ("http://${fetcher.hostname}/", false, null));
        add (labels.get ("opener.ftp"), new Opener ("ftp://${fetcher.hostname}/", false, null));
        add (labels.get ("opener.telnet"), new Opener ("telnet ${fetcher.ip}", true, null));
        add (labels.get ("opener.ping"), new Opener ("ping ${fetcher.ip}", true, null));
        add (labels.get ("opener.traceroute"), new Opener ((Platform.WINDOWS ? "tracert" : Platform.LINUX ? "tracepath" : "traceroute") + " ${fetcher.ip}", true, null));
        if (! Platform.WINDOWS) add (labels.get ("opener.ssh"), new Opener ("ssh ${fetcher.ip}", true, null));

        if (! Platform.WINDOWS) add (labels.get ("opener.whois"), new Opener ("whois ${fetcher.ip}", true, null));

        add (labels.get ("opener.geolocate"), new Opener (Version.IP_LOCATE_URL + "?ip=${fetcher.ip}", false, null));
        add (labels.get ("opener.email"), new Opener ("mailto:somebody@example.com?subject=${fetcher.ip} (${fetcher.hostname})", true, null));
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/OpenersConfig.java" startline="40" endline="42">
Object serializeValue (String value) {
    return new Opener (value);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/OpenersConfig.java" startline="44" endline="50">
public void add (String name, Object value) {
    if (value instanceof Opener) super.add (name, value);
    else throw new IllegalArgumentException ();

}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/OpenersConfig.java" startline="52" endline="54">
public Opener getOpener (String name) {
    return (Opener) namedList.get (name);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/OpenersConfig.java" startline="61" endline="72">
Opener (String serialized) {
    try {
        String [] parts = serialized.split ("@@@");
        execString = parts [0];
        inTerminal = parts [1].charAt (0) == '1';
        workingDir = parts.length >= 3 && parts [2].length () > 0 ? new File (parts [2]) : null;
    } catch (ArrayIndexOutOfBoundsException e) {
        LOG.fine ("Broken opener config read: " + serialized);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/OpenersConfig.java" startline="74" endline="78">
public Opener (String execString, boolean inTerminal, File workingDir) {
    this.execString = execString;
    this.inTerminal = inTerminal;
    this.workingDir = workingDir;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/OpenersConfig.java" startline="80" endline="82">
public String toString () {
    return execString + "@@@" + (inTerminal ? '1' : '0') + "@@@" + (workingDir != null ? workingDir.toString () : "");
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/NamedListConfig.java" startline="27" endline="31">
NamedListConfig (Preferences preferences, String preferenceName) {
    this.preferenceName = preferenceName;
    this.preferences = preferences;
    load ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/NamedListConfig.java" startline="36" endline="47">
public void load () {
    if (preferences == null) {
        return;
    }
    String [] namedListPrefs = preferences.get (preferenceName, "").split ("###");
    for (int i = 0;
    i < namedListPrefs.length; i += 2) {
        if (namedListPrefs [i].length () > 0) {
            namedList.put (namedListPrefs [i], serializeValue (namedListPrefs [i + 1]));
        }
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/NamedListConfig.java" startline="49" endline="51">
Object serializeValue (String value) {
    return value;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/NamedListConfig.java" startline="56" endline="65">
public void store () {
    StringBuilder sb = new StringBuilder (32);
    for (Map.Entry < String, Object > e : namedList.entrySet ()) {
        sb.append (e.getKey ()).append ("###").append (e.getValue ()).append ("###");
    }
    if (sb.length () > 3) {
        sb.delete (sb.length () - 3, sb.length ());
    }
    preferences.put (preferenceName, sb.toString ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/NamedListConfig.java" startline="71" endline="73">
public void add (String key, Object value) {
    namedList.put (key, value);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/NamedListConfig.java" startline="79" endline="82">
public String get (String key) {
    Object value = namedList.get (key);
    return value != null ? value.toString () : null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/NamedListConfig.java" startline="88" endline="90">
public String remove (String key) {
    return namedList.remove (key).toString ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/NamedListConfig.java" startline="95" endline="97">
public Iterator < String > iterator () {
    return namedList.keySet ().iterator ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/NamedListConfig.java" startline="99" endline="101">
public int size () {
    return namedList.size ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/NamedListConfig.java" startline="109" endline="116">
public void update (String [] keys) {
    Map < String, Object > newList = new LinkedHashMap < String, Object > ();
    for (String key : keys) {
        newList.put (key, namedList.get (key));
    }
    namedList = newList;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/LoggerFactory.java" startline="20" endline="24">
public static Logger getLogger () {
    Throwable t = new Throwable ();
    StackTraceElement directCaller = t.getStackTrace () [1];
    return Logger.getLogger (directCaller.getClassName ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/CommentsConfig.java" startline="27" endline="30">
public CommentsConfig (Preferences preferences) {
    this.preferences = preferences.node ("comments");
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/CommentsConfig.java" startline="32" endline="37">
public String getComment (InetAddress address, String mac) {
    String comment = null;
    if (mac != null) comment = preferences.get (mac, null);

    if (comment == null) comment = preferences.get (address.getHostAddress (), null);

    return comment;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/CommentsConfig.java" startline="39" endline="43">
public String getComment (ScanningResultList results, int resultIndex) {
    ScanningResult result = results.getResult (resultIndex);
    int macIndex = results.getFetcherIndex (MACFetcher.ID);
    return getComment (result.getAddress (), getMac (macIndex, result));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/CommentsConfig.java" startline="45" endline="49">
private String getMac (int macIndex, ScanningResult result) {
    if (macIndex < 0) return null;

    Object macValue = result.getValues ().get (macIndex);
    return macValue instanceof String ? (String) macValue : null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/config/CommentsConfig.java" startline="51" endline="68">
public void setComment (ScanningResultList results, int resultIndex, String comment) {
    ScanningResult result = results.getResult (resultIndex);
    int macIndex = results.getFetcherIndex (MACFetcher.ID);
    String key = result.getAddress ().getHostAddress ();
    if (macIndex >= 0) {
        preferences.remove (key);
        String mac = getMac (macIndex, result);
        if (mac != null) key = mac;

    }
    if (comment == null || comment.length () == 0) preferences.remove (key);
    else preferences.put (key, comment);

}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/Main.java" startline="47" endline="106">
public static void main (String...args) {
    try {
        long startTime = System.currentTimeMillis ();
        initSystemProperties ();
        Display.setAppName (Version.NAME);
        Display display = Display.getDefault ();
        LOG.finer ("SWT initialized after " + (System.currentTimeMillis () - startTime));
        Locale locale = Config.getConfig ().getLocale ();
        Labels.initialize (locale);
        LOG.finer ("Labels and Config initialized after " + (System.currentTimeMillis () - startTime));
        MainComponent mainComponent = DaggerMainComponent.create ();
        if (Platform.MAC_OS) mainComponent.createMacApplicationMenu ();

        LOG.finer ("Components initialized after " + (System.currentTimeMillis () - startTime));
        processCommandLine (args, mainComponent);
        MainWindow mainWindow = mainComponent.createMainWindow ();
        LOG.fine ("Startup time: " + (System.currentTimeMillis () - startTime));
        while (! mainWindow.isDisposed ()) {
            try {
                if (! display.readAndDispatch ()) display.sleep ();

            } catch (Throwable e) {
                if (e instanceof SWTException && e.getCause () != null) e = e.getCause ();

                String localizedMessage = getLocalizedMessage (e);
                Shell parent = display.getActiveShell ();
                showMessage (parent != null ? parent : mainWindow.getShell (), e instanceof UserErrorException ? SWT.ICON_WARNING : SWT.ICON_ERROR, Labels.getLabel (e instanceof UserErrorException ? "text.userError" : "text.error"), localizedMessage);
            }
        }
        Config.getConfig ().store ();
        display.dispose ();
    } catch (UnsatisfiedLinkError e) {
        JOptionPane.showMessageDialog (null, "Failed to load native code. Probably you are using a binary built for wrong OS or CPU. If 64-bit binary doesn't work for you, try 32-bit version, or vice versa.");
        e.printStackTrace ();
        new GoogleAnalytics ().report (e);
    } catch (Throwable e) {
        JOptionPane.showMessageDialog (null, e + "\nPlease submit a bug report mentioning your OS and what were you doing.");
        e.printStackTrace ();
        new GoogleAnalytics ().report (e);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/Main.java" startline="108" endline="113">
private static void showMessage (Shell parent, int flags, String title, String localizedMessage) {
    MessageBox messageBox = new MessageBox (parent, SWT.OK | SWT.SHEET | flags);
    messageBox.setText (title);
    messageBox.setMessage (localizedMessage);
    messageBox.open ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/Main.java" startline="115" endline="121">
private static void initSystemProperties () {
    System.setProperty ("java.net.preferIPv4Stack", "true");
    Security.setProperty ("networkaddress.cache.ttl", "0");
    Security.setProperty ("networkaddress.cache.negative.ttl", "0");
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/Main.java" startline="123" endline="134">
private static void processCommandLine (String [] args, MainComponent mainComponent) {
    if (args.length != 0) {
        CommandLineProcessor cli = mainComponent.createCommandLineProcessor ();
        try {
            cli.parse (args);
        } catch (Exception e) {
            showMessageToConsole (e.getMessage () + "\n\n" + cli);
            System.exit (1);
        }
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/Main.java" startline="136" endline="146">
private static void showMessageToConsole (String usageText) {
    if (System.console () != null) {
        System.err.println (usageText);
    } else {
        InfoDialog dialog = new InfoDialog (Version.NAME, Labels.getLabel ("title.commandline"));
        dialog.setMessage (usageText);
        dialog.open ();
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/Main.java" startline="152" endline="177">
static String getLocalizedMessage (Throwable e) {
    String localizedMessage;
    try {
        if (e instanceof UserErrorException) {
            localizedMessage = e.getMessage ();
        } else {
            String exceptionClassName = e.getClass ().getSimpleName ();
            String originalMessage = e.getMessage ();
            localizedMessage = Labels.getLabel ("exception." + exceptionClassName + (originalMessage != null ? "." + originalMessage : ""));
        }
        if (e.getCause () != null) {
            localizedMessage += "\n\n" + e.getCause ().toString ();
        }
        LOG.log (Level.FINE, "error", e);
    } catch (Exception e2) {
        localizedMessage = e.toString ();
        LOG.log (Level.SEVERE, "unexpected error", e);
    }
    return localizedMessage;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/PreferencesDialog.java" startline="72" endline="77">
public PreferencesDialog (PingerRegistry pingerRegistry, Config globalConfig, ScannerConfig scannerConfig, GUIConfig guiConfig) {
    this.pingerRegistry = pingerRegistry;
    this.globalConfig = globalConfig;
    this.scannerConfig = scannerConfig;
    this.guiConfig = guiConfig;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/PreferencesDialog.java" startline="79" endline="81">
public void open () {
    openTab (0);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/PreferencesDialog.java" startline="87" endline="100">
public void openTab (int tabIndex) {
    createShell ();
    loadPreferences ();
    tabFolder.setSelection (tabIndex);
    if (tabFolder.getItem (tabIndex) == portsTabItem) {
        portsText.forceFocus ();
    }
    super.open ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/PreferencesDialog.java" startline="103" endline="131">
protected void populateShell () {
    shell.setText (Labels.getLabel ("title.preferences"));
    shell.setLayout (LayoutHelper.formLayout (10, 10, 4));
    createTabFolder ();
    okButton = new Button (shell, SWT.NONE);
    okButton.setText (Labels.getLabel ("button.OK"));
    cancelButton = new Button (shell, SWT.NONE);
    cancelButton.setText (Labels.getLabel ("button.cancel"));
    positionButtonsInFormLayout (okButton, cancelButton, tabFolder);
    shell.pack ();
    okButton.setFocus ();
    okButton.addSelectionListener (new SelectionAdapter () {
        public void widgetSelected (SelectionEvent e) {
            savePreferences ();
            shell.close ();
        }}

    );
    cancelButton.addSelectionListener (new SelectionAdapter () {
        public void widgetSelected (SelectionEvent e) {
            shell.close ();
        }}

    );
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/PreferencesDialog.java" startline="121" endline="124">
public void widgetSelected (SelectionEvent e) {
    savePreferences ();
    shell.close ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/PreferencesDialog.java" startline="127" endline="129">
public void widgetSelected (SelectionEvent e) {
    shell.close ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/PreferencesDialog.java" startline="136" endline="157">
private void createTabFolder () {
    tabFolder = new TabFolder (shell, SWT.NONE);
    createScanningTab ();
    TabItem tabItem = new TabItem (tabFolder, SWT.NONE);
    tabItem.setText (Labels.getLabel ("title.preferences.scanning"));
    tabItem.setControl (scanningTab);
    scanningTabItem = tabItem;
    createPortsTab ();
    tabItem = new TabItem (tabFolder, SWT.NONE);
    tabItem.setText (Labels.getLabel ("title.preferences.ports"));
    tabItem.setControl (portsTab);
    portsTabItem = tabItem;
    createDisplayTab ();
    tabItem = new TabItem (tabFolder, SWT.NONE);
    tabItem.setText (Labels.getLabel ("title.preferences.display"));
    tabItem.setControl (displayTab);
    tabFolder.pack ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/PreferencesDialog.java" startline="162" endline="228">
private void createScanningTab () {
    RowLayout rowLayout = createRowLayout ();
    scanningTab = new Composite (tabFolder, SWT.NONE);
    scanningTab.setLayout (rowLayout);
    GridLayout groupLayout = new GridLayout ();
    groupLayout.numColumns = 2;
    Group threadsGroup = new Group (scanningTab, SWT.NONE);
    threadsGroup.setText (Labels.getLabel ("preferences.threads"));
    threadsGroup.setLayout (groupLayout);
    GridData gridData = new GridData (80, SWT.DEFAULT);
    Label label;
    label = new Label (threadsGroup, SWT.NONE);
    label.setText (Labels.getLabel ("preferences.threads.delay"));
    threadDelayText = new Text (threadsGroup, SWT.BORDER);
    threadDelayText.setLayoutData (gridData);
    label = new Label (threadsGroup, SWT.NONE);
    label.setText (Labels.getLabel ("preferences.threads.maxThreads"));
    maxThreadsText = new Text (threadsGroup, SWT.BORDER);
    maxThreadsText.setLayoutData (gridData);
    Group pingingGroup = new Group (scanningTab, SWT.NONE);
    pingingGroup.setLayout (groupLayout);
    pingingGroup.setText (Labels.getLabel ("preferences.pinging"));
    label = new Label (pingingGroup, SWT.NONE);
    label.setText (Labels.getLabel ("preferences.pinging.type"));
    pingersCombo = new Combo (pingingGroup, SWT.DROP_DOWN | SWT.READ_ONLY);
    pingersCombo.setLayoutData (gridData);
    String [] pingerNames = pingerRegistry.getRegisteredNames ();
    for (int i = 0;
    i < pingerNames.length; i ++) {
        pingersCombo.add (Labels.getLabel (pingerNames [i]));
        pingersCombo.setData (Integer.toString (i), pingerNames [i]);
    }
    pingersCombo.select (0);
    label = new Label (pingingGroup, SWT.NONE);
    label.setText (Labels.getLabel ("preferences.pinging.count"));
    pingingCountText = new Text (pingingGroup, SWT.BORDER);
    pingingCountText.setLayoutData (gridData);
    label = new Label (pingingGroup, SWT.NONE);
    label.setText (Labels.getLabel ("preferences.pinging.timeout"));
    pingingTimeoutText = new Text (pingingGroup, SWT.BORDER);
    pingingTimeoutText.setLayoutData (gridData);
    GridData gridDataWithSpan = new GridData ();
    gridDataWithSpan.horizontalSpan = 2;
    deadHostsCheckbox = new Button (pingingGroup, SWT.CHECK);
    deadHostsCheckbox.setText (Labels.getLabel ("preferences.pinging.deadHosts"));
    deadHostsCheckbox.setLayoutData (gridDataWithSpan);
    Group skippingGroup = new Group (scanningTab, SWT.NONE);
    skippingGroup.setLayout (groupLayout);
    skippingGroup.setText (Labels.getLabel ("preferences.skipping"));
    skipBroadcastsCheckbox = new Button (skippingGroup, SWT.CHECK);
    skipBroadcastsCheckbox.setText (Labels.getLabel ("preferences.skipping.broadcast"));
    GridData gridDataWithSpan2 = new GridData ();
    gridDataWithSpan2.horizontalSpan = 2;
    skipBroadcastsCheckbox.setLayoutData (gridDataWithSpan2);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/PreferencesDialog.java" startline="233" endline="300">
private void createDisplayTab () {
    RowLayout rowLayout = createRowLayout ();
    displayTab = new Composite (tabFolder, SWT.NONE);
    displayTab.setLayout (rowLayout);
    GridLayout groupLayout = new GridLayout ();
    groupLayout.numColumns = 1;
    Group listGroup = new Group (displayTab, SWT.NONE);
    listGroup.setText (Labels.getLabel ("preferences.display.list"));
    listGroup.setLayout (groupLayout);
    listGroup.setLayoutData (new RowData (260, SWT.DEFAULT));
    displayMethod = new Button [DisplayMethod.values ().length];
    Button allRadio = new Button (listGroup, SWT.RADIO);
    allRadio.setText (Labels.getLabel ("preferences.display.list" + '.' + DisplayMethod.ALL));
    displayMethod [DisplayMethod.ALL.ordinal ()] = allRadio;
    Button aliveRadio = new Button (listGroup, SWT.RADIO);
    aliveRadio.setText (Labels.getLabel ("preferences.display.list" + '.' + DisplayMethod.ALIVE));
    displayMethod [DisplayMethod.ALIVE.ordinal ()] = aliveRadio;
    Button portsRadio = new Button (listGroup, SWT.RADIO);
    portsRadio.setText (Labels.getLabel ("preferences.display.list" + '.' + DisplayMethod.PORTS));
    displayMethod [DisplayMethod.PORTS.ordinal ()] = portsRadio;
    groupLayout = new GridLayout ();
    groupLayout.numColumns = 2;
    Group labelsGroup = new Group (displayTab, SWT.NONE);
    labelsGroup.setText (Labels.getLabel ("preferences.display.labels"));
    labelsGroup.setLayout (groupLayout);
    GridData gridData = new GridData ();
    gridData.widthHint = 50;
    Label label = new Label (labelsGroup, SWT.NONE);
    label.setText (Labels.getLabel ("preferences.display.labels.notAvailable"));
    notAvailableText = new Text (labelsGroup, SWT.BORDER);
    notAvailableText.setLayoutData (gridData);
    label = new Label (labelsGroup, SWT.NONE);
    label.setText (Labels.getLabel ("preferences.display.labels.notScanned"));
    notScannedText = new Text (labelsGroup, SWT.BORDER);
    notScannedText.setLayoutData (gridData);
    groupLayout = new GridLayout ();
    groupLayout.numColumns = 1;
    Group showStatsGroup = new Group (displayTab, SWT.NONE);
    showStatsGroup.setLayout (groupLayout);
    showStatsGroup.setText (Labels.getLabel ("preferences.display.confirmation"));
    askConfirmationCheckbox = new Button (showStatsGroup, SWT.CHECK);
    askConfirmationCheckbox.setText (Labels.getLabel ("preferences.display.confirmation.newScan"));
    showInfoCheckbox = new Button (showStatsGroup, SWT.CHECK);
    showInfoCheckbox.setText (Labels.getLabel ("preferences.display.confirmation.showInfo"));
    groupLayout = new GridLayout ();
    groupLayout.numColumns = 2;
    Group languageGroup = new Group (displayTab, SWT.NONE);
    languageGroup.setLayout (groupLayout);
    languageGroup.setText (Labels.getLabel ("preferences.language"));
    languageCombo = new Combo (languageGroup, SWT.DROP_DOWN | SWT.READ_ONLY);
    for (String language : languages) {
        languageCombo.add (Labels.getLabel ("language." + language));
    }
    languageCombo.select (0);
    label = new Label (languageGroup, SWT.NONE);
    label.setText (Labels.getLabel ("preferences.language.someIncomplete"));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/PreferencesDialog.java" startline="305" endline="358">
private void createPortsTab () {
    RowLayout rowLayout = createRowLayout ();
    portsTab = new Composite (tabFolder, SWT.NONE);
    portsTab.setLayout (rowLayout);
    GridLayout groupLayout = new GridLayout ();
    groupLayout.numColumns = 2;
    Group timingGroup = new Group (portsTab, SWT.NONE);
    timingGroup.setText (Labels.getLabel ("preferences.ports.timing"));
    timingGroup.setLayout (groupLayout);
    GridData gridData = new GridData ();
    gridData.widthHint = 50;
    Label label = new Label (timingGroup, SWT.NONE);
    label.setText (Labels.getLabel ("preferences.ports.timing.timeout"));
    portTimeoutText = new Text (timingGroup, SWT.BORDER);
    portTimeoutText.setLayoutData (gridData);
    GridData gridData1 = new GridData ();
    gridData1.horizontalSpan = 2;
    adaptTimeoutCheckbox = new Button (timingGroup, SWT.CHECK);
    adaptTimeoutCheckbox.setText (Labels.getLabel ("preferences.ports.timing.adaptTimeout"));
    adaptTimeoutCheckbox.setLayoutData (gridData1);
    adaptTimeoutCheckbox.addListener (SWT.Selection, new Listener () {
        public void handleEvent (Event event) {
            minPortTimeoutText.setEnabled (adaptTimeoutCheckbox.getSelection ());
        }}

    );
    label = new Label (timingGroup, SWT.NONE);
    label.setText (Labels.getLabel ("preferences.ports.timing.minTimeout"));
    minPortTimeoutText = new Text (timingGroup, SWT.BORDER);
    minPortTimeoutText.setLayoutData (gridData);
    RowLayout portsLayout = new RowLayout (SWT.VERTICAL);
    portsLayout.fill = true;
    portsLayout.marginHeight = 2;
    portsLayout.marginWidth = 2;
    Group portsGroup = new Group (portsTab, SWT.NONE);
    portsGroup.setText (Labels.getLabel ("preferences.ports.ports"));
    portsGroup.setLayout (portsLayout);
    label = new Label (portsGroup, SWT.WRAP);
    label.setText (Labels.getLabel ("preferences.ports.portsDescription"));
    portsText = new Text (portsGroup, SWT.MULTI | SWT.BORDER | SWT.V_SCROLL);
    portsText.setLayoutData (new RowData (SWT.DEFAULT, 60));
    portsText.addKeyListener (new PortsTextValidationListener ());
    addRequestedPortsCheckbox = new Button (portsGroup, SWT.CHECK);
    addRequestedPortsCheckbox.setText (Labels.getLabel ("preferences.ports.addRequested"));
    addRequestedPortsCheckbox.setToolTipText (Labels.getLabel ("preferences.ports.addRequested.info"));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/PreferencesDialog.java" startline="330" endline="332">
public void handleEvent (Event event) {
    minPortTimeoutText.setEnabled (adaptTimeoutCheckbox.getSelection ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/PreferencesDialog.java" startline="363" endline="371">
private RowLayout createRowLayout () {
    RowLayout rowLayout = new RowLayout ();
    rowLayout.type = org.eclipse.swt.SWT.VERTICAL;
    rowLayout.spacing = 9;
    rowLayout.marginHeight = 9;
    rowLayout.marginWidth = 11;
    rowLayout.fill = true;
    return rowLayout;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/PreferencesDialog.java" startline="373" endline="403">
private void loadPreferences () {
    pingerRegistry.checkSelectedPinger ();
    maxThreadsText.setText (Integer.toString (scannerConfig.maxThreads));
    threadDelayText.setText (Integer.toString (scannerConfig.threadDelay));
    String [] pingerNames = pingerRegistry.getRegisteredNames ();
    for (int i = 0;
    i < pingerNames.length; i ++) {
        if (scannerConfig.selectedPinger.equals (pingerNames [i])) {
            pingersCombo.select (i);
        }
    }
    pingingCountText.setText (Integer.toString (scannerConfig.pingCount));
    pingingTimeoutText.setText (Integer.toString (scannerConfig.pingTimeout));
    deadHostsCheckbox.setSelection (scannerConfig.scanDeadHosts);
    skipBroadcastsCheckbox.setSelection (scannerConfig.skipBroadcastAddresses);
    portTimeoutText.setText (Integer.toString (scannerConfig.portTimeout));
    adaptTimeoutCheckbox.setSelection (scannerConfig.adaptPortTimeout);
    minPortTimeoutText.setText (Integer.toString (scannerConfig.minPortTimeout));
    minPortTimeoutText.setEnabled (scannerConfig.adaptPortTimeout);
    portsText.setText (scannerConfig.portString);
    addRequestedPortsCheckbox.setSelection (scannerConfig.useRequestedPorts);
    notAvailableText.setText (scannerConfig.notAvailableText);
    notScannedText.setText (scannerConfig.notScannedText);
    displayMethod [guiConfig.displayMethod.ordinal ()].setSelection (true);
    showInfoCheckbox.setSelection (guiConfig.showScanStats);
    askConfirmationCheckbox.setSelection (guiConfig.askScanConfirmation);
    for (int i = 0;
    i < languages.length; i ++) {
        if (globalConfig.language.equals (languages [i])) {
            languageCombo.select (i);
        }
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/PreferencesDialog.java" startline="405" endline="449">
private void savePreferences () {
    try {
        new PortIterator (portsText.getText ());
    } catch (Exception e) {
        tabFolder.setSelection (portsTabItem);
        portsText.forceFocus ();
        throw new FetcherException ("unparseablePortString", e);
    }
    scannerConfig.selectedPinger = (String) pingersCombo.getData (Integer.toString (pingersCombo.getSelectionIndex ()));
    if (! pingerRegistry.checkSelectedPinger ()) {
        tabFolder.setSelection (scanningTabItem);
        pingersCombo.forceFocus ();
        throw new FetcherException ("unsupportedPinger");
    }
    scannerConfig.maxThreads = parseIntValue (maxThreadsText);
    scannerConfig.threadDelay = parseIntValue (threadDelayText);
    scannerConfig.pingCount = parseIntValue (pingingCountText);
    scannerConfig.pingTimeout = parseIntValue (pingingTimeoutText);
    scannerConfig.scanDeadHosts = deadHostsCheckbox.getSelection ();
    scannerConfig.skipBroadcastAddresses = skipBroadcastsCheckbox.getSelection ();
    scannerConfig.portTimeout = parseIntValue (portTimeoutText);
    scannerConfig.adaptPortTimeout = adaptTimeoutCheckbox.getSelection ();
    scannerConfig.minPortTimeout = parseIntValue (minPortTimeoutText);
    scannerConfig.portString = portsText.getText ();
    scannerConfig.useRequestedPorts = addRequestedPortsCheckbox.getSelection ();
    scannerConfig.notAvailableText = notAvailableText.getText ();
    scannerConfig.notScannedText = notScannedText.getText ();
    for (int i = 0;
    i < displayMethod.length; i ++) {
        if (displayMethod [i].getSelection ()) guiConfig.displayMethod = DisplayMethod.values () [i];

    }
    guiConfig.showScanStats = showInfoCheckbox.getSelection ();
    guiConfig.askScanConfirmation = askConfirmationCheckbox.getSelection ();
    String newLanguage = languages [languageCombo.getSelectionIndex ()];
    if (! newLanguage.equals (globalConfig.language)) {
        globalConfig.language = newLanguage;
        MessageBox msgBox = new MessageBox (shell);
        msgBox.setMessage (Labels.getLabel ("preferences.language.needsRestart"));
        msgBox.open ();
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/PreferencesDialog.java" startline="454" endline="462">
private static int parseIntValue (Text text) {
    try {
        return Integer.parseInt (text.getText ());
    } catch (NumberFormatException e) {
        text.forceFocus ();
        throw e;
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/PreferencesDialog.java" startline="465" endline="492">
public void keyPressed (KeyEvent e) {
    Text portsText = (Text) e.getSource ();
    if (e.keyCode == SWT.TAB) {
        portsText.getShell ().traverse (SWT.TRAVERSE_TAB_NEXT);
        e.doit = false;
        return;
    } else if (e.keyCode == SWT.CR) {
        if ((e.stateMask & SWT.MOD1) > 0) {
            e.stateMask = 0;
        } else {
            portsText.getShell ().traverse (SWT.TRAVERSE_RETURN);
            e.doit = false;
            return;
        }
    } else if (Character.isISOControl (e.character)) {
        return;
    }

    e.doit = validateChar (e.character, portsText.getText (), portsText.getCaretPosition ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/PreferencesDialog.java" startline="494" endline="509">
boolean validateChar (char c, String text, int caretPos) {
    char pc = 0;
    for (int i = caretPos - 1;
    i >= 0; i --) {
        pc = text.charAt (i);
        if (! Character.isWhitespace (pc)) break;

    }
    boolean isCurDigit = c >= '0' && c <= '9';
    boolean isPrevDigit = pc >= '0' && pc <= '9';
    return isPrevDigit && (isCurDigit || c == '-' || c == ',') || isCurDigit && (pc == '-' || pc == ',' || pc == 0) || Character.isWhitespace (c) && pc == ',';
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/PreferencesDialog.java" startline="511" endline="512">
public void keyReleased (KeyEvent e) {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/MainWindow.java" startline="59" endline="93">
public MainWindow (Shell shell, GUIConfig guiConfig,@Named("feederArea")
Composite feederArea,@Named("controlsArea")
Composite controlsArea,@Named("feederSelectionCombo")
Combo feederSelectionCombo,@Named("startStopButton")
Button startStopButton, StartStopScanningAction startStopScanningAction, ResultTable resultTable, StatusBar statusBar, ResultsContextMenu resultsContextMenu, FeederGUIRegistry feederGUIRegistry, final StateMachine stateMachine, ToolsActions.Preferences preferencesListener, ToolsActions.ChooseFetchers chooseFetchersListener, MainMenu menuBar, Startup startup) {
    this.shell = shell;
    this.guiConfig = guiConfig;
    this.statusBar = statusBar;
    initShell (shell);
    initFeederArea (feederArea, feederGUIRegistry);
    initControlsArea (controlsArea, feederSelectionCombo, startStopButton, startStopScanningAction, preferencesListener, chooseFetchersListener);
    initTableAndStatusBar (resultTable, resultsContextMenu, statusBar);
    shell.setSize (guiConfig.getMainWindowSize ());
    shell.open ();
    if (guiConfig.isMainWindowMaximized) {
        shell.setMaximized (true);
    }
    startup.onStart ();
    stateMachine.addTransitionListener (new EnablerDisabler ());
    Display.getCurrent ().asyncExec (new Runnable () {
        public void run () {
            stateMachine.init ();
        }}

    );
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/MainWindow.java" startline="88" endline="91">
public void run () {
    stateMachine.init ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/MainWindow.java" startline="98" endline="112">
private void initShell (final Shell shell) {
    FormLayout formLayout = new FormLayout ();
    shell.setLayout (formLayout);
    Image image = new Image (shell.getDisplay (), Labels.getInstance ().getImageAsStream ("icon"));
    shell.setImage (image);
    shell.addListener (SWT.Close, new Listener () {
        public void handleEvent (Event event) {
            guiConfig.setMainWindowSize (shell.getSize (), shell.getMaximized ());
        }}

    );
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/MainWindow.java" startline="107" endline="110">
public void handleEvent (Event event) {
    guiConfig.setMainWindowSize (shell.getSize (), shell.getMaximized ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/MainWindow.java" startline="117" endline="119">
public Shell getShell () {
    return shell;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/MainWindow.java" startline="124" endline="126">
public boolean isDisposed () {
    return shell.isDisposed ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/MainWindow.java" startline="131" endline="134">
private void initTableAndStatusBar (ResultTable resultTable, Menu resultsContextMenu, StatusBar statusBar) {
    resultTable.setLayoutData (formData (new FormAttachment (0), new FormAttachment (100), new FormAttachment (feederArea), new FormAttachment (statusBar.getComposite ())));
    resultTable.setMenu (resultsContextMenu);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/MainWindow.java" startline="136" endline="141">
private void initFeederArea (Composite feederArea, FeederGUIRegistry feederRegistry) {
    this.feederArea = feederArea;
    feederArea.setLayoutData (formData (new FormAttachment (0), null, new FormAttachment (0), null));
    this.feederRegistry = feederRegistry;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/MainWindow.java" startline="146" endline="182">
private void initControlsArea (final Composite controlsArea, final Combo feederSelectionCombo, final Button startStopButton, final StartStopScanningAction startStopScanningAction, final ToolsActions.Preferences preferencesListener, final ToolsActions.ChooseFetchers chooseFetchersListsner) {
    controlsArea.setLayoutData (formData (new FormAttachment (feederArea), null, new FormAttachment (0), new FormAttachment (feederArea, 0, SWT.BOTTOM)));
    this.startStopButton = startStopButton;
    shell.setDefaultButton (startStopButton);
    startStopButton.addSelectionListener (startStopScanningAction);
    startStopButton.setLayoutData (new GridData (GridData.FILL_HORIZONTAL));
    this.feederSelectionCombo = feederSelectionCombo;
    feederSelectionCombo.pack ();
    IPFeederSelectionListener feederSelectionListener = new IPFeederSelectionListener ();
    feederSelectionCombo.addSelectionListener (feederSelectionListener);
    feederSelectionCombo.select (guiConfig.activeFeeder);
    feederSelectionCombo.setToolTipText (Labels.getLabel ("combobox.feeder.tooltip"));
    controlsArea.setTabList (new Control [] {startStopButton, feederSelectionCombo});
    prefsButton = new ToolBar (controlsArea, SWT.FLAT);
    prefsButton.setCursor (prefsButton.getDisplay ().getSystemCursor (SWT.CURSOR_HAND));
    ToolItem item = new ToolItem (prefsButton, SWT.PUSH);
    item.setImage (new Image (null, Labels.getInstance ().getImageAsStream ("button.preferences.img")));
    item.setToolTipText (Labels.getLabel ("title.preferences"));
    item.addListener (SWT.Selection, preferencesListener);
    fetchersButton = new ToolBar (controlsArea, SWT.FLAT);
    fetchersButton.setCursor (fetchersButton.getDisplay ().getSystemCursor (SWT.CURSOR_HAND));
    item = new ToolItem (fetchersButton, SWT.PUSH);
    item.setImage (new Image (null, Labels.getInstance ().getImageAsStream ("button.fetchers.img")));
    item.setToolTipText (Labels.getLabel ("title.fetchers.select"));
    item.addListener (SWT.Selection, chooseFetchersListsner);
    feederSelectionListener.widgetSelected (null);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/MainWindow.java" startline="184" endline="200">
private void relayoutControls () {
    boolean twoRowToolbar = feederRegistry.current ().getSize ().y > startStopButton.getSize ().y * 1.5;
    if (twoRowToolbar) {
        GridLayout layout = new GridLayout (2, false);
        layout.marginTop = - 2;
        layout.marginBottom = 0;
        layout.verticalSpacing = 3;
        startStopButton.getParent ().setLayout (layout);
        prefsButton.moveAbove (startStopButton);
    } else {
        startStopButton.getParent ().setLayout (new GridLayout (4, false));
        startStopButton.moveAbove (prefsButton);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/MainWindow.java" startline="206" endline="220">
public void widgetSelected (SelectionEvent e) {
    feederRegistry.select (feederSelectionCombo.getSelectionIndex ());
    Rectangle bounds = feederRegistry.current ().getBounds ();
    FormData feederAreaLayoutData = ((FormData) feederArea.getLayoutData ());
    feederAreaLayoutData.height = bounds.height;
    feederAreaLayoutData.width = bounds.width;
    relayoutControls ();
    shell.layout ();
    shell.setText (feederRegistry.current ().getFeederName () + " - " + Version.NAME);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/MainWindow.java" startline="224" endline="234">
public void transitionTo (final ScanningState state, Transition transition) {
    if (transition != Transition.START && transition != Transition.COMPLETE) return;

    boolean enabled = state == ScanningState.IDLE;
    feederArea.setEnabled (enabled);
    feederSelectionCombo.setEnabled (enabled);
    prefsButton.setEnabled (enabled);
    fetchersButton.setEnabled (enabled);
    statusBar.setEnabled (enabled);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/AbstractModalDialog.java" startline="27" endline="52">
public void open () {
    if (shell == null || shell.isDisposed ()) {
        createShell ();
    }
    if (shell.getParent () != null) {
        Rectangle parentBounds = shell.getParent ().getBounds ();
        Rectangle childBounds = shell.getBounds ();
        int x = parentBounds.x + (parentBounds.width - childBounds.width) / 2;
        int y = parentBounds.y + (parentBounds.height - childBounds.height) / 2;
        shell.setLocation (x, y);
    }
    shell.open ();
    Display display = Display.getCurrent ();
    while (shell != null && ! shell.isDisposed ()) {
        if (! display.readAndDispatch ()) display.sleep ();

    }
    shell = null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/AbstractModalDialog.java" startline="59" endline="79">
protected final void createShell () {
    Shell parent = null;
    try {
        parent = Display.getCurrent ().getShells () [0];
    } catch (Exception e) {
    }
    shell = new Shell (parent, getShellStyle ());
    Image icon = null;
    if (parent != null) {
        icon = parent.getImage ();
    }
    if (icon == null) {
        icon = new Image (shell.getDisplay (), Labels.getInstance ().getImageAsStream ("icon"));
    }
    shell.setImage (icon);
    populateShell ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/AbstractModalDialog.java" startline="84" endline="86">
protected int getShellStyle () {
    return SWT.APPLICATION_MODAL | SWT.DIALOG_TRIM;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/AbstractModalDialog.java" startline="94" endline="119">
protected void positionButtons (Button okButton, Button cancelButton) {
    shell.setDefaultButton (okButton);
    Rectangle clientArea = shell.getClientArea ();
    Point size = okButton.computeSize (85, SWT.DEFAULT);
    okButton.setSize (size);
    if (cancelButton != null) {
        cancelButton.setSize (size);
        if (Platform.MAC_OS || Platform.LINUX) {
            Button fooButton = okButton;
            okButton = cancelButton;
            cancelButton = fooButton;
        }
        int distance = size.y / 3;
        cancelButton.setLocation (clientArea.width - size.x - 10, clientArea.height - size.y - 10);
        okButton.setLocation (clientArea.width - size.x * 2 - 10 - distance, clientArea.height - size.y - 10);
    } else {
        okButton.setLocation (clientArea.width - size.x - 10, clientArea.height - size.y - 10);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/AbstractModalDialog.java" startline="128" endline="143">
protected void positionButtonsInFormLayout (Button okButton, Button cancelButton, Control control) {
    shell.setDefaultButton (okButton);
    if (Platform.MAC_OS || Platform.LINUX) {
        Button fooButton = okButton;
        okButton = cancelButton;
        cancelButton = fooButton;
    }
    cancelButton.pack ();
    cancelButton.setLayoutData (LayoutHelper.formData (Math.max (85, cancelButton.getSize ().x), SWT.DEFAULT, null, new FormAttachment (control, 0, SWT.RIGHT), new FormAttachment (control, 8), null));
    okButton.pack ();
    Point okSize = okButton.getSize ();
    okButton.setLayoutData (LayoutHelper.formData (Math.max (85, okSize.x), SWT.DEFAULT, null, new FormAttachment (cancelButton, - okSize.y / 3), new FormAttachment (control, 8), null));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/AbstractModalDialog.java" startline="148" endline="162">
protected Button createCloseButton () {
    Button button = new Button (shell, SWT.NONE);
    button.setText (Labels.getLabel ("button.close"));
    positionButtons (button, null);
    button.addListener (SWT.Selection, new Listener () {
        public void handleEvent (Event event) {
            shell.close ();
            shell.dispose ();
        }}

    );
    button.setFocus ();
    return button;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/AbstractModalDialog.java" startline="154" endline="157">
public void handleEvent (Event event) {
    shell.close ();
    shell.dispose ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/AbstractModalDialog.java" startline="170" endline="172">
public UpButtonListener (List list) {
    this.list = list;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/AbstractModalDialog.java" startline="174" endline="194">
public void handleEvent (Event event) {
    if (list.getSelectionCount () == 0 || list.isSelected (0)) {
        return;
    }
    int [] selectedItems = list.getSelectionIndices ();
    for (int index : selectedItems) {
        list.deselect (index);
        String oldItem = list.getItem (index - 1);
        list.setItem (index - 1, list.getItem (index));
        list.setItem (index, oldItem);
        list.select (index - 1);
    }
    if (! Platform.MAC_OS) {
        list.setTopIndex (selectedItems [0] - 2);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/AbstractModalDialog.java" startline="201" endline="203">
public DownButtonListener (List list) {
    this.list = list;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/AbstractModalDialog.java" startline="205" endline="227">
public void handleEvent (Event event) {
    if (list.getSelectionCount () == 0 || list.isSelected (list.getItemCount () - 1)) {
        return;
    }
    int [] selectedItems = list.getSelectionIndices ();
    for (int i = selectedItems.length - 1;
    i >= 0; i --) {
        int index = selectedItems [i];
        list.deselect (index);
        String oldItem = list.getItem (index + 1);
        list.setItem (index + 1, list.getItem (index));
        list.setItem (index, oldItem);
        list.select (index + 1);
    }
    if (! Platform.MAC_OS) {
        list.setTopIndex (selectedItems [0]);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/util/LayoutHelper.java" startline="21" endline="27">
public static FormLayout formLayout (int marginWidth, int marginHeight, int spacing) {
    FormLayout formLayout = new FormLayout ();
    formLayout.marginWidth = marginWidth;
    formLayout.marginHeight = marginHeight;
    formLayout.spacing = spacing;
    return formLayout;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/util/LayoutHelper.java" startline="29" endline="36">
public static FormData formData (int width, int height, FormAttachment left, FormAttachment right, FormAttachment top, FormAttachment bottom) {
    FormData formData = new FormData (width, height);
    formData.left = left;
    formData.right = right;
    formData.top = top;
    formData.bottom = bottom;
    return formData;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/util/LayoutHelper.java" startline="38" endline="40">
public static FormData formData (FormAttachment left, FormAttachment right, FormAttachment top, FormAttachment bottom) {
    return formData (SWT.DEFAULT, SWT.DEFAULT, left, right, top, bottom);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/InputDialog.java" startline="28" endline="33">
public InputDialog (String title, String message) {
    populateShell ();
    shell.setText (title);
    messageLabel.setText (message);
    messageLabel.pack ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/InputDialog.java" startline="36" endline="66">
protected void populateShell () {
    Display currentDisplay = Display.getCurrent ();
    Shell parent = currentDisplay != null ? currentDisplay.getActiveShell () : null;
    shell = new Shell (parent, SWT.APPLICATION_MODAL | SWT.DIALOG_TRIM);
    shell.setLayout (LayoutHelper.formLayout (10, 10, 4));
    messageLabel = new Label (shell, SWT.NONE);
    messageLabel.setLayoutData (LayoutHelper.formData (new FormAttachment (0), null, new FormAttachment (0), null));
    text = new Text (shell, SWT.BORDER);
    okButton = new Button (shell, SWT.NONE);
    okButton.setText (Labels.getLabel ("button.OK"));
    cancelButton = new Button (shell, SWT.NONE);
    cancelButton.setText (Labels.getLabel ("button.cancel"));
    okButton.addSelectionListener (new org.eclipse.swt.events.SelectionAdapter () {
        public void widgetSelected (org.eclipse.swt.events.SelectionEvent e) {
            message = text.getText ();
            shell.dispose ();
        }}

    );
    cancelButton.addSelectionListener (new org.eclipse.swt.events.SelectionAdapter () {
        public void widgetSelected (org.eclipse.swt.events.SelectionEvent e) {
            message = null;
            shell.dispose ();
        }}

    );
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/InputDialog.java" startline="55" endline="58">
public void widgetSelected (org.eclipse.swt.events.SelectionEvent e) {
    message = text.getText ();
    shell.dispose ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/InputDialog.java" startline="61" endline="64">
public void widgetSelected (org.eclipse.swt.events.SelectionEvent e) {
    message = null;
    shell.dispose ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/InputDialog.java" startline="69" endline="71">
protected int getShellStyle () {
    return super.getShellStyle () | SWT.SHEET;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/InputDialog.java" startline="73" endline="80">
private void setText (String text) {
    text = text != null ? text : "";
    this.text.setText (text);
    this.text.pack ();
    this.text.setLayoutData (LayoutHelper.formData (Math.max (this.text.getSize ().x, 310), SWT.DEFAULT, new FormAttachment (0), null, new FormAttachment (messageLabel), null));
    this.text.setFocus ();
    this.text.setSelection (0, text.length ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/InputDialog.java" startline="87" endline="97">
public String open (String text, String okButtonText) {
    okButton.setText (okButtonText);
    setText (text);
    positionButtonsInFormLayout (okButton, cancelButton, this.text);
    shell.pack ();
    open ();
    return message;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/InputDialog.java" startline="103" endline="105">
public String open (String text) {
    return open (text, Labels.getLabel ("button.OK"));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/StatusBar.java" startline="47" endline="79">
public StatusBar (Shell shell, GUIConfig guiConfig, ScannerConfig scannerConfig, ResultTable resultTable, StateMachine stateMachine) {
    this.guiConfig = guiConfig;
    this.scannerConfig = scannerConfig;
    this.stateMachine = stateMachine;
    this.resultTable = resultTable;
    this.resultTable.addListener (SWT.Selection, new TableSelection (this, stateMachine));
    composite = new Composite (shell, SWT.NONE);
    composite.setLayoutData (LayoutHelper.formData (new FormAttachment (0), new FormAttachment (100), null, new FormAttachment (100)));
    composite.setLayout (LayoutHelper.formLayout (1, 1, 2));
    statusText = new Label (composite, SWT.BORDER);
    statusText.setLayoutData (LayoutHelper.formData (new FormAttachment (0), new FormAttachment (35), new FormAttachment (0), new FormAttachment (100)));
    setStatusText (null);
    displayMethodText = new Label (composite, SWT.BORDER);
    displayMethodText.setText (Labels.getLabel ("text.display." + PORTS));
    displayMethodText.pack ();
    displayMethodText.setLayoutData (LayoutHelper.formData (displayMethodText.getSize ().x, SWT.DEFAULT, new FormAttachment (statusText), null, new FormAttachment (0), new FormAttachment (100)));
    displayMethodText.addListener (SWT.MouseDown, new DisplayModeChangeListener ());
    updateConfigText ();
    threadsText = new Label (composite, SWT.BORDER);
    setRunningThreads (Math.min (scannerConfig.maxThreads, 200));
    threadsText.pack ();
    threadsText.setLayoutData (LayoutHelper.formData (threadsText.getSize ().x, SWT.DEFAULT, new FormAttachment (displayMethodText), null, new FormAttachment (0), new FormAttachment (100)));
    setRunningThreads (0);
    progressBar = new ProgressBar (composite, SWT.BORDER);
    progressBar.setLayoutData (LayoutHelper.formData (new FormAttachment (threadsText), new FormAttachment (100, 0), new FormAttachment (0), new FormAttachment (100)));
    progressBar.setSelection (0);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/StatusBar.java" startline="84" endline="86">
public void updateConfigText () {
    displayMethodText.setText (Labels.getLabel ("text.display." + guiConfig.displayMethod));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/StatusBar.java" startline="91" endline="93">
Composite getComposite () {
    return composite;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/StatusBar.java" startline="98" endline="100">
public boolean isDisposed () {
    return composite.isDisposed ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/StatusBar.java" startline="106" endline="112">
public void setStatusText (String statusText) {
    if (statusText == null) {
        statusText = Labels.getLabel ("state.ready");
    }
    if (! this.statusText.isDisposed ()) this.statusText.setText (statusText);

}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/StatusBar.java" startline="114" endline="126">
public void setRunningThreads (int runningThreads) {
    if (! threadsText.isDisposed ()) {
        boolean maxThreadsReached = runningThreads == scannerConfig.maxThreads;
        if (maxThreadsReachedBefore || maxThreadsReached) {
            Color newColor = threadsText.getDisplay ().getSystemColor (maxThreadsReached ? SWT.COLOR_DARK_RED : SWT.COLOR_WIDGET_FOREGROUND);
            threadsText.setForeground (newColor);
        }
        maxThreadsReachedBefore = maxThreadsReached;
        threadsText.setText (Labels.getLabel ("text.threads") + runningThreads + (maxThreadsReached ? Labels.getLabel ("text.threads.max") : ""));
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/StatusBar.java" startline="128" endline="131">
public void setProgress (int progress) {
    if (! progressBar.isDisposed ()) progressBar.setSelection (progress);

}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/StatusBar.java" startline="133" endline="135">
public Shell getShell () {
    return composite.getShell ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/StatusBar.java" startline="137" endline="140">
public void setEnabled (boolean enabled) {
    displayMethodText.setEnabled (enabled);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/StatusBar.java" startline="143" endline="174">
public void handleEvent (Event event) {
    if (event.type == SWT.MouseDown) {
        Menu popupMenu = new Menu (getShell (), SWT.POP_UP);
        for (DisplayMethod displayMethod : DisplayMethod.values ()) {
            MenuItem item = new MenuItem (popupMenu, 0);
            item.setText (Labels.getLabel ("text.display." + displayMethod));
            item.setData (displayMethod);
            item.addListener (SWT.Selection, this);
        }
        popupMenu.setVisible (true);
    } else if (event.type == SWT.Selection) {
        guiConfig.displayMethod = (DisplayMethod) event.widget.getData ();
        updateConfigText ();
        if (! resultTable.getScanningResults ().areResultsAvailable ()) return;

        switch (guiConfig.displayMethod) {
            case ALIVE :
                {
                    new SelectDead (resultTable).handleEvent (event);
                    new Delete (resultTable, stateMachine).handleEvent (event);
                    break;
                } case PORTS :
                {
                    new SelectWithoutPorts (resultTable).handleEvent (event);
                    new Delete (resultTable, stateMachine).handleEvent (event);
                    break;
                }}
    }

}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/GettingStartedDialog.java" startline="26" endline="34">
public GettingStartedDialog () {
    int num = 1;
    try {
        while (true) {
            texts.add (Labels.getLabel ("text.gettingStarted" + num ++));
        }
    } catch (Exception noMoreTexts) {
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/GettingStartedDialog.java" startline="36" endline="39">
public GettingStartedDialog prependText (String text) {
    texts.add (0, text);
    return this;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/GettingStartedDialog.java" startline="42" endline="86">
protected void populateShell () {
    Display currentDisplay = Display.getCurrent ();
    Shell parent = currentDisplay != null ? currentDisplay.getActiveShell () : null;
    shell = new Shell (parent, SWT.APPLICATION_MODAL | SWT.DIALOG_TRIM);
    shell.setText (Labels.getLabel ("title.gettingStarted"));
    shell.setSize (new Point (500, 300));
    Label iconLabel = new Label (shell, SWT.ICON);
    iconLabel.setLocation (10, 10);
    if (parent != null) {
        iconLabel.setImage (parent.getImage ());
        shell.setImage (parent.getImage ());
    }
    iconLabel.pack ();
    int leftBound = iconLabel.getBounds ().width + 20;
    closeButton = new Button (shell, SWT.NONE);
    closeButton.setText (Labels.getLabel ("button.close"));
    nextButton = new Button (shell, SWT.NONE);
    nextButton.setText (Labels.getLabel ("button.next"));
    nextButton.setFocus ();
    positionButtons (nextButton, closeButton);
    gettingStartedText = new Text (shell, SWT.BORDER | SWT.MULTI | SWT.READ_ONLY | SWT.V_SCROLL | SWT.WRAP);
    gettingStartedText.setBounds (leftBound, 10, shell.getClientArea ().width - leftBound - 10, closeButton.getLocation ().y - 20);
    gettingStartedText.setBackground (shell.getDisplay ().getSystemColor (SWT.COLOR_LIST_BACKGROUND));
    closeButton.addListener (SWT.Selection, new Listener () {
        public void handleEvent (Event event) {
            shell.close ();
            shell.dispose ();
        }}

    );
    nextButton.addListener (SWT.Selection, new Listener () {
        public void handleEvent (Event event) {
            displayActivePage ();
        }}

    );
    displayActivePage ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/GettingStartedDialog.java" startline="74" endline="77">
public void handleEvent (Event event) {
    shell.close ();
    shell.dispose ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/GettingStartedDialog.java" startline="80" endline="82">
public void handleEvent (Event event) {
    displayActivePage ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/GettingStartedDialog.java" startline="89" endline="91">
protected int getShellStyle () {
    return super.getShellStyle () | SWT.SHEET;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/GettingStartedDialog.java" startline="93" endline="101">
void displayActivePage () {
    gettingStartedText.setText (texts.get (activePage ++));
    if (activePage >= texts.size ()) {
        nextButton.setEnabled (false);
        shell.setDefaultButton (closeButton);
        closeButton.setFocus ();
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/EditFavoritesDialog.java" startline="24" endline="26">
public EditFavoritesDialog (FavoritesConfig favoritesConfig) {
    this.favoritesConfig = favoritesConfig;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/EditFavoritesDialog.java" startline="29" endline="90">
protected void populateShell () {
    Display currentDisplay = Display.getCurrent ();
    Shell parent = currentDisplay != null ? currentDisplay.getActiveShell () : null;
    shell = new Shell (parent, SWT.APPLICATION_MODAL | SWT.DIALOG_TRIM);
    shell.setText (Labels.getLabel ("title.favorite.edit"));
    shell.setLayout (LayoutHelper.formLayout (10, 10, 4));
    Label messageLabel = new Label (shell, SWT.NONE);
    messageLabel.setText (Labels.getLabel ("text.favorite.edit"));
    favoritesList = new List (shell, SWT.BORDER | SWT.MULTI | SWT.V_SCROLL);
    favoritesList.setLayoutData (LayoutHelper.formData (330, 200, new FormAttachment (0), null, new FormAttachment (messageLabel), null));
    for (String name : favoritesConfig) {
        favoritesList.add (name);
    }
    Button upButton = new Button (shell, SWT.NONE);
    upButton.setText (Labels.getLabel ("button.up"));
    upButton.addListener (SWT.Selection, new UpButtonListener (favoritesList));
    Button downButton = new Button (shell, SWT.NONE);
    downButton.setText (Labels.getLabel ("button.down"));
    downButton.addListener (SWT.Selection, new DownButtonListener (favoritesList));
    Button renameButton = new Button (shell, SWT.NONE);
    renameButton.setText (Labels.getLabel ("button.rename"));
    Listener renameListener = new RenameListener ();
    renameButton.addListener (SWT.Selection, renameListener);
    favoritesList.addListener (SWT.MouseDoubleClick, renameListener);
    Button deleteButton = new Button (shell, SWT.NONE);
    deleteButton.setText (Labels.getLabel ("button.delete"));
    deleteButton.addListener (SWT.Selection, new DeleteListener ());
    upButton.setLayoutData (LayoutHelper.formData (new FormAttachment (favoritesList), new FormAttachment (renameButton, 0, SWT.RIGHT), new FormAttachment (messageLabel), null));
    downButton.setLayoutData (LayoutHelper.formData (new FormAttachment (favoritesList), new FormAttachment (renameButton, 0, SWT.RIGHT), new FormAttachment (upButton), null));
    renameButton.setLayoutData (LayoutHelper.formData (new FormAttachment (favoritesList), null, new FormAttachment (downButton, 10), null));
    deleteButton.setLayoutData (LayoutHelper.formData (new FormAttachment (favoritesList), new FormAttachment (renameButton, 0, SWT.RIGHT), new FormAttachment (renameButton), null));
    Button okButton = new Button (shell, SWT.NONE);
    okButton.setText (Labels.getLabel ("button.OK"));
    Button cancelButton = new Button (shell, SWT.NONE);
    cancelButton.setText (Labels.getLabel ("button.cancel"));
    positionButtonsInFormLayout (okButton, cancelButton, favoritesList);
    shell.pack ();
    okButton.addSelectionListener (new SelectionAdapter () {
        public void widgetSelected (org.eclipse.swt.events.SelectionEvent e) {
            saveFavorites ();
            shell.close ();
        }}

    );
    cancelButton.addSelectionListener (new SelectionAdapter () {
        public void widgetSelected (org.eclipse.swt.events.SelectionEvent e) {
            shell.close ();
        }}

    );
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/EditFavoritesDialog.java" startline="80" endline="83">
public void widgetSelected (org.eclipse.swt.events.SelectionEvent e) {
    saveFavorites ();
    shell.close ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/EditFavoritesDialog.java" startline="86" endline="88">
public void widgetSelected (org.eclipse.swt.events.SelectionEvent e) {
    shell.close ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/EditFavoritesDialog.java" startline="92" endline="95">
private void saveFavorites () {
    favoritesConfig.update (favoritesList.getItems ());
    favoritesConfig.store ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/EditFavoritesDialog.java" startline="98" endline="100">
public void handleEvent (Event event) {
    favoritesList.remove (favoritesList.getSelectionIndices ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/EditFavoritesDialog.java" startline="104" endline="115">
public void handleEvent (Event event) {
    int index = favoritesList.getSelectionIndex ();
    InputDialog prompt = new InputDialog (Labels.getLabel ("title.rename"), "");
    String oldName = favoritesList.getItem (index);
    String newName = prompt.open (oldName);
    if (newName != null) {
        favoritesConfig.add (newName, favoritesConfig.remove (oldName));
        favoritesList.setItem (index, newName);
    }
    favoritesList.forceFocus ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/BrowserLauncher.java" startline="24" endline="31">
public static void openURL (String url) {
    try {
        Desktop.getDesktop ().browse (new URI (url));
    } catch (Exception e) {
        throw new UserErrorException ("openURL.failed", url);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/FeederActions.java" startline="37" endline="41">
public HostnameButton (Text hostnameText, Text ipText, Combo netmaskCombo) {
    this.hostnameText = hostnameText;
    this.ipText = ipText;
    this.netmaskCombo = netmaskCombo;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/FeederActions.java" startline="43" endline="67">
public void widgetSelected (SelectionEvent event) {
    String hostname = hostnameText.getText ();
    try {
        if (hostname.equals (InetAddress.getLocalHost ().getHostName ())) {
            askLocalIPAddress ();
        } else {
            InetAddress address = InetAddress.getByName (hostname);
            ipText.setText (address.getHostAddress ());
            String realHostname = address.getCanonicalHostName ();
            if (! address.getHostAddress ().equals (realHostname)) {
                hostnameText.setText (realHostname);
                hostnameText.setSelection (realHostname.length ());
            }
        }
    } catch (UnknownHostException e) {
        throw new FeederException ("invalidHostname");
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/FeederActions.java" startline="69" endline="74">
public void keyTraversed (TraverseEvent e) {
    if (e.detail == SWT.TRAVERSE_RETURN) {
        widgetSelected (null);
        e.doit = false;
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/FeederActions.java" startline="79" endline="126">
private void askLocalIPAddress () {
    try {
        Menu popupMenu = new Menu (Display.getCurrent ().getActiveShell (), SWT.POP_UP);
        Listener menuItemListener = new Listener () {
            public void handleEvent (Event event) {
                MenuItem menuItem = (MenuItem) event.widget;
                String address = (String) menuItem.getData ();
                ipText.setText (address.substring (0, address.lastIndexOf ('/')));
                netmaskCombo.setText (address.substring (address.lastIndexOf ('/')));
                menuItem.getParent ().dispose ();
            }}

        ;
        for (Enumeration < NetworkInterface > i = getNetworkInterfaces ();
        i.hasMoreElements ();) {
            NetworkInterface networkInterface = i.nextElement ();
            for (InterfaceAddress ifaddr : networkInterface.getInterfaceAddresses ()) {
                if (ifaddr == null) continue;

                InetAddress address = ifaddr.getAddress ();
                if (address instanceof Inet4Address && ! address.isLoopbackAddress ()) {
                    MenuItem menuItem = new MenuItem (popupMenu, 0);
                    menuItem.setText (networkInterface.getDisplayName () + ": " + address.getHostAddress ());
                    menuItem.setData (address.getHostAddress () + "/" + ifaddr.getNetworkPrefixLength ());
                    menuItem.addListener (SWT.Selection, menuItemListener);
                }
            }
        }
        if (popupMenu.getItemCount () > 1) {
            popupMenu.setLocation (Display.getCurrent ().getCursorLocation ());
            popupMenu.setVisible (true);
        } else {
            if (popupMenu.getItemCount () == 1) {
                Event event = new Event ();
                event.widget = popupMenu.getItem (0);
                menuItemListener.handleEvent (event);
                popupMenu.dispose ();
            }
        }
    } catch (SocketException e) {
        LOG.log (Level.FINE, "Cannot enumerate network interfaces", e);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/FeederActions.java" startline="83" endline="90">
public void handleEvent (Event event) {
    MenuItem menuItem = (MenuItem) event.widget;
    String address = (String) menuItem.getData ();
    ipText.setText (address.substring (0, address.lastIndexOf ('/')));
    netmaskCombo.setText (address.substring (address.lastIndexOf ('/')));
    menuItem.getParent ().dispose ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="48" endline="48">
public CommandsMenuActions () {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="53" endline="61">
static void checkSelection (ResultTable resultTable) {
    if (resultTable.getItemCount () <= 0) {
        throw new UserErrorException ("commands.noResults");
    } else if (resultTable.getSelectionIndex () < 0) {
        throw new UserErrorException ("commands.noSelection");
    }

}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="67" endline="72">
public Details (ResultTable resultTable, DetailsWindow detailsWindow) {
    this.resultTable = resultTable;
    this.detailsWindow = detailsWindow;
    resultTable.addListener (SWT.Traverse, this);
    resultTable.addListener (SWT.MouseDoubleClick, this);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="74" endline="81">
public void handleEvent (Event event) {
    if (event.type == SWT.Selection || (resultTable.getSelectionIndex () >= 0 && (event.type == SWT.MouseDoubleClick || event.detail == SWT.TRAVERSE_RETURN))) {
        event.doit = false;
        checkSelection (resultTable);
        detailsWindow.open ();
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="88" endline="91">
public Delete (ResultTable resultTable, StateMachine stateMachine) {
    this.resultTable = resultTable;
    this.stateMachine = stateMachine;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="93" endline="107">
public void handleEvent (Event event) {
    if (event.type == SWT.KeyDown && event.keyCode != SWT.DEL) return;

    if (! stateMachine.inState (ScanningState.IDLE)) return;

    int firstSelection = resultTable.getSelectionIndex ();
    if (firstSelection < 0) return;

    resultTable.remove (resultTable.getSelectionIndices ());
    resultTable.setSelection (firstSelection);
    event.widget = resultTable;
    resultTable.notifyListeners (SWT.Selection, event);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="115" endline="118">
public Rescan (ResultTable resultTable, StateMachine stateMachine) {
    this.resultTable = resultTable;
    this.stateMachine = stateMachine;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="120" endline="123">
public void handleEvent (Event event) {
    checkSelection (resultTable);
    stateMachine.rescan ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="134" endline="136">
public CopyIP (ResultTable resultTable) {
    this.resultTable = resultTable;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="138" endline="151">
public void handleEvent (Event event) {
    if (event.type == SWT.KeyDown) {
        if ((event.keyCode != 'c' && event.stateMask != SWT.MOD1) || resultTable.getSelectionIndex () < 0) return;

    } else {
        checkSelection (resultTable);
    }
    Clipboard clipboard = new Clipboard (event.display);
    clipboard.setContents (new Object [] {resultTable.getItem (resultTable.getSelectionIndex ()).getText ()}, new Transfer [] {TextTransfer.getInstance ()});
    clipboard.dispose ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="158" endline="160">
public CopyIPDetails (ResultTable resultTable) {
    this.resultTable = resultTable;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="162" endline="167">
public void handleEvent (Event event) {
    checkSelection (resultTable);
    Clipboard clipboard = new Clipboard (event.display);
    clipboard.setContents (new Object [] {resultTable.getSelectedResult ().toString ()}, new Transfer [] {TextTransfer.getInstance ()});
    clipboard.dispose ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="176" endline="179">
public ShowOpenersMenu (OpenersConfig openersConfig, SelectOpener selectOpener) {
    this.openersConfig = openersConfig;
    this.openersSelectListener = selectOpener;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="181" endline="204">
public void handleEvent (Event event) {
    Menu openersMenu = (Menu) event.widget;
    MenuItem [] menuItems = openersMenu.getItems ();
    for (int i = 2;
    i < menuItems.length; i ++) {
        menuItems [i].dispose ();
    }
    int index = 0;
    for (String name : openersConfig) {
        MenuItem menuItem = new MenuItem (openersMenu, SWT.CASCADE);
        index ++;
        if (index <= 9) {
            name += "\tCtrl+" + index;
            menuItem.setAccelerator (SWT.MOD1 | ('0' + index));
        }
        menuItem.setText (name);
        menuItem.setData (index);
        menuItem.addListener (SWT.Selection, openersSelectListener);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="213" endline="216">
public EditOpeners (FetcherRegistry fetcherRegistry, OpenersConfig openersConfig) {
    this.fetcherRegistry = fetcherRegistry;
    this.openersConfig = openersConfig;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="218" endline="220">
public void handleEvent (Event event) {
    new EditOpenersDialog (fetcherRegistry, openersConfig).open ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="231" endline="236">
public SelectOpener (OpenersConfig openersConfig, StatusBar statusBar, ResultTable resultTable, OpenerLauncher openerLauncher) {
    this.openersConfig = openersConfig;
    this.statusBar = statusBar;
    this.resultTable = resultTable;
    this.openerLauncher = openerLauncher;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/CommandsMenuActions.java" startline="238" endline="263">
public void handleEvent (Event event) {
    MenuItem menuItem = (MenuItem) event.widget;
    String name = menuItem.getText ();
    int indexOf = name.lastIndexOf ('\t');
    if (indexOf >= 0) {
        name = name.substring (0, indexOf);
    }
    Opener opener = openersConfig.getOpener (name);
    int [] selectionIndices = resultTable.getSelectionIndices ();
    if (selectionIndices.length == 0) throw new UserErrorException ("commands.noSelection");

    for (int i : selectionIndices) {
        try {
            statusBar.setStatusText (Labels.getLabel ("state.opening") + name);
            openerLauncher.launch (opener, i);
            Thread.sleep (100);
        } catch (InterruptedException ignore) {
        } finally {
            statusBar.setStatusText (null);
        }
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/FavoritesMenuActions.java" startline="40" endline="43">
public Add (FavoritesConfig favoritesConfig, FeederGUIRegistry feederRegistry) {
    this.favoritesConfig = favoritesConfig;
    this.feederRegistry = feederRegistry;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/FavoritesMenuActions.java" startline="45" endline="59">
public void handleEvent (Event event) {
    String feederInfo = feederRegistry.current ().getInfo ();
    InputDialog inputDialog = new InputDialog (Labels.getLabel ("title.favorite.add"), Labels.getLabel ("text.favorite.add"));
    String favoriteName = inputDialog.open (feederInfo);
    if (favoriteName != null) {
        if (favoritesConfig.get (favoriteName) != null) {
            throw new UserErrorException ("favorite.alreadyExists");
        }
        favoritesConfig.add (favoriteName, feederRegistry.current ());
        event.display.getActiveShell ().setText (favoriteName + " - " + Version.NAME);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/FavoritesMenuActions.java" startline="68" endline="72">
public Select (FavoritesConfig favoritesConfig, FeederGUIRegistry feederRegistry, StartStopScanningAction startStopAction) {
    this.favoritesConfig = favoritesConfig;
    this.feederRegistry = feederRegistry;
    this.startStopAction = startStopAction;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/FavoritesMenuActions.java" startline="74" endline="84">
public void widgetSelected (SelectionEvent event) {
    MenuItem menuItem = (MenuItem) event.widget;
    String key = menuItem.getText ();
    feederRegistry.select (favoritesConfig.getFeederId (key));
    feederRegistry.current ().unserialize (favoritesConfig.getSerializedParts (key));
    event.display.getActiveShell ().setText (key + " - " + Version.NAME);
    startStopAction.widgetSelected (event);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/FavoritesMenuActions.java" startline="86" endline="88">
public void widgetDefaultSelected (SelectionEvent e) {
    widgetSelected (e);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/FavoritesMenuActions.java" startline="95" endline="97">
public Edit (FavoritesConfig favoritesConfig) {
    this.favoritesConfig = favoritesConfig;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/FavoritesMenuActions.java" startline="99" endline="101">
public void handleEvent (Event event) {
    new EditFavoritesDialog (favoritesConfig).open ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/FavoritesMenuActions.java" startline="110" endline="115">
public ShowMenu (FavoritesConfig favoritesConfig, Select favoritesSelectListener, StateMachine stateMachine) {
    this.favoritesConfig = favoritesConfig;
    this.favoritesSelectListener = favoritesSelectListener;
    this.stateMachine = stateMachine;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/FavoritesMenuActions.java" startline="117" endline="135">
public void handleEvent (Event event) {
    Menu favoritesMenu = (Menu) event.widget;
    MenuItem [] menuItems = favoritesMenu.getItems ();
    for (int i = 3;
    i < menuItems.length; i ++) {
        menuItems [i].dispose ();
    }
    for (String name : favoritesConfig) {
        MenuItem menuItem = new MenuItem (favoritesMenu, SWT.CASCADE);
        menuItem.setText (name);
        menuItem.setEnabled (stateMachine.inState (ScanningState.IDLE));
        menuItem.addSelectionListener (favoritesSelectListener);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="35" endline="38">
NextHost (ResultTable resultTable, ResultType whatToSearchFor) {
    this.resultTable = resultTable;
    this.whatToSearchFor = whatToSearchFor;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="40" endline="42">
protected int inc (int i) {
    return i + 1;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="44" endline="46">
protected int startIndex () {
    return resultTable.getSelectionIndex ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="48" endline="70">
public final void handleEvent (Event event) {
    ScanningResultList results = resultTable.getScanningResults ();
    int numElements = resultTable.getItemCount ();
    int startIndex = startIndex ();
    for (int i = inc (startIndex);
    i < numElements && i >= 0; i = inc (i)) {
        ScanningResult scanningResult = results.getResult (i);
        if (whatToSearchFor.matches (scanningResult.getType ())) {
            resultTable.setSelection (i);
            resultTable.setFocus ();
            return;
        }
    }
    if (startIndex >= 0 && startIndex < numElements) {
        resultTable.deselectAll ();
        handleEvent (event);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="76" endline="78">
public PrevHost (ResultTable resultTable, ResultType whatToSearchFor) {
    super (resultTable, whatToSearchFor);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="80" endline="82">
protected int inc (int i) {
    return i - 1;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="84" endline="87">
protected int startIndex () {
    int curIndex = resultTable.getSelectionIndex ();
    return curIndex >= 0 ? curIndex : resultTable.getItemCount ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="92" endline="94">
public NextAliveHost (ResultTable resultTable) {
    super (resultTable, ResultType.ALIVE);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="99" endline="101">
public NextDeadHost (ResultTable resultTable) {
    super (resultTable, ResultType.DEAD);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="106" endline="108">
public NextHostWithInfo (ResultTable resultTable) {
    super (resultTable, ResultType.WITH_PORTS);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="113" endline="115">
public PrevAliveHost (ResultTable resultTable) {
    super (resultTable, ResultType.ALIVE);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="120" endline="122">
public PrevDeadHost (ResultTable resultTable) {
    super (resultTable, ResultType.DEAD);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="127" endline="129">
public PrevHostWithInfo (ResultTable resultTable) {
    super (resultTable, ResultType.WITH_PORTS);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="139" endline="142">
public Find (StatusBar statusBar, ResultTable resultTable) {
    this.statusBar = statusBar;
    this.resultTable = resultTable;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="144" endline="159">
public void handleEvent (Event event) {
    InputDialog dialog = new InputDialog (Labels.getLabel ("title.find"), Labels.getLabel ("text.find"));
    String text = dialog.open (lastText, Labels.getLabel ("button.find.next"));
    if (text == null) {
        return;
    }
    lastText = text;
    try {
        statusBar.setStatusText (Labels.getLabel ("state.searching"));
        findText (text, statusBar.getShell ());
    } finally {
        statusBar.setStatusText (null);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/GotoMenuActions.java" startline="161" endline="192">
private void findText (String text, Shell activeShell) {
    ScanningResultList results = resultTable.getScanningResults ();
    int startIndex = resultTable.getSelectionIndex () + 1;
    int foundIndex = results.findText (text, startIndex);
    if (foundIndex >= 0) {
        resultTable.setSelection (foundIndex);
        resultTable.setFocus ();
        return;
    }
    if (startIndex > 0) {
        MessageBox messageBox = new MessageBox (activeShell, SWT.YES | SWT.NO | SWT.ICON_QUESTION);
        messageBox.setText (Labels.getLabel ("title.find"));
        messageBox.setMessage (Labels.getLabel ("text.find.notFound") + " " + Labels.getLabel ("text.find.restart"));
        if (messageBox.open () == SWT.YES) {
            resultTable.deselectAll ();
            findText (text, activeShell);
        }
    } else {
        MessageBox messageBox = new MessageBox (activeShell, SWT.OK | SWT.ICON_INFORMATION);
        messageBox.setText (Labels.getLabel ("title.find"));
        messageBox.setMessage (Labels.getLabel ("text.find.notFound"));
        messageBox.open ();
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/HelpMenuActions.java" startline="35" endline="35">
public GettingStarted () {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/HelpMenuActions.java" startline="37" endline="39">
public void handleEvent (Event event) {
    new GettingStartedDialog ().open ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/HelpMenuActions.java" startline="45" endline="47">
public CommandLineUsage (CommandLineProcessor cli) {
    this.cli = cli;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/HelpMenuActions.java" startline="49" endline="53">
public void handleEvent (Event event) {
    InfoDialog dialog = new InfoDialog (Version.NAME, Labels.getLabel ("title.commandline"));
    dialog.setMessage (cli.toString ());
    dialog.open ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/HelpMenuActions.java" startline="59" endline="61">
public About (AboutDialog aboutDialog) {
    this.aboutDialog = aboutDialog;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/HelpMenuActions.java" startline="63" endline="65">
public void handleEvent (Event event) {
    aboutDialog.open ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/HelpMenuActions.java" startline="69" endline="69">
public Website () {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/HelpMenuActions.java" startline="71" endline="73">
public void handleEvent (Event event) {
    BrowserLauncher.openURL (Version.WEBSITE);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/HelpMenuActions.java" startline="77" endline="77">
public FAQ () {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/HelpMenuActions.java" startline="79" endline="81">
public void handleEvent (Event event) {
    BrowserLauncher.openURL (Version.FAQ_URL);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/HelpMenuActions.java" startline="85" endline="85">
public Issues () {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/HelpMenuActions.java" startline="87" endline="89">
public void handleEvent (Event event) {
    BrowserLauncher.openURL (Version.ISSUES_URL);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/HelpMenuActions.java" startline="93" endline="93">
public Plugins () {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/HelpMenuActions.java" startline="95" endline="97">
public void handleEvent (Event event) {
    BrowserLauncher.openURL (Version.PLUGINS_URL);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/HelpMenuActions.java" startline="103" endline="105">
public CheckVersion (StatusBar statusBar) {
    this.statusBar = statusBar;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/HelpMenuActions.java" startline="107" endline="109">
public void handleEvent (Event event) {
    check (true);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/HelpMenuActions.java" startline="111" endline="166">
public void check (final boolean userEvent) {
    statusBar.setStatusText (Labels.getLabel ("state.retrievingVersion"));
    new GoogleAnalytics ().asyncReport ("Version check " + Version.getVersion ());
    Runnable checkVersionCode = new Runnable () {
        public void run () {
            BufferedReader reader = null;
            String message = null;
            int messageStyle = SWT.ICON_INFORMATION;
            try {
                URL url = new URL (Version.LATEST_VERSION_URL);
                URLConnection conn = url.openConnection ();
                reader = new BufferedReader (new InputStreamReader (conn.getInputStream ()));
                String latestVersion = reader.readLine ();
                latestVersion = latestVersion.substring (latestVersion.indexOf (' ') + 1);
                if (! Version.getVersion ().equals (latestVersion)) {
                    message = Labels.getLabel ("text.version.old");
                    message = message.replaceFirst ("%LATEST", latestVersion);
                    message = message.replaceFirst ("%VERSION", Version.getVersion ());
                    messageStyle = SWT.ICON_QUESTION | SWT.YES | SWT.NO;
                } else if (userEvent) {
                    message = Labels.getLabel ("text.version.latest");
                    messageStyle = SWT.ICON_INFORMATION;
                }

            } catch (Exception e) {
                if (userEvent) message = Labels.getLabel ("exception.UserErrorException.version.latestFailed");

                Logger.getLogger (getClass ().getName ()).log (WARNING, message, e);
            } finally {
                closeQuietly (reader);
                final String messageToShow = message;
                final int messageStyleToShow = messageStyle;
                Display.getDefault ().asyncExec (new Runnable () {
                    public void run () {
                        statusBar.setStatusText (null);
                        if (messageToShow == null) return;

                        MessageBox messageBox = new MessageBox (statusBar.getShell (), messageStyleToShow | SWT.SHEET);
                        messageBox.setText (Version.getFullName ());
                        messageBox.setMessage (messageToShow);
                        if (messageBox.open () == SWT.YES) {
                            BrowserLauncher.openURL (Version.DOWNLOAD_URL);
                        }
                    }}

                );
            }
        }}

    new Thread (checkVersionCode).start ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/HelpMenuActions.java" startline="117" endline="163">
public void run () {
    BufferedReader reader = null;
    String message = null;
    int messageStyle = SWT.ICON_INFORMATION;
    try {
        URL url = new URL (Version.LATEST_VERSION_URL);
        URLConnection conn = url.openConnection ();
        reader = new BufferedReader (new InputStreamReader (conn.getInputStream ()));
        String latestVersion = reader.readLine ();
        latestVersion = latestVersion.substring (latestVersion.indexOf (' ') + 1);
        if (! Version.getVersion ().equals (latestVersion)) {
            message = Labels.getLabel ("text.version.old");
            message = message.replaceFirst ("%LATEST", latestVersion);
            message = message.replaceFirst ("%VERSION", Version.getVersion ());
            messageStyle = SWT.ICON_QUESTION | SWT.YES | SWT.NO;
        } else if (userEvent) {
            message = Labels.getLabel ("text.version.latest");
            messageStyle = SWT.ICON_INFORMATION;
        }

    } catch (Exception e) {
        if (userEvent) message = Labels.getLabel ("exception.UserErrorException.version.latestFailed");

        Logger.getLogger (getClass ().getName ()).log (WARNING, message, e);
    } finally {
        closeQuietly (reader);
        final String messageToShow = message;
        final int messageStyleToShow = messageStyle;
        Display.getDefault ().asyncExec (new Runnable () {
            public void run () {
                statusBar.setStatusText (null);
                if (messageToShow == null) return;

                MessageBox messageBox = new MessageBox (statusBar.getShell (), messageStyleToShow | SWT.SHEET);
                messageBox.setText (Version.getFullName ());
                messageBox.setMessage (messageToShow);
                if (messageBox.open () == SWT.YES) {
                    BrowserLauncher.openURL (Version.DOWNLOAD_URL);
                }
            }}

        );
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/HelpMenuActions.java" startline="151" endline="160">
public void run () {
    statusBar.setStatusText (null);
    if (messageToShow == null) return;

    MessageBox messageBox = new MessageBox (statusBar.getShell (), messageStyleToShow | SWT.SHEET);
    messageBox.setText (Version.getFullName ());
    messageBox.setMessage (messageToShow);
    if (messageBox.open () == SWT.YES) {
        BrowserLauncher.openURL (Version.DOWNLOAD_URL);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ScanMenuActions.java" startline="52" endline="59">
public LoadFromFile (TXTExporter txtExporter, ExporterRegistry exporterRegistry, FeederGUIRegistry feederRegistry, ScanningResultList scanningResults, ResultTable resultTable, StateMachine stateMachine) {
    this.txtExporter = txtExporter;
    this.exporterRegistry = exporterRegistry;
    this.feederRegistry = feederRegistry;
    this.scanningResults = scanningResults;
    this.resultTable = resultTable;
    this.stateMachine = stateMachine;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ScanMenuActions.java" startline="61" endline="81">
public void handleEvent (Event event) {
    FileDialog fileDialog = new FileDialog (resultTable.getShell (), SWT.OPEN);
    List < String > extensions2 = new ArrayList < String > ();
    List < String > descriptions = new ArrayList < String > ();
    StringBuffer labelBuffer = new StringBuffer (Labels.getLabel ("title.load"));
    addFileExtensions (extensions2, descriptions, labelBuffer);
    List < String > extensions = new ArrayList < String > ();
    extensions.add (extensions2.get (0));
    fileDialog.setText (labelBuffer.toString ());
    fileDialog.setFilterExtensions (extensions.toArray (new String [extensions.size ()]));
    fileDialog.setFilterNames (descriptions.toArray (new String [descriptions.size ()]));
    String fileName = fileDialog.open ();
    if (fileName == null) return;

    loadResultsFrom (fileName);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ScanMenuActions.java" startline="83" endline="106">
private void loadResultsFrom (String fileName) {
    try {
        feederRegistry.select ("feeder.range");
        scanningResults.initNewScan (feederRegistry.current ().createFeeder ());
        List < ScanningResult > results = txtExporter.importResults (fileName, feederRegistry.current ());
        resultTable.clearAll ();
        for (ScanningResult result : results) {
            resultTable.addOrUpdateResultRow (result);
        }
        if (! results.isEmpty ()) {
            String lastLoadedIP = results.get (results.size () - 1).getAddress ().getHostAddress ();
            String [] feederIPs = feederRegistry.current ().serialize ();
            if (resumePreviousScan (lastLoadedIP, feederIPs [1])) stateMachine.continueScanning ();

        }
    } catch (Exception e) {
        throw new UserErrorException ("fileLoad.failed", e);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ScanMenuActions.java" startline="108" endline="115">
private boolean resumePreviousScan (String lastIP, String endIP) {
    if (lastIP.equals (endIP)) return false;

    MessageBox box = new MessageBox (resultTable.getShell (), SWT.ICON_QUESTION | SWT.YES | SWT.NO | SWT.SHEET);
    box.setText (Labels.getLabel ("menu.scan.load").replace ("&", ""));
    box.setMessage (Labels.getLabel ("text.scan.resume").replace ("%LASTIP", lastIP).replace ("%ENDIP", endIP));
    return box.open () == SWT.YES;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ScanMenuActions.java" startline="117" endline="127">
private void addFileExtensions (List < String > extensions, List < String > descriptions, StringBuffer sb) {
    sb.append (" (");
    for (Exporter exporter : exporterRegistry) {
        extensions.add ("*." + exporter.getFilenameExtension ());
        sb.append (exporter.getFilenameExtension ()).append (", ");
        descriptions.add (Labels.getLabel (exporter.getId ()));
    }
    sb.delete (sb.length () - 2, sb.length ());
    sb.append (")");
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ScanMenuActions.java" startline="137" endline="143">
SaveResults (ExporterRegistry exporterRegistry, ResultTable resultTable, StatusBar statusBar, StateMachine stateMachine, boolean isSelection) {
    this.exporterRegistry = exporterRegistry;
    this.resultTable = resultTable;
    this.statusBar = statusBar;
    this.stateMachine = stateMachine;
    this.isSelection = isSelection;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ScanMenuActions.java" startline="145" endline="193">
public void handleEvent (Event event) {
    if (resultTable.getItemCount () <= 0) {
        throw new UserErrorException ("commands.noResults");
    }
    if (! stateMachine.inState (ScanningState.IDLE)) {
        MessageBox box = new MessageBox (resultTable.getShell (), SWT.YES | SWT.NO | SWT.ICON_WARNING | SWT.SHEET);
        box.setText (Version.NAME);
        box.setMessage (Labels.getLabel ("exception.ExporterException.scanningInProgress"));
        if (box.open () != SWT.YES) return;

    }
    FileDialog fileDialog = new FileDialog (resultTable.getShell (), SWT.SAVE);
    List < String > extensions = new ArrayList < String > ();
    List < String > descriptions = new ArrayList < String > ();
    StringBuffer labelBuffer = new StringBuffer (Labels.getLabel (isSelection ? "title.exportSelection" : "title.exportAll"));
    addFileExtensions (extensions, descriptions, labelBuffer);
    fileDialog.setText (labelBuffer.toString ());
    fileDialog.setFilterExtensions (extensions.toArray (new String [extensions.size ()]));
    fileDialog.setFilterNames (descriptions.toArray (new String [descriptions.size ()]));
    String fileName = fileDialog.open ();
    if (fileName == null) return;

    Exporter exporter = exporterRegistry.createExporter (fileName);
    statusBar.setStatusText (Labels.getLabel ("state.exporting"));
    ExportProcessor exportProcessor = new ExportProcessor (exporter, new File (fileName), false);
    ScanningResultFilter filter = null;
    if (isSelection) {
        filter = new ScanningResultFilter () {
            public boolean apply (int index, ScanningResult result) {
                return resultTable.isSelected (index);
            }}

        ;
    }
    exportProcessor.process (resultTable.getScanningResults (), filter);
    statusBar.setStatusText (null);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ScanMenuActions.java" startline="185" endline="187">
public boolean apply (int index, ScanningResult result) {
    return resultTable.isSelected (index);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ScanMenuActions.java" startline="195" endline="205">
private void addFileExtensions (List < String > extensions, List < String > descriptions, StringBuffer sb) {
    sb.append (" (");
    for (Exporter exporter : exporterRegistry) {
        extensions.add ("*." + exporter.getFilenameExtension ());
        sb.append (exporter.getFilenameExtension ()).append (", ");
        descriptions.add (Labels.getLabel (exporter.getId ()));
    }
    sb.delete (sb.length () - 2, sb.length ());
    sb.append (")");
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ScanMenuActions.java" startline="210" endline="212">
public SaveAll (ExporterRegistry exporterRegistry, ResultTable resultTable, StatusBar statusBar, StateMachine stateMachine) {
    super (exporterRegistry, resultTable, statusBar, stateMachine, false);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ScanMenuActions.java" startline="217" endline="219">
public SaveSelection (ExporterRegistry exporterRegistry, ResultTable resultTable, StatusBar statusBar, StateMachine stateMachine) {
    super (exporterRegistry, resultTable, statusBar, stateMachine, true);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ScanMenuActions.java" startline="224" endline="225">
public Quit () {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ScanMenuActions.java" startline="227" endline="229">
public void handleEvent (Event event) {
    event.display.getActiveShell ().close ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ScanMenuActions.java" startline="233" endline="241">
public void handleEvent (Event event) {
    new Thread ("main") {
        public void run () {
            Main.main ();
        }}

    .start ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ScanMenuActions.java" startline="237" endline="239">
public void run () {
    Main.main ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ColumnsActions.java" startline="33" endline="35">
public ColumnResize (GUIConfig guiConfig) {
    this.guiConfig = guiConfig;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ColumnsActions.java" startline="37" endline="46">
public void handleEvent (Event event) {
    TableColumn column = (TableColumn) event.widget;
    if (Platform.LINUX && column.getParent ().getColumn (column.getParent ().getColumnCount () - 1) == column) return;

    guiConfig.setColumnWidth ((Fetcher) column.getData (), column.getWidth ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ColumnsActions.java" startline="54" endline="57">
public ColumnClick (ColumnsMenu columnsMenu, StateMachine stateMachine) {
    this.columnsMenu = columnsMenu;
    this.stateMachine = stateMachine;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ColumnsActions.java" startline="59" endline="90">
public void handleEvent (Event e) {
    TableColumn tableColumn = (TableColumn) e.widget;
    Fetcher fetcher = (Fetcher) tableColumn.getData ();
    MenuItem sortMenuItem = columnsMenu.getItem (0);
    MenuItem preferencesMenuItem = columnsMenu.getItem (1);
    MenuItem aboutMenuItem = columnsMenu.getItem (2);
    if (tableColumn.getParent ().getSortColumn () == tableColumn) sortMenuItem.setText (Labels.getLabel ("menu.columns.sortDirection"));
    else sortMenuItem.setText (Labels.getLabel ("menu.columns.sortBy") + " " + fetcher.getName ());

    sortMenuItem.setEnabled (stateMachine.inState (ScanningState.IDLE));
    preferencesMenuItem.setText (fetcher.getName () + " " + Labels.getLabel ("menu.columns.preferences"));
    preferencesMenuItem.setEnabled (fetcher.getPreferencesClass () != null && stateMachine.inState (ScanningState.IDLE));
    aboutMenuItem.setText (Labels.getLabel ("menu.columns.about") + " " + fetcher.getName ());
    tableColumn.getParent ().forceFocus ();
    columnsMenu.setData (tableColumn);
    columnsMenu.setLocation (e.display.getCursorLocation ());
    columnsMenu.setVisible (true);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ColumnsActions.java" startline="98" endline="100">
public SortBy (ScanningResultList scanningResultList) {
    this.scanningResultList = scanningResultList;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ColumnsActions.java" startline="102" endline="118">
public void handleEvent (Event event) {
    TableColumn tableColumn = (TableColumn) ((MenuItem) event.widget).getParent ().getData ();
    Table table = tableColumn.getParent ();
    if (table.getSortColumn () != tableColumn) {
        table.setSortColumn (tableColumn);
        table.setSortDirection (SWT.UP);
    } else {
        table.setSortDirection (table.getSortDirection () == SWT.UP ? SWT.DOWN : SWT.UP);
    }
    scanningResultList.sort (table.indexOf (tableColumn), table.getSortDirection () == SWT.UP);
    ((ResultTable) table).updateResults ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ColumnsActions.java" startline="125" endline="127">
public FetcherPreferences (FetcherRegistry fetcherRegistry) {
    this.fetcherRegistry = fetcherRegistry;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ColumnsActions.java" startline="129" endline="139">
public void handleEvent (Event event) {
    TableColumn tableColumn = (TableColumn) ((MenuItem) event.widget).getParent ().getData ();
    Fetcher fetcher = (Fetcher) tableColumn.getData ();
    fetcherRegistry.openPreferencesEditor (fetcher);
    tableColumn.setText (fetcher.getFullName ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ColumnsActions.java" startline="143" endline="143">
public AboutFetcher () {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ColumnsActions.java" startline="145" endline="159">
public void handleEvent (Event event) {
    TableColumn tableColumn = (TableColumn) ((MenuItem) event.widget).getParent ().getData ();
    Fetcher fetcher = (Fetcher) tableColumn.getData ();
    MessageBox messageBox = new MessageBox (tableColumn.getParent ().getShell (), SWT.ICON_INFORMATION | SWT.OK);
    messageBox.setText (Labels.getLabel ("text.fetchers.info") + fetcher.getName ());
    String info = fetcher.getInfo ();
    if (info == null) {
        info = Labels.getLabel ("text.fetchers.info.notAvailable");
    }
    messageBox.setMessage (info);
    messageBox.open ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="41" endline="45">
public Preferences (PreferencesDialog preferencesDialog, ResultTable resultTable, StatusBar statusBar) {
    this.preferencesDialog = preferencesDialog;
    this.resultTable = resultTable;
    this.statusBar = statusBar;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="47" endline="55">
public void handleEvent (Event event) {
    preferencesDialog.open ();
    resultTable.updateResults ();
    resultTable.updateColumnNames ();
    statusBar.updateConfigText ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="61" endline="63">
public ChooseFetchers (SelectFetchersDialog selectFetchersDialog) {
    this.selectFetchersDialog = selectFetchersDialog;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="65" endline="67">
public void handleEvent (Event event) {
    selectFetchersDialog.open ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="77" endline="83">
public ScanStatistics (GUIConfig guiConfig, StatisticsDialog statisticsDialog, StateMachine stateMachine, CommandLineProcessor commandProcessor) {
    this.guiConfig = guiConfig;
    this.statisticsDialog = statisticsDialog;
    if (! commandProcessor.shouldAutoQuit ()) stateMachine.addTransitionListener (this);

}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="85" endline="87">
public void handleEvent (Event event) {
    statisticsDialog.open ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="89" endline="94">
public void transitionTo (ScanningState state, Transition transition) {
    if (transition == Transition.COMPLETE && guiConfig.showScanStats) {
        handleEvent (null);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="104" endline="107">
public TableSelection (StatusBar statusBar, StateMachine stateMachine) {
    this.statusBar = statusBar;
    this.stateMachine = stateMachine;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="109" endline="118">
public void handleEvent (Event event) {
    if (stateMachine.inState (ScanningState.IDLE)) {
        Table resultTable = (Table) event.widget;
        int selectionCount = resultTable.getSelectionCount ();
        if (selectionCount > 1) statusBar.setStatusText (selectionCount + Labels.getLabel ("text.hostsSelected"));
        else statusBar.setStatusText (null);

    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="125" endline="128">
public SelectDesired (ResultTable resultTable) {
    this.resultTable = resultTable;
    this.results = resultTable.getScanningResults ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="130" endline="141">
public void handleEvent (Event event) {
    int count = resultTable.getItemCount ();
    resultTable.deselectAll ();
    for (int i = 0;
    i < count; i ++) {
        if (isDesired (results.getResult (i).getType ())) {
            resultTable.select (i);
        }
    }
    event.widget = resultTable;
    resultTable.notifyListeners (SWT.Selection, event);
    resultTable.forceFocus ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="148" endline="150">
public SelectAlive (ResultTable resultTable) {
    super (resultTable);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="152" endline="154">
boolean isDesired (ResultType type) {
    return type.ordinal () >= ALIVE.ordinal ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="159" endline="161">
public SelectDead (ResultTable resultTable) {
    super (resultTable);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="163" endline="165">
boolean isDesired (ResultType type) {
    return type == DEAD;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="170" endline="172">
public SelectWithPorts (ResultTable resultTable) {
    super (resultTable);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="174" endline="176">
boolean isDesired (ResultType type) {
    return type == WITH_PORTS;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="181" endline="183">
public SelectWithoutPorts (ResultTable resultTable) {
    super (resultTable);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="185" endline="187">
boolean isDesired (ResultType type) {
    return type == ALIVE;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="197" endline="199">
public SelectAll (ResultTable resultTable) {
    this.resultTable = resultTable;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="201" endline="210">
public void handleEvent (Event event) {
    if (event.type == SWT.KeyDown && event.keyCode == 'a' && event.stateMask == SWT.MOD1) {
        resultTable.selectAll ();
        event.widget = resultTable;
        resultTable.notifyListeners (SWT.Selection, event);
        event.doit = false;
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="217" endline="219">
public SelectInvert (ResultTable resultTable) {
    this.resultTable = resultTable;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/ToolsActions.java" startline="221" endline="236">
public void handleEvent (Event event) {
    int count = resultTable.getItemCount ();
    resultTable.setRedraw (false);
    for (int i = 0;
    i < count; i ++) {
        if (resultTable.isSelected (i)) resultTable.deselect (i);
        else resultTable.select (i);

    }
    resultTable.setRedraw (true);
    resultTable.redraw ();
    event.widget = resultTable;
    resultTable.notifyListeners (SWT.Selection, event);
    resultTable.forceFocus ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/StartStopScanningAction.java" startline="63" endline="81">
StartStopScanningAction (Display display) {
    this.display = display;
    buttonImages [ScanningState.IDLE.ordinal ()] = new Image (display, Labels.getInstance ().getImageAsStream ("button.start.img"));
    buttonImages [ScanningState.SCANNING.ordinal ()] = new Image (display, Labels.getInstance ().getImageAsStream ("button.stop.img"));
    buttonImages [ScanningState.STARTING.ordinal ()] = buttonImages [ScanningState.SCANNING.ordinal ()];
    buttonImages [ScanningState.RESTARTING.ordinal ()] = buttonImages [ScanningState.SCANNING.ordinal ()];
    buttonImages [ScanningState.STOPPING.ordinal ()] = new Image (display, Labels.getInstance ().getImageAsStream ("button.kill.img"));
    buttonImages [ScanningState.KILLING.ordinal ()] = buttonImages [ScanningState.STOPPING.ordinal ()];
    buttonTexts [ScanningState.IDLE.ordinal ()] = Labels.getLabel ("button.start");
    buttonTexts [ScanningState.SCANNING.ordinal ()] = Labels.getLabel ("button.stop");
    buttonTexts [ScanningState.STARTING.ordinal ()] = buttonTexts [ScanningState.SCANNING.ordinal ()];
    buttonTexts [ScanningState.RESTARTING.ordinal ()] = buttonTexts [ScanningState.SCANNING.ordinal ()];
    buttonTexts [ScanningState.STOPPING.ordinal ()] = Labels.getLabel ("button.kill");
    buttonTexts [ScanningState.KILLING.ordinal ()] = Labels.getLabel ("button.kill");
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/StartStopScanningAction.java" startline="84" endline="105">
public StartStopScanningAction (ScannerDispatcherThreadFactory scannerThreadFactory, StateMachine stateMachine, ResultTable resultTable, StatusBar statusBar, FeederGUIRegistry feederRegistry, PingerRegistry pingerRegistry,@Named("startStopButton")
Button startStopButton, GUIConfig guiConfig) {
    this (startStopButton.getDisplay ());
    this.scannerThreadFactory = scannerThreadFactory;
    this.resultTable = resultTable;
    this.statusBar = statusBar;
    this.feederRegistry = feederRegistry;
    this.pingerRegistry = pingerRegistry;
    this.button = startStopButton;
    this.stateMachine = stateMachine;
    this.guiConfig = guiConfig;
    stateMachine.addTransitionListener (this);
    ScanningState state = stateMachine.getState ();
    button.setImage (buttonImages [state.ordinal ()]);
    button.setText (buttonTexts [state.ordinal ()]);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/StartStopScanningAction.java" startline="110" endline="112">
public void widgetDefaultSelected (SelectionEvent e) {
    widgetSelected (e);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/StartStopScanningAction.java" startline="117" endline="124">
public void widgetSelected (SelectionEvent event) {
    if (stateMachine.inState (ScanningState.IDLE)) {
        if (! preScanChecks ()) return;

    }
    stateMachine.transitionToNext ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/StartStopScanningAction.java" startline="126" endline="141">
private boolean preScanChecks () {
    pingerRegistry.checkSelectedPinger ();
    if (guiConfig.askScanConfirmation && resultTable.getItemCount () > 0) {
        MessageBox box = new MessageBox (resultTable.getShell (), SWT.ICON_QUESTION | SWT.YES | SWT.NO | SWT.SHEET);
        box.setText (Labels.getLabel ("text.scan.new"));
        box.setMessage (Labels.getLabel ("text.scan.confirmation"));
        if (box.open () != SWT.YES) {
            return false;
        }
    }
    return true;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/StartStopScanningAction.java" startline="143" endline="197">
public void transitionTo (final ScanningState state, final Transition transition) {
    if (statusBar.isDisposed () || transition == Transition.INIT) return;

    switch (state) {
        case IDLE :
            button.setEnabled (true);
            updateProgress (null, 0, 0);
            statusBar.setStatusText (null);
            break;
        case STARTING :
            if (transition != Transition.CONTINUE) resultTable.removeAll ();

            try {
                scannerThread = scannerThreadFactory.createScannerThread (feederRegistry.createFeeder (), StartStopScanningAction.this, createResultsCallback (state));
                stateMachine.startScanning ();
                mainWindowTitle = statusBar.getShell ().getText ();
            } catch (RuntimeException e) {
                stateMachine.reset ();
                throw e;
            }
            break;
        case RESTARTING :
            resultTable.resetSelection ();
            try {
                scannerThread = scannerThreadFactory.createScannerThread (feederRegistry.createRescanFeeder (resultTable.getSelection ()), StartStopScanningAction.this, createResultsCallback (state));
                stateMachine.startScanning ();
                mainWindowTitle = statusBar.getShell ().getText ();
            } catch (RuntimeException e) {
                stateMachine.reset ();
                throw e;
            }
            break;
        case SCANNING :
            scannerThread.start ();
            break;
        case STOPPING :
            statusBar.setStatusText (Labels.getLabel ("state.waitForThreads"));
            break;
        case KILLING :
            button.setEnabled (false);
            statusBar.setStatusText (Labels.getLabel ("state.killingThreads"));
            break;
    }
    button.setImage (buttonImages [state.ordinal ()]);
    button.setText (buttonTexts [state.ordinal ()]);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/StartStopScanningAction.java" startline="202" endline="235">
private ScanningResultCallback createResultsCallback (ScanningState state) {
    if (guiConfig.displayMethod == DisplayMethod.ALL || state == ScanningState.RESTARTING) {
        return new ScanningResultCallback () {
            public void prepareForResults (ScanningResult result) {
                resultTable.addOrUpdateResultRow (result);
            } public void consumeResults (ScanningResult result) {
                resultTable.addOrUpdateResultRow (result);
            }}

        ;
    }
    if (guiConfig.displayMethod == DisplayMethod.ALIVE) {
        return new ScanningResultCallback () {
            public void prepareForResults (ScanningResult result) {
            } public void consumeResults (ScanningResult result) {
                if (result.getType ().ordinal () >= ResultType.ALIVE.ordinal ()) resultTable.addOrUpdateResultRow (result);

            }}

        ;
    }
    if (guiConfig.displayMethod == DisplayMethod.PORTS) {
        return new ScanningResultCallback () {
            public void prepareForResults (ScanningResult result) {
            } public void consumeResults (ScanningResult result) {
                if (result.getType () == ResultType.WITH_PORTS) resultTable.addOrUpdateResultRow (result);

            }}

        ;
    }
    throw new UnsupportedOperationException (guiConfig.displayMethod.toString ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/StartStopScanningAction.java" startline="206" endline="208">
public void prepareForResults (ScanningResult result) {
    resultTable.addOrUpdateResultRow (result);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/StartStopScanningAction.java" startline="209" endline="211">
public void consumeResults (ScanningResult result) {
    resultTable.addOrUpdateResultRow (result);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/StartStopScanningAction.java" startline="216" endline="217">
public void prepareForResults (ScanningResult result) {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/StartStopScanningAction.java" startline="218" endline="221">
public void consumeResults (ScanningResult result) {
    if (result.getType ().ordinal () >= ResultType.ALIVE.ordinal ()) resultTable.addOrUpdateResultRow (result);

}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/StartStopScanningAction.java" startline="226" endline="227">
public void prepareForResults (ScanningResult result) {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/StartStopScanningAction.java" startline="228" endline="231">
public void consumeResults (ScanningResult result) {
    if (result.getType () == ResultType.WITH_PORTS) resultTable.addOrUpdateResultRow (result);

}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/StartStopScanningAction.java" startline="237" endline="262">
public void updateProgress (final InetAddress currentAddress, final int runningThreads, final int percentageComplete) {
    if (display.isDisposed ()) return;

    display.asyncExec (new Runnable () {
        public void run () {
            if (statusBar.isDisposed ()) return;

            if (currentAddress != null) {
                statusBar.setStatusText (Labels.getLabel ("state.scanning") + currentAddress.getHostAddress ());
            }
            statusBar.setRunningThreads (runningThreads);
            statusBar.setProgress (percentageComplete);
            if (! stateMachine.inState (ScanningState.IDLE)) statusBar.getShell ().setText (percentageComplete + "% - " + mainWindowTitle);
            else statusBar.getShell ().setText (mainWindowTitle);

            button.setImage (buttonImages [stateMachine.getState ().ordinal ()]);
        }}

    );
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/StartStopScanningAction.java" startline="241" endline="260">
public void run () {
    if (statusBar.isDisposed ()) return;

    if (currentAddress != null) {
        statusBar.setStatusText (Labels.getLabel ("state.scanning") + currentAddress.getHostAddress ());
    }
    statusBar.setRunningThreads (runningThreads);
    statusBar.setProgress (percentageComplete);
    if (! stateMachine.inState (ScanningState.IDLE)) statusBar.getShell ().setText (percentageComplete + "% - " + mainWindowTitle);
    else statusBar.getShell ().setText (mainWindowTitle);

    button.setImage (buttonImages [stateMachine.getState ().ordinal ()]);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/OpenerLauncher.java" startline="34" endline="37">
public OpenerLauncher (FetcherRegistry fetcherRegistry, ScanningResultList scanningResults) {
    this.fetcherRegistry = fetcherRegistry;
    this.scanningResults = scanningResults;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/OpenerLauncher.java" startline="39" endline="66">
public void launch (Opener opener, int selectedItem) {
    String openerString = prepareOpenerStringForItem (opener.execString, selectedItem);
    if (openerString.startsWith ("http:") || openerString.startsWith ("https:") || openerString.startsWith ("ftp:") || openerString.startsWith ("mailto:") || openerString.startsWith ("\\\\")) {
        BrowserLauncher.openURL (openerString);
    } else {
        try {
            if (opener.inTerminal) {
                TerminalLauncher.launchInTerminal (openerString, opener.workingDir);
            } else {
                if (Platform.LINUX) {
                    Runtime.getRuntime ().exec (new String [] {"sh", "-c", openerString}, null, opener.workingDir);
                } else {
                    Runtime.getRuntime ().exec (splitCommand (openerString), null, opener.workingDir);
                }
            }
        } catch (Exception e) {
            throw new UserErrorException ("opener.failed", openerString);
        }
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/OpenerLauncher.java" startline="73" endline="97">
static String [] splitCommand (String command) {
    StringTokenizer tokenizer = new StringTokenizer (command);
    List < String > result = new ArrayList < String > ();
    while (tokenizer.hasMoreTokens ()) {
        String token = tokenizer.nextToken (" \t");
        try {
            if (token.startsWith ("\"")) {
                token = token.substring (1) + tokenizer.nextToken ("\"");
                tokenizer.nextToken (" \t");
            } else if (token.startsWith ("'")) {
                token = token.substring (1) + tokenizer.nextToken ("'");
                tokenizer.nextToken (" \t");
            }

        } catch (NoSuchElementException e) {
        }
        result.add (token);
    }
    return result.toArray (new String [result.size ()]);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/OpenerLauncher.java" startline="105" endline="123">
String prepareOpenerStringForItem (String openerString, int selectedItem) {
    Pattern paramsPattern = Pattern.compile ("\\$\\{(.+?)\\}");
    Matcher matcher = paramsPattern.matcher (openerString);
    StringBuffer sb = new StringBuffer (64);
    while (matcher.find ()) {
        String fetcherId = matcher.group (1);
        Object scannedValue = getScannedValue (selectedItem, fetcherId);
        if (scannedValue == null || scannedValue instanceof Empty) {
            throw new UserErrorException ("opener.nullFetcherValue", fetcherId);
        }
        matcher.appendReplacement (sb, scannedValue.toString ());
    }
    matcher.appendTail (sb);
    return sb.toString ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/OpenerLauncher.java" startline="125" endline="140">
private Object getScannedValue (int selectedItem, String fetcherId) {
    int fetcherIndex = fetcherRegistry.getSelectedFetcherIndex (fetcherId);
    if (fetcherIndex < 0) {
        throw new UserErrorException ("opener.unknownFetcher", fetcherId);
    }
    Object value = scanningResults.getResult (selectedItem).getValues ().get (fetcherIndex);
    if ((value == null || value instanceof Empty) && fetcherId.equals (HostnameFetcher.ID)) {
        value = scanningResults.getResult (selectedItem).getAddress ().getHostAddress ();
    }
    return value;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/TerminalLauncher.java" startline="41" endline="95">
public static void launchInTerminal (String execString, File workingDir) {
    try {
        if (Platform.WINDOWS) {
            File batFile = File.createTempFile ("launch", ".cmd");
            batFile.deleteOnExit ();
            FileWriter writer = new FileWriter (batFile);
            writer.write ("@rem This is a temporary file generated by Angry IP Scanner\n" + "@start cmd /k " + execString);
            writer.close ();
            Runtime.getRuntime ().exec (batFile.getAbsolutePath (), null, workingDir);
        } else if (Platform.MAC_OS) {
            Runtime.getRuntime ().exec (new String [] {"osascript", "-e", "tell application \"Terminal\" to do script \"" + execString + "\""}, null, workingDir);
        } else {
            if (workingTerminal == UNKNOWN) {
                detectWorkingTerminal ();
            }
            switch (workingTerminal) {
                case GNOME :
                    Runtime.getRuntime ().exec (new String [] {"gnome-terminal", "-x", "bash", "-c", execString + ";bash"}, null, workingDir);
                    break;
                case XFCE :
                    Runtime.getRuntime ().exec (new String [] {"xfce4-terminal", "-x", "sh", "-c", execString + ";sh"}, null, workingDir);
                    break;
                case KDE :
                    Runtime.getRuntime ().exec (new String [] {"konsole", "-e", "bash", "-c", execString + ";bash"}, null, workingDir);
                    break;
                default :
                    Runtime.getRuntime ().exec (new String [] {"xterm", "-e", "sh", "-c", execString + ";sh"}, null, workingDir);
            }
        }

    } catch (Exception e) {
        LOG.log (Level.WARNING, "openTerminal.failed", e);
        if (workingTerminal != XTERM) {
            workingTerminal = XTERM;
            launchInTerminal (execString, workingDir);
        } else {
            throw new UserErrorException ("openTerminal.failed", execString);
        }
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/actions/TerminalLauncher.java" startline="97" endline="112">
private static void detectWorkingTerminal () throws InterruptedException, IOException {
    if (Runtime.getRuntime ().exec (new String [] {"pidof", "nautilus"}).waitFor () == 0) {
        workingTerminal = GNOME;
    } else if (Runtime.getRuntime ().exec (new String [] {"pidof", "xfce4-session", "xfwm4", "Thunar", "xfdesktop"}).waitFor () == 0) {
        workingTerminal = XFCE;
    } else if (Runtime.getRuntime ().exec (new String [] {"pidof", "dcopserver"}).waitFor () == 0) {
        workingTerminal = KDE;
    } else {
        workingTerminal = XTERM;
    }

}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/InfoDialog.java" startline="27" endline="30">
public InfoDialog (String title, String title2) {
    this.title = title;
    this.title2 = title2;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/InfoDialog.java" startline="33" endline="59">
protected void populateShell () {
    shell.setText (title);
    shell.setLayout (LayoutHelper.formLayout (10, 10, 15));
    Label iconLabel = new Label (shell, SWT.ICON);
    iconLabel.setLayoutData (formData (new FormAttachment (0), null, new FormAttachment (0), null));
    iconLabel.setImage (shell.getImage ());
    Label titleLabel = new Label (shell, SWT.NONE);
    FontData sysFontData = shell.getDisplay ().getSystemFont ().getFontData () [0];
    titleLabel.setLayoutData (formData (new FormAttachment (iconLabel), null, new FormAttachment (0), null));
    titleLabel.setFont (new Font (null, sysFontData.getName (), sysFontData.getHeight () + 3, sysFontData.getStyle () | SWT.BOLD));
    titleLabel.setText (title2);
    Button button = createCloseButton ();
    Text statsText = new Text (shell, SWT.MULTI | SWT.READ_ONLY);
    statsText.setBackground (shell.getBackground ());
    statsText.setLayoutData (formData (new FormAttachment (iconLabel), new FormAttachment (100, - 20), new FormAttachment (titleLabel), null));
    statsText.setText (message);
    statsText.pack ();
    Point buttonSize = button.getSize ();
    button.setLayoutData (formData (buttonSize.x, buttonSize.y, null, new FormAttachment (100), new FormAttachment (statsText), null));
    shell.pack ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/InfoDialog.java" startline="62" endline="64">
protected int getShellStyle () {
    return super.getShellStyle () | SWT.SHEET;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/InfoDialog.java" startline="69" endline="71">
public String getMessage () {
    return message;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/InfoDialog.java" startline="76" endline="79">
public InfoDialog setMessage (String message) {
    this.message = message;
    return this;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/menu/OpenersMenu.java" startline="16" endline="31">
public OpenersMenu (Shell parent, CommandsMenuActions.EditOpeners editOpenersListener, CommandsMenuActions.ShowOpenersMenu showOpenersMenuListener) {
    super (parent);
    initMenuItem (this, "menu.commands.open.edit", null, null, editOpenersListener);
    initMenuItem (this, null, null, null, null);
    addListener (SWT.Show, showOpenersMenuListener);
    Event e = new Event ();
    e.widget = this;
    showOpenersMenuListener.handleEvent (e);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/menu/OpenersMenu.java" startline="34" endline="36">
public String getId () {
    return "menu.commands.open";
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/menu/ScanMenu.java" startline="15" endline="35">
public ScanMenu (Shell parent, ScanMenuActions.LoadFromFile loadFromFile, ScanMenuActions.SaveAll saveAll, ScanMenuActions.SaveSelection saveSelection, ScanMenuActions.Quit quit) {
    super (parent);
    initMenuItem (this, "menu.scan.load", "", SWT.MOD1 | 'O', loadFromFile, true);
    initMenuItem (this, "menu.scan.exportAll", "Ctrl+S", SWT.MOD1 | 'S', saveAll, false);
    initMenuItem (this, "menu.scan.exportSelection", null, null, saveSelection, false);
    if (! Platform.MAC_OS) {
        initMenuItem (this, null, null, null, null);
        initMenuItem (this, "menu.scan.quit", "Ctrl+Q", SWT.MOD1 | 'Q', quit);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/menu/ScanMenu.java" startline="38" endline="40">
public String getId () {
    return "menu.scan";
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/menu/ResultsContextMenu.java" startline="13" endline="15">
public ResultsContextMenu (Shell parent, CommandsMenuActions actions, OpenersMenu openersMenu) {
    super (parent, SWT.POP_UP, actions, openersMenu);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/menu/HelpMenu.java" startline="15" endline="43">
public HelpMenu (Shell parent, HelpMenuActions.GettingStarted gettingStarted, HelpMenuActions.Website website, HelpMenuActions.FAQ faq, HelpMenuActions.Issues issues, HelpMenuActions.Plugins plugins, HelpMenuActions.CommandLineUsage commandLineUsage, HelpMenuActions.CheckVersion checkVersion, HelpMenuActions.About about) {
    super (parent);
    initMenuItem (this, "menu.help.gettingStarted", ! Platform.MAC_OS ? "F1" : null, Platform.MAC_OS ? SWT.HELP : SWT.F1, gettingStarted);
    initMenuItem (this, null, null, null, null);
    initMenuItem (this, "menu.help.website", null, null, website);
    initMenuItem (this, "menu.help.faq", null, null, faq);
    initMenuItem (this, "menu.help.issues", null, null, issues);
    initMenuItem (this, "menu.help.plugins", null, null, plugins);
    initMenuItem (this, null, null, null, null);
    initMenuItem (this, "menu.help.cmdLine", null, null, commandLineUsage);
    if (! Platform.MAC_OS) {
        initMenuItem (this, null, null, null, null);
        initMenuItem (this, "menu.help.checkVersion", null, null, checkVersion);
        initMenuItem (this, null, null, null, null);
        initMenuItem (this, "menu.help.about", null, null, about);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/menu/HelpMenu.java" startline="46" endline="48">
public String getId () {
    return "menu.help";
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/menu/ToolsMenu.java" startline="18" endline="42">
public ToolsMenu (Shell parent, ToolsActions.Preferences preferences, ToolsActions.ChooseFetchers chooseFetchers, ToolsActions.ScanStatistics scanStatistics, ToolsActions.SelectAlive selectAlive, ToolsActions.SelectDead selectDead, ToolsActions.SelectWithPorts selectWithPorts, ToolsActions.SelectWithoutPorts selectWithoutPorts, ToolsActions.SelectInvert selectInvert) {
    super (parent);
    initMenuItem (this, "menu.tools.preferences", "Ctrl+Shift+P", SWT.MOD1 | (Platform.MAC_OS ? ',' : SWT.MOD2 | 'P'), preferences, true);
    initMenuItem (this, "menu.tools.fetchers", "Ctrl+Shift+O", SWT.MOD1 | SWT.MOD2 | (Platform.MAC_OS ? ',' : 'O'), chooseFetchers, true);
    initMenuItem (this, null, null, null, null);
    Menu selectMenu = initMenu (this, "menu.tools.select");
    initMenuItem (this, "menu.tools.scanStatistics", "Ctrl+T", SWT.MOD1 | 'T', scanStatistics);
    initMenuItem (selectMenu, "menu.tools.select.alive", null, null, selectAlive, true);
    initMenuItem (selectMenu, "menu.tools.select.dead", null, null, selectDead, true);
    initMenuItem (selectMenu, "menu.tools.select.withPorts", null, null, selectWithPorts, true);
    initMenuItem (selectMenu, "menu.tools.select.withoutPorts", null, null, selectWithoutPorts, true);
    initMenuItem (selectMenu, null, null, null, null);
    initMenuItem (selectMenu, "menu.tools.select.invert", "Ctrl+I", SWT.MOD1 | 'I', selectInvert, true);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/menu/ToolsMenu.java" startline="44" endline="52">
private static Menu initMenu (Menu menu, String label) {
    MenuItem menuItem = new MenuItem (menu, SWT.CASCADE);
    menuItem.setText (Labels.getLabel (label));
    Menu subMenu = new Menu (menu.getShell (), SWT.DROP_DOWN);
    menuItem.setMenu (subMenu);
    return subMenu;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/menu/ToolsMenu.java" startline="55" endline="57">
public String getId () {
    return "menu.tools";
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/menu/CommandsMenu.java" startline="16" endline="18">
public CommandsMenu (Shell parent, CommandsMenuActions actions, OpenersMenu openersMenu) {
    this (parent, SWT.DROP_DOWN, actions, openersMenu);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/menu/CommandsMenu.java" startline="20" endline="37">
protected CommandsMenu (Shell parent, int style, CommandsMenuActions actions, OpenersMenu openersMenu) {
    super (parent, style);
    initMenuItem (this, "menu.commands.details", null, null, actions.details);
    initMenuItem (this, null, null, null, null);
    initMenuItem (this, "menu.commands.rescan", "Ctrl+R", SWT.MOD1 | 'R', actions.rescan, true);
    initMenuItem (this, "menu.commands.delete", Platform.MAC_OS ? "⌦" : "Del", null, actions.delete, true);
    initMenuItem (this, null, null, null, null);
    initMenuItem (this, "menu.commands.copy", Platform.MAC_OS ? "⌘C" : "Ctrl+C", null, actions.copyIP);
    initMenuItem (this, "menu.commands.copyDetails", null, null, actions.copyIPDetails);
    initMenuItem (this, null, null, null, null);
    MenuItem openersMenuItem = new MenuItem (this, SWT.CASCADE);
    openersMenuItem.setText (Labels.getLabel (openersMenu.getId ()));
    openersMenuItem.setMenu (openersMenu);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/menu/CommandsMenu.java" startline="40" endline="42">
public String getId () {
    return "menu.commands";
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/menu/GotoMenu.java" startline="14" endline="34">
public GotoMenu (Shell parent, GotoMenuActions.NextAliveHost nextAliveHost, GotoMenuActions.NextHostWithInfo nextHostWithInfo, GotoMenuActions.NextDeadHost nextDeadHost, GotoMenuActions.PrevAliveHost prevAliveHost, GotoMenuActions.PrevHostWithInfo prevHostWithInfo, GotoMenuActions.PrevDeadHost prevDeadHost, GotoMenuActions.Find find) {
    super (parent);
    initMenuItem (this, "menu.goto.next.aliveHost", "Ctrl+H", SWT.MOD1 | 'H', nextAliveHost);
    initMenuItem (this, "menu.goto.next.openPort", "Ctrl+J", SWT.MOD1 | 'J', nextHostWithInfo);
    initMenuItem (this, "menu.goto.next.deadHost", "Ctrl+K", SWT.MOD1 | 'K', nextDeadHost);
    initMenuItem (this, null, null, null, null);
    initMenuItem (this, "menu.goto.prev.aliveHost", "Ctrl+Shift+H", SWT.MOD1 | SWT.MOD2 | 'H', prevAliveHost);
    initMenuItem (this, "menu.goto.prev.openPort", "Ctrl+Shift+J", SWT.MOD1 | SWT.MOD2 | 'J', prevHostWithInfo);
    initMenuItem (this, "menu.goto.prev.deadHost", "Ctrl+Shift+K", SWT.MOD1 | SWT.MOD2 | 'K', prevDeadHost);
    initMenuItem (this, null, null, null, null);
    initMenuItem (this, "menu.goto.find", "Ctrl+F", SWT.MOD1 | 'F', find);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/menu/GotoMenu.java" startline="37" endline="39">
public String getId () {
    return "menu.goto";
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/menu/AbstractMenu.java" startline="8" endline="10">
public AbstractMenu (Shell parent, int style) {
    super (parent, style);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/menu/AbstractMenu.java" startline="12" endline="14">
public AbstractMenu (Shell parent) {
    super (parent, SWT.DROP_DOWN);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/menu/ExtendableMenu.java" startline="12" endline="14">
public ExtendableMenu (Shell parent, int style) {
    super (parent, style);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/menu/ExtendableMenu.java" startline="16" endline="18">
static MenuItem initMenuItem (Menu parent, String label, String acceleratorText, Integer accelerator, Listener listener) {
    return initMenuItem (parent, label, acceleratorText, accelerator, listener, false);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/menu/ExtendableMenu.java" startline="20" endline="39">
static MenuItem initMenuItem (Menu parent, String label, String acceleratorText, Integer accelerator, Listener listener, boolean disableDuringScanning) {
    MenuItem menuItem = new MenuItem (parent, label == null ? SWT.SEPARATOR : SWT.PUSH);
    if (label != null) menuItem.setText (Labels.getLabel (label) + (acceleratorText != null ? "\t" + acceleratorText : ""));

    if (accelerator != null) menuItem.setAccelerator (accelerator);

    if (listener != null) menuItem.addListener (SWT.Selection, listener);
    else menuItem.setEnabled (false);

    if (disableDuringScanning) {
        menuItem.setData ("disableDuringScanning", true);
    }
    return menuItem;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/menu/ExtendableMenu.java" startline="42" endline="42">
protected void checkSubclass () {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/menu/ColumnsMenu.java" startline="18" endline="28">
public ColumnsMenu (Shell parent, ColumnsActions.SortBy sortByListener, ColumnsActions.AboutFetcher aboutListener, ColumnsActions.FetcherPreferences preferencesListener) {
    super (parent, SWT.POP_UP);
    initMenuItem (this, "menu.columns.sortBy", null, null, sortByListener);
    initMenuItem (this, "menu.columns.preferences", null, null, preferencesListener);
    initMenuItem (this, "menu.columns.about", null, null, aboutListener);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/menu/FavoritesMenu.java" startline="17" endline="29">
public FavoritesMenu (Shell parent, FavoritesMenuActions.Add addListener, FavoritesMenuActions.Edit editListener, FavoritesMenuActions.ShowMenu showFavoritesMenuListener) {
    super (parent);
    initMenuItem (this, "menu.favorites.add", "Ctrl+D", SWT.MOD1 | 'D', addListener);
    initMenuItem (this, "menu.favorites.edit", null, null, editListener);
    initMenuItem (this, null, null, null, null);
    addListener (SWT.Show, showFavoritesMenuListener);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/menu/FavoritesMenu.java" startline="32" endline="34">
public String getId () {
    return "menu.favorites";
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/StatisticsDialog.java" startline="27" endline="30">
public StatisticsDialog (ScanningResultList scanningResults) {
    super (Labels.getLabel ("title.statistics"), null);
    this.scanningResults = scanningResults;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/StatisticsDialog.java" startline="33" endline="48">
public void open () {
    if (scanningResults.isInfoAvailable ()) {
        setMessage (prepareText ());
        if (shell != null) {
            shell.close ();
            shell.dispose ();
        }
        super.open ();
    } else {
        throw new UserErrorException ("commands.noResults");
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/StatisticsDialog.java" startline="50" endline="70">
String prepareText () {
    ScanInfo scanInfo = scanningResults.getScanInfo ();
    title2 = Labels.getLabel (scanInfo.isCompletedNormally () ? "text.scan.completed" : "text.scan.incomplete");
    String ln = System.getProperty ("line.separator");
    StringBuilder text = new StringBuilder ();
    text.append (Labels.getLabel ("text.scan.time.total")).append (timeToText (scanInfo.getScanTime ())).append (ln);
    text.append (Labels.getLabel ("text.scan.time.average")).append (timeToText ((double) scanInfo.getScanTime () / scanInfo.getHostCount ())).append (ln);
    text.append (ln).append (scanningResults.getFeederName ()).append (ln).append (scanningResults.getFeederInfo ()).append (ln).append (ln);
    text.append (Labels.getLabel ("text.scan.hosts.total")).append (scanInfo.getHostCount ()).append (ln);
    text.append (Labels.getLabel ("text.scan.hosts.alive")).append (scanInfo.getAliveCount ()).append (ln);
    if (scanInfo.getWithPortsCount () > 0) text.append (Labels.getLabel ("text.scan.hosts.ports")).append (scanInfo.getWithPortsCount ()).append (ln);

    return text.toString ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/StatisticsDialog.java" startline="76" endline="86">
static String timeToText (double scanTime) {
    double totalSeconds = scanTime / 1000;
    double totalMinutes = totalSeconds / 60;
    double totalHours = totalMinutes / 60;
    NumberFormat format = new DecimalFormat ("#.#");
    if (totalHours >= 1) return format.format (totalHours) + Labels.getLabel ("unit.hour");

    if (totalMinutes >= 1) return format.format (totalMinutes) + Labels.getLabel ("unit.minute");

    return format.format (totalSeconds) + Labels.getLabel ("unit.second");
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/AboutDialog.java" startline="26" endline="27">
public AboutDialog () {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/AboutDialog.java" startline="30" endline="85">
protected void populateShell () {
    shell.setText (Labels.getLabel ("title.about"));
    shell.setSize (new Point (400, 393));
    Label iconLabel = new Label (shell, SWT.ICON);
    iconLabel.setLocation (10, 10);
    if (shell.getImage () != null) {
        iconLabel.setImage (shell.getImage ());
    }
    iconLabel.pack ();
    int leftBound = iconLabel.getBounds ().width + 20;
    String aboutText = Labels.getLabel ("text.about");
    aboutText = aboutText.replace ("%NAME", NAME);
    aboutText = aboutText.replace ("%VERSION", getVersion ());
    aboutText = aboutText.replace ("%DATE", getBuildDate ());
    aboutText = aboutText.replace ("%COPYLEFT", COPYLEFT);
    Label aboutLabel = new Label (shell, SWT.NONE);
    aboutLabel.setText (aboutText);
    aboutLabel.setLocation (leftBound, 10);
    aboutLabel.pack ();
    Label websiteLabel = createLinkLabel (WEBSITE, WEBSITE);
    websiteLabel.setLocation (leftBound, 10 + aboutLabel.getBounds ().height);
    String systemText = Labels.getLabel ("text.about.system");
    systemText = systemText.replace ("%JAVA", System.getProperty ("java.vm.vendor") + " " + System.getProperty ("java.runtime.version"));
    systemText = systemText.replace ("%OS", System.getProperty ("os.name") + " " + System.getProperty ("os.version") + " (" + System.getProperty ("os.arch") + ")");
    Label systemLabel = new Label (shell, SWT.NONE);
    systemLabel.setText (systemText);
    systemLabel.setLocation (leftBound, 20 + aboutLabel.getBounds ().height + websiteLabel.getBounds ().height);
    systemLabel.pack ();
    Button button = createCloseButton ();
    Text licenseText = new Text (shell, SWT.BORDER | SWT.MULTI | SWT.READ_ONLY | SWT.V_SCROLL | SWT.WRAP);
    licenseText.setBounds (leftBound, systemLabel.getBounds ().y + systemLabel.getBounds ().height + 10, shell.getClientArea ().width - leftBound - 10, button.getLocation ().y - systemLabel.getBounds ().y - systemLabel.getBounds ().height - 20);
    licenseText.setBackground (shell.getDisplay ().getSystemColor (SWT.COLOR_LIST_BACKGROUND));
    licenseText.setText ("Licensed under the GNU General Public License Version 2\n\n" + NAME + " is free software; you can redistribute it and/or " + "modify it under the terms of the GNU General Public License " + "as published by the Free Software Foundation; either version 2 " + "of the License, or (at your option) any later version.\n\n" + NAME + " is distributed in the hope that it will be useful, " + "but WITHOUT ANY WARRANTY; without even the implied warranty of " + "MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the " + "GNU General Public License for more details.");
    Label fullLicenseLabel = createLinkLabel ("Full license", Version.FULL_LICENSE_URL);
    fullLicenseLabel.setLocation (leftBound, licenseText.getBounds ().y + licenseText.getBounds ().height + 10);
    Label privacyLabel = createLinkLabel ("Privacy", Version.PRIVACY_URL);
    privacyLabel.setLocation (leftBound + privacyLabel.getBounds ().width + 40, fullLicenseLabel.getBounds ().y);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/AboutDialog.java" startline="88" endline="90">
protected int getShellStyle () {
    return super.getShellStyle () | SWT.SHEET;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/AboutDialog.java" startline="92" endline="105">
private Label createLinkLabel (final String text, final String url) {
    final Label link = new Label (shell, SWT.NONE);
    link.setForeground (new Color (null, 0, 0, 0xCC));
    link.setCursor (shell.getDisplay ().getSystemCursor (SWT.CURSOR_HAND));
    link.setText (text);
    link.addListener (SWT.MouseUp, new Listener () {
        public void handleEvent (Event event) {
            BrowserLauncher.openURL (url);
            link.setForeground (new Color (null, 0x88, 0, 0xAA));
        }}

    );
    link.pack ();
    return link;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/AboutDialog.java" startline="98" endline="101">
public void handleEvent (Event event) {
    BrowserLauncher.openURL (url);
    link.setForeground (new Color (null, 0x88, 0, 0xAA));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/EditOpenersDialog.java" startline="39" endline="42">
public EditOpenersDialog (FetcherRegistry fetcherRegistry, OpenersConfig openersConfig) {
    this.fetcherRegistry = fetcherRegistry;
    this.openersConfig = openersConfig;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/EditOpenersDialog.java" startline="45" endline="157">
protected void populateShell () {
    Display currentDisplay = Display.getCurrent ();
    Shell parent = currentDisplay != null ? currentDisplay.getActiveShell () : null;
    shell = new Shell (parent, SWT.APPLICATION_MODAL | SWT.DIALOG_TRIM);
    shell.setText (Labels.getLabel ("title.openers.edit"));
    shell.setLayout (LayoutHelper.formLayout (10, 10, 4));
    Label messageLabel = new Label (shell, SWT.NONE);
    messageLabel.setText (Labels.getLabel ("text.openers.edit"));
    openersList = new List (shell, SWT.BORDER | SWT.MULTI | SWT.V_SCROLL);
    editFieldsGroup = new Group (shell, SWT.NONE);
    openersList.setLayoutData (formData (135, 200, null, null, new FormAttachment (messageLabel, 10), new FormAttachment (editFieldsGroup, 0, SWT.BOTTOM)));
    for (String name : openersConfig) {
        openersList.add (name);
    }
    openersList.addListener (SWT.Selection, new ItemSelectListener ());
    Button upButton = new Button (shell, SWT.NONE);
    upButton.setText (Labels.getLabel ("button.up"));
    upButton.addListener (SWT.Selection, new UpButtonListener (openersList) {
        @Override
        public void handleEvent (Event event) {
            super.handleEvent (event);
            currentSelectionIndex = openersList.getSelectionIndex ();
        }}

    );
    Button downButton = new Button (shell, SWT.NONE);
    downButton.setText (Labels.getLabel ("button.down"));
    downButton.addListener (SWT.Selection, new DownButtonListener (openersList) {
        @Override
        public void handleEvent (Event event) {
            super.handleEvent (event);
            currentSelectionIndex = openersList.getSelectionIndex ();
        }}

    );
    Button addButton = new Button (shell, SWT.NONE);
    addButton.setText (Labels.getLabel ("button.add"));
    addButton.addListener (SWT.Selection, new AddButtonListener ());
    Button deleteButton = new Button (shell, SWT.NONE);
    deleteButton.setText (Labels.getLabel ("button.delete"));
    deleteButton.addListener (SWT.Selection, new DeleteButtonListener ());
    upButton.setLayoutData (formData (new FormAttachment (openersList), new FormAttachment (deleteButton, 0, SWT.RIGHT), new FormAttachment (messageLabel, 10), null));
    downButton.setLayoutData (formData (new FormAttachment (openersList), new FormAttachment (deleteButton, 0, SWT.RIGHT), new FormAttachment (upButton), null));
    addButton.setLayoutData (formData (new FormAttachment (openersList), new FormAttachment (deleteButton, 0, SWT.RIGHT), new FormAttachment (downButton, 16), null));
    deleteButton.setLayoutData (formData (new FormAttachment (openersList), null, new FormAttachment (addButton), null));
    editFieldsGroup.setLayoutData (formData (new FormAttachment (upButton, 10), null, new FormAttachment (messageLabel, 10), null));
    RowLayout rowLayout = new RowLayout (SWT.VERTICAL);
    rowLayout.fill = true;
    rowLayout.justify = true;
    rowLayout.marginTop = 13;
    editFieldsGroup.setLayout (rowLayout);
    Label openerNameLabel = new Label (editFieldsGroup, SWT.NONE);
    openerNameLabel.setText (Labels.getLabel ("text.openers.name"));
    openerNameLabel.setSize (SWT.DEFAULT, 18);
    openerNameText = new Text (editFieldsGroup, SWT.BORDER);
    openerNameText.setSize (SWT.DEFAULT, 22);
    openerNameText.addListener (SWT.KeyUp, new OpenerNameChange ());
    isInTerminalCheckbox = new Button (editFieldsGroup, SWT.CHECK);
    isInTerminalCheckbox.setText (Labels.getLabel ("text.openers.inTerminal"));
    isInTerminalCheckbox.setSize (SWT.DEFAULT, 18);
    Label openerStringLabel = new Label (editFieldsGroup, SWT.NONE);
    openerStringLabel.setText (Labels.getLabel ("text.openers.string"));
    openerStringLabel.setSize (SWT.DEFAULT, 18);
    openerStringText = new Text (editFieldsGroup, SWT.BORDER);
    openerStringText.setSize (SWT.DEFAULT, 22);
    Button hintButton = new Button (editFieldsGroup, SWT.NONE);
    hintButton.setText (Labels.getLabel ("text.openers.hint"));
    hintButton.addListener (SWT.Selection, new HintButtonListener ());
    Label openerDirLabel = new Label (editFieldsGroup, SWT.NONE);
    openerDirLabel.setText (Labels.getLabel ("text.openers.directory"));
    openerDirLabel.setSize (SWT.DEFAULT, 18);
    workingDirText = new Text (editFieldsGroup, SWT.BORDER);
    workingDirText.setSize (SWT.DEFAULT, 22);
    editFieldsGroup.layout ();
    editFieldsGroup.pack ();
    Button okButton = new Button (shell, SWT.NONE);
    okButton.setText (Labels.getLabel ("button.OK"));
    Button cancelButton = new Button (shell, SWT.NONE);
    cancelButton.setText (Labels.getLabel ("button.cancel"));
    positionButtonsInFormLayout (okButton, cancelButton, editFieldsGroup);
    shell.pack ();
    okButton.addSelectionListener (new SelectionAdapter () {
        public void widgetSelected (org.eclipse.swt.events.SelectionEvent e) {
            saveOpeners ();
            shell.close ();
        }}

    );
    cancelButton.addSelectionListener (new SelectionAdapter () {
        public void widgetSelected (org.eclipse.swt.events.SelectionEvent e) {
            shell.close ();
        }}

    );
    openersList.select (0);
    loadFieldsForSelection ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/EditOpenersDialog.java" startline="68" endline="71">
public void handleEvent (Event event) {
    super.handleEvent (event);
    currentSelectionIndex = openersList.getSelectionIndex ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/EditOpenersDialog.java" startline="77" endline="80">
public void handleEvent (Event event) {
    super.handleEvent (event);
    currentSelectionIndex = openersList.getSelectionIndex ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/EditOpenersDialog.java" startline="144" endline="147">
public void widgetSelected (org.eclipse.swt.events.SelectionEvent e) {
    saveOpeners ();
    shell.close ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/EditOpenersDialog.java" startline="150" endline="152">
public void widgetSelected (org.eclipse.swt.events.SelectionEvent e) {
    shell.close ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/EditOpenersDialog.java" startline="159" endline="166">
private void saveOpeners () {
    saveCurrentFields ();
    openersConfig.update (openersList.getItems ());
    openersConfig.store ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/EditOpenersDialog.java" startline="168" endline="175">
private void saveCurrentFields () {
    if (currentSelectionIndex < 0) return;

    String openerName = openerNameText.getText ();
    File workingDir = workingDirText.getText ().length () > 0 ? new File (workingDirText.getText ()) : null;
    openersConfig.add (openerName, new OpenersConfig.Opener (openerStringText.getText (), isInTerminalCheckbox.getSelection (), workingDir));
    openersList.setItem (currentSelectionIndex, openerName);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/EditOpenersDialog.java" startline="177" endline="188">
private void loadFieldsForSelection () {
    currentSelectionIndex = openersList.getSelectionIndex ();
    if (currentSelectionIndex < 0) return;

    String openerName = openersList.getItem (currentSelectionIndex);
    editFieldsGroup.setText (openerName);
    Opener opener = openersConfig.getOpener (openerName);
    openerNameText.setText (openerName);
    openerStringText.setText (opener.execString);
    workingDirText.setText (opener.workingDir != null ? opener.workingDir.toString () : "");
    isInTerminalCheckbox.setSelection (opener.inTerminal);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/EditOpenersDialog.java" startline="191" endline="202">
public void handleEvent (Event event) {
    StringBuilder message = new StringBuilder (Labels.getLabel ("text.openers.hintText"));
    for (Fetcher fetcher : fetcherRegistry.getSelectedFetchers ()) {
        message.append ("${").append (fetcher.getId ()).append ("}   - ").append (fetcher.getName ()).append ('\n');
    }
    MessageBox mb = new MessageBox (shell, SWT.ICON_INFORMATION | SWT.OK);
    mb.setText (Labels.getLabel ("title.openers.edit"));
    mb.setMessage (message.toString ());
    mb.open ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/EditOpenersDialog.java" startline="206" endline="212">
public void handleEvent (Event event) {
    int oldIndex = openersList.getSelectionIndex ();
    openersList.remove (openersList.getSelectionIndices ());
    if (oldIndex >= openersList.getItemCount ()) oldIndex = openersList.getItemCount () - 1;

    openersList.setSelection (oldIndex);
    loadFieldsForSelection ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/EditOpenersDialog.java" startline="216" endline="236">
public void handleEvent (Event event) {
    saveCurrentFields ();
    currentSelectionIndex = openersList.getSelectionIndex ();
    if (currentSelectionIndex < 0) {
        currentSelectionIndex = openersList.getItemCount ();
    }
    String newName = Labels.getLabel ("text.openers.new");
    openersList.add (newName, currentSelectionIndex);
    openersList.setSelection (currentSelectionIndex);
    editFieldsGroup.setText (newName);
    openerNameText.setText (newName);
    openerStringText.setText ("${fetcher.ip}");
    workingDirText.setText ("");
    isInTerminalCheckbox.setSelection (false);
    openerNameText.forceFocus ();
    openerNameText.setSelection (0, newName.length ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/EditOpenersDialog.java" startline="240" endline="246">
public void handleEvent (Event event) {
    if (openersList.getSelectionCount () == 0) return;

    saveCurrentFields ();
    loadFieldsForSelection ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/EditOpenersDialog.java" startline="250" endline="255">
public void handleEvent (Event event) {
    if (currentSelectionIndex < 0) return;

    String name = openerNameText.getText ();
    editFieldsGroup.setText (name);
    openersList.setItem (currentSelectionIndex, name);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/MacApplicationMenu.java" startline="24" endline="30">
public MacApplicationMenu (final Display display) {
    display.syncExec (new Runnable () {
        public void run () {
            initApplicationMenu (display);
        }}

    );
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/MacApplicationMenu.java" startline="26" endline="28">
public void run () {
    initApplicationMenu (display);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/MacApplicationMenu.java" startline="32" endline="68">
private void initApplicationMenu (Display display) {
    Menu systemMenu = display.getSystemMenu ();
    if (systemMenu == null) return;

    MenuItem prefs = getItem (systemMenu, SWT.ID_PREFERENCES);
    if (prefs != null) prefs.addSelectionListener (new SelectionAdapter () {
        @Override
        public void widgetSelected (SelectionEvent e) {
            preferencesDialog.open ();
        }}

    );

    MenuItem about = getItem (systemMenu, SWT.ID_ABOUT);
    if (about != null) about.addSelectionListener (new SelectionAdapter () {
        @Override
        public void widgetSelected (SelectionEvent e) {
            aboutDialog.open ();
        }}

    );

    MenuItem fetchers = new MenuItem (systemMenu, SWT.NONE, systemMenu.indexOf (prefs) + 1);
    fetchers.setText (Labels.getLabel ("menu.tools.fetchers"));
    fetchers.addSelectionListener (new SelectionAdapter () {
        @Override
        public void widgetSelected (SelectionEvent e) {
            selectFetchersDialog.open ();
        }}

    );
    MenuItem checkVersion = new MenuItem (systemMenu, SWT.NONE, systemMenu.indexOf (about) + 1);
    checkVersion.setText (Labels.getLabel ("menu.help.checkVersion"));
    checkVersion.addSelectionListener (new SelectionAdapter () {
        @Override
        public void widgetSelected (SelectionEvent e) {
            checkVersionListener.check (true);
        }}

    );
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/MacApplicationMenu.java" startline="39" endline="41">
public void widgetSelected (SelectionEvent e) {
    preferencesDialog.open ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/MacApplicationMenu.java" startline="47" endline="49">
public void widgetSelected (SelectionEvent e) {
    aboutDialog.open ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/MacApplicationMenu.java" startline="56" endline="58">
public void widgetSelected (SelectionEvent e) {
    selectFetchersDialog.open ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/MacApplicationMenu.java" startline="64" endline="66">
public void widgetSelected (SelectionEvent e) {
    checkVersionListener.check (true);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/MacApplicationMenu.java" startline="70" endline="76">
private static MenuItem getItem (Menu menu, int id) {
    MenuItem [] items = menu.getItems ();
    for (MenuItem item : items) {
        if (item.getID () == id) return item;

    }
    return null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/MainMenu.java" startline="32" endline="53">
public MainMenu (Shell parent,@Named("mainMenu")
Menu mainMenu, ScanMenu scanMenu, GotoMenu gotoMenu, CommandsMenu commandsMenu, FavoritesMenu favoritesMenu, ToolsMenu toolsMenu, HelpMenu helpMenu, ResultsContextMenu resultsContextMenu, StateMachine stateMachine) {
    parent.setMenuBar (mainMenu);
    addMenuItem (mainMenu, scanMenu);
    addMenuItem (mainMenu, gotoMenu);
    addMenuItem (mainMenu, commandsMenu);
    addMenuItem (mainMenu, favoritesMenu);
    addMenuItem (mainMenu, toolsMenu);
    addMenuItem (mainMenu, helpMenu);
    stateMachine.addTransitionListener (new MenuEnablerDisabler (mainMenu));
    stateMachine.addTransitionListener (new MenuEnablerDisabler (resultsContextMenu));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/MainMenu.java" startline="55" endline="59">
private void addMenuItem (Menu mainMenu, AbstractMenu menu) {
    MenuItem menuItem = new MenuItem (mainMenu, SWT.CASCADE);
    menuItem.setText (Labels.getLabel (menu.getId ()));
    menuItem.setMenu (menu);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/MainMenu.java" startline="68" endline="70">
public MenuEnablerDisabler (Menu menu) {
    this.menu = menu;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/MainMenu.java" startline="72" endline="76">
public void transitionTo (final ScanningState state, Transition transition) {
    if (transition != Transition.START && transition != Transition.COMPLETE) return;

    processMenu (menu, state == ScanningState.IDLE);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/MainMenu.java" startline="78" endline="89">
public void processMenu (Menu menu, boolean isEnabled) {
    for (MenuItem item : menu.getItems ()) {
        if (item.getData ("disableDuringScanning") == Boolean.TRUE) {
            item.setEnabled (isEnabled);
        } else if (item.getMenu () != null) {
            processMenu (item.getMenu (), isEnabled);
        }

    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/SWTAwareStateMachine.java" startline="27" endline="29">
public SWTAwareStateMachine (Display display) {
    this.display = display;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/SWTAwareStateMachine.java" startline="32" endline="42">
protected void notifyAboutTransition (final Transition transition) {
    if (display.isDisposed ()) return;

    display.asyncExec (new Runnable () {
        public void run () {
            SWTAwareStateMachine.super.notifyAboutTransition (transition);
        }}

    );
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/SWTAwareStateMachine.java" startline="38" endline="40">
public void run () {
    SWTAwareStateMachine.super.notifyAboutTransition (transition);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/feeders/FeederGUIRegistry.java" startline="38" endline="47">
public FeederGUIRegistry (List < AbstractFeederGUI > allTheFeeders,@Named("feederSelectionCombo")
Combo feederSelectionCombo, GUIConfig guiConfig) {
    this.feederGUIList = allTheFeeders;
    this.feederSelectionCombo = feederSelectionCombo;
    for (AbstractFeederGUI feederGUI : feederGUIList) {
        feederSelectionCombo.add (feederGUI.getFeederName ());
    }
    this.guiConfig = guiConfig;
    this.currentFeederGUI = allTheFeeders.get (0);
    this.lastFeeder = currentFeederGUI.createFeeder ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/feeders/FeederGUIRegistry.java" startline="49" endline="51">
public AbstractFeederGUI current () {
    return currentFeederGUI;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/feeders/FeederGUIRegistry.java" startline="56" endline="66">
public void select (int newActiveFeeder) {
    currentFeederGUI.setVisible (false);
    currentFeederGUI = feederGUIList.get (newActiveFeeder);
    guiConfig.activeFeeder = newActiveFeeder;
    currentFeederGUI.setVisible (true);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/feeders/FeederGUIRegistry.java" startline="68" endline="70">
public Iterator < AbstractFeederGUI > iterator () {
    return feederGUIList.iterator ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/feeders/FeederGUIRegistry.java" startline="75" endline="87">
public void select (String feederId) {
    for (int i = 0;
    i < feederGUIList.size (); i ++) {
        AbstractFeederGUI guiFeeder = feederGUIList.get (i);
        if (guiFeeder.getFeederId ().equals (feederId) || guiFeeder.getFeederName ().equals (feederId)) {
            feederSelectionCombo.select (i);
            feederSelectionCombo.notifyListeners (SWT.Selection, null);
            return;
        }
    }
    throw new FeederException ("Feeder not found: " + feederId);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/feeders/FeederGUIRegistry.java" startline="92" endline="95">
public Feeder createFeeder () {
    lastFeeder = current ().createFeeder ();
    return lastFeeder;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/feeders/FeederGUIRegistry.java" startline="101" endline="107">
public Feeder createRescanFeeder (TableItem [] selection) {
    String [] addresses = new String [selection.length];
    for (int i = 0;
    i < selection.length; i ++) {
        addresses [i] = selection [i].getText ();
    }
    return new RescanFeeder (lastFeeder, addresses);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/feeders/RangeFeederGUI.java" startline="47" endline="50">
public RangeFeederGUI (@Named("feederArea")
Composite parent) {
    super (parent);
    feeder = new RangeFeeder ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/feeders/RangeFeederGUI.java" startline="52" endline="129">
public void initialize () {
    setLayout (new GridLayout (5, false));
    Label ipRangeLabel = new Label (this, SWT.NONE);
    startIPText = new Text (this, SWT.BORDER);
    Label toLabel = new Label (this, SWT.NONE);
    endIPText = new Text (this, SWT.BORDER);
    Label hostnameLabel = new Label (this, SWT.NONE);
    hostnameText = new Text (this, SWT.BORDER);
    ipUpButton = new Button (this, SWT.NONE);
    netmaskCombo = new Combo (this, SWT.NONE);
    startIPText.setText ("255.255.255.255xx");
    int textWidth = startIPText.computeSize (SWT.DEFAULT, SWT.DEFAULT).x;
    startIPText.setText ("");
    startIPText.setLayoutData (new GridData (textWidth, - 1));
    endIPText.setLayoutData (new GridData (textWidth, - 1));
    hostnameText.setLayoutData (new GridData (textWidth, - 1));
    netmaskCombo.setLayoutData (new GridData (GridData.FILL_HORIZONTAL));
    ((GridData) endIPText.getLayoutData ()).horizontalSpan = 2;
    GridData ipUpData = new GridData ();
    ipUpData.horizontalSpan = 2;
    ipUpButton.setLayoutData (ipUpData);
    ipRangeLabel.setText (getLabel ("feeder.range") + ":");
    ipRangeLabel.setLayoutData (new GridData (GridData.HORIZONTAL_ALIGN_END));
    hostnameLabel.setText (getLabel ("feeder.range.hostname") + ":");
    hostnameLabel.setLayoutData (new GridData (GridData.HORIZONTAL_ALIGN_END));
    toLabel.setText (getLabel ("feeder.range.to"));
    startIPText.addModifyListener (new StartIPModifyListener ());
    endIPText.addKeyListener (new EndIPKeyListener ());
    FeederActions.HostnameButton hostnameListener = new FeederActions.HostnameButton (hostnameText, startIPText, netmaskCombo) {
        public void widgetSelected (SelectionEvent event) {
            isEndIPUnedited = true;
            netmaskCombo.setText (getLabel ("feeder.range.netmask"));
            super.widgetSelected (event);
        }}

    ;
    hostnameText.addTraverseListener (hostnameListener);
    hostnameText.setToolTipText (getLabel ("feeder.range.hostname.tooltip"));
    Listener netmaskResetListener = new NetmaskResetListener ();
    startIPText.addListener (SWT.Modify, netmaskResetListener);
    endIPText.addListener (SWT.Modify, netmaskResetListener);
    ipUpButton.setImage (new Image (getDisplay (), Labels.getInstance ().getImageAsStream ("button.ipUp.img")));
    ipUpButton.setText (getLabel ("button.ipUp"));
    ipUpButton.addSelectionListener (hostnameListener);
    netmaskCombo.setText (getLabel ("feeder.range.netmask"));
    netmaskCombo.setVisibleItemCount (10);
    netmaskCombo.add ("/26");
    netmaskCombo.add ("/24");
    netmaskCombo.add ("/16");
    netmaskCombo.add ("255...192");
    netmaskCombo.add ("255...128");
    netmaskCombo.add ("255...0");
    netmaskCombo.add ("255..0.0");
    netmaskCombo.add ("255.0.0.0");
    NetmaskListener netmaskSelectionListener = new NetmaskListener ();
    netmaskCombo.addListener (SWT.Selection, netmaskSelectionListener);
    netmaskCombo.addListener (SWT.Traverse, netmaskSelectionListener);
    netmaskCombo.setToolTipText (getLabel ("feeder.range.netmask.tooltip"));
    pack ();
    asyncFillLocalHostInfo (hostnameText, startIPText);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/feeders/RangeFeederGUI.java" startline="88" endline="95">
public void widgetSelected (SelectionEvent event) {
    isEndIPUnedited = true;
    netmaskCombo.setText (getLabel ("feeder.range.netmask"));
    super.widgetSelected (event);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/feeders/RangeFeederGUI.java" startline="131" endline="134">
public Feeder createFeeder () {
    feeder = new RangeFeeder (startIPText.getText (), endIPText.getText ());
    return feeder;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/feeders/RangeFeederGUI.java" startline="136" endline="138">
public String [] serialize () {
    return new String [] {startIPText.getText (), endIPText.getText ()};
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/feeders/RangeFeederGUI.java" startline="140" endline="146">
public void unserialize (String [] parts) {
    startIPText.setText (parts [0]);
    endIPText.setText (parts [1]);
    netmaskCombo.setText (getLabel ("feeder.range.netmask"));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/feeders/RangeFeederGUI.java" startline="148" endline="150">
public String [] serializePartsLabels () {
    return new String [] {"feeder.range.startIP", "feeder.range.endIP"};
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/feeders/RangeFeederGUI.java" startline="153" endline="155">
public void keyPressed (KeyEvent e) {
    isEndIPUnedited = false;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/feeders/RangeFeederGUI.java" startline="157" endline="158">
public void keyReleased (KeyEvent e) {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/feeders/RangeFeederGUI.java" startline="162" endline="166">
public void handleEvent (Event event) {
    if (! modifyListenersDisabled) netmaskCombo.setText (getLabel ("feeder.range.netmask"));

}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/feeders/RangeFeederGUI.java" startline="170" endline="174">
public void modifyText (ModifyEvent e) {
    if (isEndIPUnedited) {
        endIPText.setText (startIPText.getText ());
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/feeders/RangeFeederGUI.java" startline="178" endline="210">
public void handleEvent (Event event) {
    if (event.type == SWT.Traverse) {
        if (event.detail != SWT.TRAVERSE_RETURN) return;

        event.doit = false;
    }
    if (event.type == SWT.Selection) {
        if (netmaskCombo.indexOf (netmaskCombo.getText ()) < 0) return;

        if (Platform.WINDOWS && netmaskCombo.getListVisible ()) return;

    }
    try {
        String netmaskString = netmaskCombo.getText ();
        InetAddress startIP = InetAddress.getByName (startIPText.getText ());
        updateStartEndWithNetmask (startIP, netmaskString);
    } catch (UnknownHostException e) {
        throw new FeederException ("invalidNetmask");
    }
    if (event.type == SWT.Traverse) {
        getParent ().forceFocus ();
    } else {
        netmaskCombo.forceFocus ();
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/feeders/RangeFeederGUI.java" startline="213" endline="225">
private void updateStartEndWithNetmask (InetAddress ip, String netmaskString) {
    try {
        InetAddress netmask = parseNetmask (netmaskString);
        modifyListenersDisabled = true;
        startIPText.setText (startRangeByNetmask (ip, netmask).getHostAddress ());
        endIPText.setText (endRangeByNetmask (ip, netmask).getHostAddress ());
        modifyListenersDisabled = false;
        isEndIPUnedited = false;
    } catch (UnknownHostException e) {
        LOG.fine (e.toString ());
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/feeders/RangeFeederGUI.java" startline="228" endline="232">
protected void afterLocalHostInfoFilled (InterfaceAddress localInterface) {
    InetAddress address = localInterface.getAddress ();
    if (! address.isLoopbackAddress ()) updateStartEndWithNetmask (address, "/" + localInterface.getNetworkPrefixLength ());

}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/feeders/AbstractFeederGUI.java" startline="32" endline="36">
public AbstractFeederGUI (Composite parent) {
    super (parent, SWT.NONE);
    setVisible (false);
    initialize ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/feeders/AbstractFeederGUI.java" startline="43" endline="45">
public String getFeederId () {
    return feeder.getId ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/feeders/AbstractFeederGUI.java" startline="50" endline="52">
public String getFeederName () {
    return feeder.getName ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/feeders/AbstractFeederGUI.java" startline="57" endline="59">
public String getInfo () {
    return getFeederName () + ": " + createFeeder ().getInfo ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/feeders/AbstractFeederGUI.java" startline="71" endline="99">
protected void asyncFillLocalHostInfo (final Text hostnameText, final Text ipText) {
    new Thread () {
        public void run () {
            synchronized (localResolveLock) {
                if (localInterface == null) {
                    localInterface = InetAddressUtils.getLocalInterface ();
                    try {
                        localName = InetAddress.getLocalHost ().getHostName ();
                    } catch (UnknownHostException e) {
                        localName = localInterface.getAddress ().getHostName ();
                    }
                }
                Display.getDefault ().asyncExec (new Runnable () {
                    public void run () {
                        if ("".equals (hostnameText.getText ())) hostnameText.setText (localName);

                        if ("".equals (ipText.getText ())) {
                            ipText.setText (localInterface.getAddress ().getHostAddress ());
                            afterLocalHostInfoFilled (localInterface);
                        }
                    }}

                );
            }
        }}

    .start ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/feeders/AbstractFeederGUI.java" startline="73" endline="97">
public void run () {
    synchronized (localResolveLock) {
        if (localInterface == null) {
            localInterface = InetAddressUtils.getLocalInterface ();
            try {
                localName = InetAddress.getLocalHost ().getHostName ();
            } catch (UnknownHostException e) {
                localName = localInterface.getAddress ().getHostName ();
            }
        }
        Display.getDefault ().asyncExec (new Runnable () {
            public void run () {
                if ("".equals (hostnameText.getText ())) hostnameText.setText (localName);

                if ("".equals (ipText.getText ())) {
                    ipText.setText (localInterface.getAddress ().getHostAddress ());
                    afterLocalHostInfoFilled (localInterface);
                }
            }}

        );
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/feeders/AbstractFeederGUI.java" startline="86" endline="94">
public void run () {
    if ("".equals (hostnameText.getText ())) hostnameText.setText (localName);

    if ("".equals (ipText.getText ())) {
        ipText.setText (localInterface.getAddress ().getHostAddress ());
        afterLocalHostInfoFilled (localInterface);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/feeders/AbstractFeederGUI.java" startline="101" endline="102">
protected void afterLocalHostInfoFilled (InterfaceAddress localInterface) {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/feeders/RandomFeederGUI.java" startline="39" endline="42">
public RandomFeederGUI (@Named("feederArea")
Composite parent) {
    super (parent);
    feeder = new RandomFeeder ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/feeders/RandomFeederGUI.java" startline="44" endline="111">
public void initialize () {
    setLayout (new GridLayout (5, false));
    Label ipPrototypeLabel = new Label (this, SWT.NONE);
    ipPrototypeText = new Text (this, SWT.BORDER);
    Label ipMaskLabel = new Label (this, SWT.NONE);
    ipMaskCombo = new Combo (this, SWT.NONE);
    Label hostnameLabel = new Label (this, SWT.NONE);
    hostnameText = new Text (this, SWT.BORDER);
    ipUpButton = new Button (this, SWT.NONE);
    Label countLabel = new Label (this, SWT.NONE);
    countSpinner = new Spinner (this, SWT.BORDER);
    ipPrototypeText.setText ("255.255.255.255xx");
    int textWidth = ipPrototypeText.computeSize (SWT.DEFAULT, SWT.DEFAULT).x;
    ipPrototypeText.setText ("");
    ipPrototypeText.setLayoutData (new GridData (textWidth, - 1));
    ipPrototypeLabel.setText (getLabel ("feeder.random.prototype") + ":");
    ipPrototypeLabel.setLayoutData (new GridData (GridData.HORIZONTAL_ALIGN_END));
    ipMaskLabel.setText (getLabel ("feeder.random.mask") + ":");
    ipMaskCombo.setVisibleItemCount (10);
    ipMaskCombo.add ("255...128");
    ipMaskCombo.add ("255...0");
    ipMaskCombo.add ("255..0.0");
    ipMaskCombo.add ("255.0.0.0");
    ipMaskCombo.add ("0.0.0.0");
    ipMaskCombo.add ("255..0.255");
    ipMaskCombo.add ("255.0.0.255");
    ipMaskCombo.select (3);
    ipMaskCombo.setLayoutData (new GridData ());
    ((GridData) ipMaskCombo.getLayoutData ()).horizontalSpan = 2;
    hostnameLabel.setText (getLabel ("feeder.random.hostname") + ":");
    ipMaskLabel.setLayoutData (new GridData (GridData.HORIZONTAL_ALIGN_END));
    FeederActions.HostnameButton hostnameSelectionListener = new FeederActions.HostnameButton (hostnameText, ipPrototypeText, ipMaskCombo);
    hostnameText.addTraverseListener (hostnameSelectionListener);
    hostnameText.setLayoutData (new GridData (textWidth, - 1));
    ipUpButton.setImage (new Image (getDisplay (), Labels.getInstance ().getImageAsStream ("button.ipUp.img")));
    ipUpButton.setText (getLabel ("button.ipUp"));
    ipUpButton.addSelectionListener (hostnameSelectionListener);
    countLabel.setText (getLabel ("feeder.random.count"));
    countSpinner.setSelection (100);
    countSpinner.setMaximum (100000);
    countSpinner.setMinimum (1);
    countSpinner.setLayoutData (new GridData (GridData.FILL_HORIZONTAL));
    countSpinner.addTraverseListener (new TraverseListener () {
        public void keyTraversed (TraverseEvent e) {
            ipPrototypeText.forceFocus ();
            countSpinner.forceFocus ();
        }}

    );
    pack ();
    asyncFillLocalHostInfo (hostnameText, ipPrototypeText);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/feeders/RandomFeederGUI.java" startline="98" endline="104">
public void keyTraversed (TraverseEvent e) {
    ipPrototypeText.forceFocus ();
    countSpinner.forceFocus ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/feeders/RandomFeederGUI.java" startline="113" endline="116">
public Feeder createFeeder () {
    feeder = new RandomFeeder (ipPrototypeText.getText (), ipMaskCombo.getText (), countSpinner.getSelection ());
    return feeder;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/feeders/RandomFeederGUI.java" startline="118" endline="120">
public String [] serialize () {
    return new String [] {ipPrototypeText.getText (), ipMaskCombo.getText (), String.valueOf (countSpinner.getSelection ())};
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/feeders/RandomFeederGUI.java" startline="122" endline="126">
public void unserialize (String [] parts) {
    ipPrototypeText.setText (parts [0]);
    ipMaskCombo.setText (parts [1]);
    countSpinner.setSelection (Integer.parseInt (parts [2]));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/feeders/RandomFeederGUI.java" startline="128" endline="130">
public String [] serializePartsLabels () {
    return new String [] {"feeder.random.prototype", "feeder.random.mask", "feeder.random.count"};
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/feeders/FileFeederGUI.java" startline="32" endline="35">
public FileFeederGUI (@Named("feederArea")
Composite parent) {
    super (parent);
    feeder = new FileFeeder ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/feeders/FileFeederGUI.java" startline="37" endline="61">
public void initialize () {
    setLayout (new GridLayout (3, false));
    Label fileNameLabel = new Label (this, SWT.NONE);
    fileNameText = new Text (this, SWT.BORDER);
    Button browseButton = new Button (this, SWT.NONE);
    fileNameLabel.setText (getLabel ("feeder.file.name") + ":");
    fileNameText.setLayoutData (new GridData (160, - 1));
    browseButton.setText (getLabel ("feeder.file.browse"));
    browseButton.addSelectionListener (new SelectionAdapter () {
        public void widgetSelected (SelectionEvent e) {
            FileDialog dialog = new FileDialog (getShell ());
            dialog.setText (getLabel ("feeder.file.browse"));
            String fileName = dialog.open ();
            if (fileName != null) {
                fileNameText.setText (fileName);
                fileNameText.setSelection (fileName.length ());
            }
        }}

    );
    pack ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/feeders/FileFeederGUI.java" startline="49" endline="57">
public void widgetSelected (SelectionEvent e) {
    FileDialog dialog = new FileDialog (getShell ());
    dialog.setText (getLabel ("feeder.file.browse"));
    String fileName = dialog.open ();
    if (fileName != null) {
        fileNameText.setText (fileName);
        fileNameText.setSelection (fileName.length ());
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/feeders/FileFeederGUI.java" startline="63" endline="66">
public Feeder createFeeder () {
    feeder = new FileFeeder (fileNameText.getText ());
    return feeder;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/feeders/FileFeederGUI.java" startline="68" endline="70">
public String [] serialize () {
    return new String [] {fileNameText.getText ()};
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/feeders/FileFeederGUI.java" startline="72" endline="74">
public void unserialize (String [] parts) {
    fileNameText.setText (parts [0]);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/feeders/FileFeederGUI.java" startline="76" endline="78">
public String [] serializePartsLabels () {
    return new String [] {"feeder.file.name"};
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/fetchers/PortsFetcherPrefs.java" startline="22" endline="24">
public PortsFetcherPrefs (PreferencesDialog preferencesDialog) {
    this.preferencesDialog = preferencesDialog;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/fetchers/PortsFetcherPrefs.java" startline="26" endline="28">
public void openFor (Fetcher fetcher) {
    preferencesDialog.openTab (1);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/fetchers/PortTextFetcherPrefs.java" startline="37" endline="38">
public PortTextFetcherPrefs () {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/fetchers/PortTextFetcherPrefs.java" startline="40" endline="43">
public void openFor (Fetcher fetcher) {
    this.fetcher = (PortTextFetcher) fetcher;
    open ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/fetchers/PortTextFetcherPrefs.java" startline="46" endline="100">
protected void populateShell () {
    shell = new Shell (Display.getCurrent ().getActiveShell (), SWT.DIALOG_TRIM);
    shell.setText (fetcher.getName ());
    shell.setLayout (LayoutHelper.formLayout (10, 10, 5));
    Combo predefinedCombo = new Combo (shell, SWT.DROP_DOWN | SWT.READ_ONLY);
    predefinedCombo.add (Labels.getLabel ("fetcher.portText.custom"));
    predefinedCombo.select (0);
    predefinedCombo.setLayoutData (LayoutHelper.formData (null, new FormAttachment (100), new FormAttachment (0), null));
    Label sendLabel = new Label (shell, SWT.NONE);
    sendLabel.setText (Labels.getLabel ("text.fetcher.portText.send"));
    sendLabel.setLayoutData (LayoutHelper.formData (new FormAttachment (0), null, null, new FormAttachment (predefinedCombo, 0, SWT.BOTTOM)));
    textToSend = new Text (shell, SWT.BORDER);
    textToSend.setText (stringToText (fetcher.getTextToSend ()));
    textToSend.setLayoutData (LayoutHelper.formData (new FormAttachment (0), new FormAttachment (100), new FormAttachment (sendLabel), null));
    Label matchLabel = new Label (shell, SWT.NONE);
    matchLabel.setText (Labels.getLabel ("text.fetcher.portText.match"));
    matchLabel.setLayoutData (LayoutHelper.formData (new FormAttachment (0), null, new FormAttachment (textToSend), null));
    matchingRegexp = new Text (shell, SWT.BORDER);
    matchingRegexp.setText (fetcher.getMatchingRegexp ().pattern ());
    matchingRegexp.setLayoutData (LayoutHelper.formData (new FormAttachment (0), new FormAttachment (textToSend, 0, SWT.RIGHT), new FormAttachment (matchLabel), null));
    Label replaceLabel = new Label (shell, SWT.NONE);
    replaceLabel.setText (Labels.getLabel ("text.fetcher.portText.replace"));
    replaceLabel.setLayoutData (LayoutHelper.formData (new FormAttachment (0), null, new FormAttachment (matchingRegexp), null));
    extractGroup = new Text (shell, SWT.BORDER);
    extractGroup.setText ("$1");
    extractGroup.setLayoutData (LayoutHelper.formData (new FormAttachment (0), new FormAttachment (textToSend, 0, SWT.RIGHT), new FormAttachment (replaceLabel), null));
    Button okButton = new Button (shell, SWT.NONE);
    okButton.setText (Labels.getLabel ("button.OK"));
    Button cancelButton = new Button (shell, SWT.NONE);
    cancelButton.setText (Labels.getLabel ("button.cancel"));
    positionButtonsInFormLayout (okButton, cancelButton, extractGroup);
    okButton.addSelectionListener (new SelectionAdapter () {
        public void widgetSelected (SelectionEvent e) {
            savePreferences ();
            shell.close ();
        }}

    );
    cancelButton.addSelectionListener (new SelectionAdapter () {
        public void widgetSelected (SelectionEvent e) {
            shell.close ();
        }}

    );
    shell.pack ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/fetchers/PortTextFetcherPrefs.java" startline="88" endline="91">
public void widgetSelected (SelectionEvent e) {
    savePreferences ();
    shell.close ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/fetchers/PortTextFetcherPrefs.java" startline="94" endline="96">
public void widgetSelected (SelectionEvent e) {
    shell.close ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/fetchers/PortTextFetcherPrefs.java" startline="102" endline="113">
void savePreferences () {
    Preferences prefs = fetcher.getPreferences ();
    fetcher.setTextToSend (textToSend.getText ());
    prefs.put ("textToSend", fetcher.getTextToSend ());
    fetcher.setMatchingRegexp (Pattern.compile (matchingRegexp.getText ()));
    prefs.put ("matchingRegexp", fetcher.getMatchingRegexp ().pattern ());
    fetcher.setExtractGroup (parseInt (extractGroup.getText ().replace ("$", "")));
    prefs.putInt ("extractGroup", fetcher.getExtractGroup ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/fetchers/PortTextFetcherPrefs.java" startline="115" endline="128">
private String stringToText (String s) {
    StringBuilder t = new StringBuilder ();
    for (char c : s.toCharArray ()) {
        if (c == '\n') t.append ("\\n");
        else if (c == '\r') t.append ("\\r");
        else if (c == '\t') t.append ("\\t");
        else t.append (c);

    }
    return t.toString ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/fetchers/PingFetcherPrefs.java" startline="22" endline="24">
public PingFetcherPrefs (PreferencesDialog preferencesDialog) {
    this.preferencesDialog = preferencesDialog;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/fetchers/PingFetcherPrefs.java" startline="26" endline="28">
public void openFor (Fetcher fetcher) {
    preferencesDialog.openTab (0);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/ResultTable.java" startline="49" endline="79">
public ResultTable (Shell parent, GUIConfig guiConfig, FetcherRegistry fetcherRegistry, ScanningResultList scanningResultList, StateMachine stateMachine, ColumnsActions.ColumnClick columnClickListener, ColumnsActions.ColumnResize columnResizeListener) {
    super (parent, SWT.BORDER | SWT.MULTI | SWT.FULL_SELECTION | SWT.VIRTUAL);
    this.guiConfig = guiConfig;
    this.scanningResults = scanningResultList;
    this.fetcherRegistry = fetcherRegistry;
    setHeaderVisible (true);
    setLinesVisible (true);
    this.columnClickListener = columnClickListener;
    this.columnResizeListener = columnResizeListener;
    fetcherRegistry.addListener (this);
    handleUpdateOfSelectedFetchers (fetcherRegistry);
    listImages [ResultType.UNKNOWN.ordinal ()] = new Image (null, Labels.getInstance ().getImageAsStream ("list.unknown.img"));
    listImages [ResultType.DEAD.ordinal ()] = new Image (null, Labels.getInstance ().getImageAsStream ("list.dead.img"));
    listImages [ResultType.ALIVE.ordinal ()] = new Image (null, Labels.getInstance ().getImageAsStream ("list.alive.img"));
    listImages [ResultType.WITH_PORTS.ordinal ()] = new Image (null, Labels.getInstance ().getImageAsStream ("list.addinfo.img"));
    addListener (SWT.KeyDown, new CommandsMenuActions.Delete (this, stateMachine));
    addListener (SWT.KeyDown, new CommandsMenuActions.CopyIP (this));
    addListener (SWT.KeyDown, new ToolsActions.SelectAll (this));
    addListener (SWT.SetData, new SetDataListener ());
    stateMachine.addTransitionListener (this);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/ResultTable.java" startline="84" endline="102">
public void handleUpdateOfSelectedFetchers (FetcherRegistry fetcherRegistry) {
    removeAll ();
    for (TableColumn column : getColumns ()) {
        column.dispose ();
    }
    for (Fetcher fetcher : fetcherRegistry.getSelectedFetchers ()) {
        TableColumn tableColumn = new TableColumn (this, SWT.NONE);
        tableColumn.setWidth (guiConfig.getColumnWidth (fetcher));
        tableColumn.setData (fetcher);
        tableColumn.addListener (SWT.Selection, columnClickListener);
        tableColumn.addListener (SWT.Resize, columnResizeListener);
    }
    updateColumnNames ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/ResultTable.java" startline="104" endline="109">
public void updateColumnNames () {
    int i = 0;
    for (Fetcher fetcher : fetcherRegistry.getSelectedFetchers ()) {
        getColumn (i ++).setText (fetcher.getFullName ());
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/ResultTable.java" startline="111" endline="115">
protected void checkSubclass () {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/ResultTable.java" startline="126" endline="148">
public void addOrUpdateResultRow (final ScanningResult result) {
    if (isDisposed ()) return;

    getDisplay ().asyncExec (new Runnable () {
        public void run () {
            if (isDisposed ()) return;

            if (scanningResults.isRegistered (result)) {
                int index = scanningResults.update (result);
                clear (index);
            } else {
                int index = getItemCount ();
                scanningResults.registerAtIndex (index, result);
                new TableItem (ResultTable.this, SWT.NONE);
            }
        }}

    );
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/ResultTable.java" startline="130" endline="146">
public void run () {
    if (isDisposed ()) return;

    if (scanningResults.isRegistered (result)) {
        int index = scanningResults.update (result);
        clear (index);
    } else {
        int index = getItemCount ();
        scanningResults.registerAtIndex (index, result);
        new TableItem (ResultTable.this, SWT.NONE);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/ResultTable.java" startline="153" endline="155">
public void updateResults () {
    clearAll ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/ResultTable.java" startline="162" endline="170">
public void updateResult (int index, String fetcherId, Object newValue) {
    int fetcherIndex = scanningResults.getFetcherIndex (fetcherId);
    if (fetcherIndex >= 0) {
        scanningResults.getResult (index).setValue (fetcherIndex, newValue);
        clear (index);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/ResultTable.java" startline="176" endline="179">
public ScanningResult getSelectedResult () {
    int selectedIndex = getSelectionIndex ();
    return scanningResults.getResult (selectedIndex);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/ResultTable.java" startline="181" endline="186">
public void remove (int [] indices) {
    scanningResults.remove (indices);
    super.remove (indices);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/ResultTable.java" startline="188" endline="193">
public void removeAll () {
    scanningResults.clear ();
    super.removeAll ();
    setSortColumn (null);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/ResultTable.java" startline="199" endline="207">
public void resetSelection () {
    int [] selectionIndices = getSelectionIndices ();
    for (int itemNum : selectionIndices) {
        scanningResults.getResult (itemNum).reset ();
    }
    clear (selectionIndices);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/ResultTable.java" startline="212" endline="214">
public ScanningResultList getScanningResults () {
    return scanningResults;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/ResultTable.java" startline="221" endline="235">
public void handleEvent (Event event) {
    TableItem item = (TableItem) event.item;
    int tableIndex = indexOf (item);
    ScanningResult scanningResult = scanningResults.getResult (tableIndex);
    List < ? > values = scanningResult.getValues ();
    String [] resultStrings = new String [values.size ()];
    for (int i = 0;
    i < values.size (); i ++) {
        Object value = values.get (i);
        if (value != null) resultStrings [i] = value.toString ();

    }
    item.setText (resultStrings);
    item.setImage (0, listImages [scanningResult.getType ().ordinal ()]);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/ResultTable.java" startline="238" endline="241">
public void transitionTo (ScanningState state, Transition transition) {
    setCursor (getDisplay ().getSystemCursor (state == ScanningState.IDLE ? SWT.CURSOR_ARROW : SWT.CURSOR_APPSTARTING));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/SelectFetchersDialog.java" startline="36" endline="38">
public SelectFetchersDialog (FetcherRegistry fetcherRegistry) {
    this.fetcherRegistry = fetcherRegistry;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/SelectFetchersDialog.java" startline="40" endline="140">
protected void populateShell () {
    Display currentDisplay = Display.getCurrent ();
    Shell parent = currentDisplay != null ? currentDisplay.getActiveShell () : null;
    shell = new Shell (parent, SWT.APPLICATION_MODAL | SWT.DIALOG_TRIM);
    shell.setText (Labels.getLabel ("title.fetchers.select"));
    shell.setLayout (LayoutHelper.formLayout (10, 10, 4));
    Label messageLabel = new Label (shell, SWT.WRAP);
    messageLabel.setText (Labels.getLabel ("text.fetchers.select"));
    Label selectedLabel = new Label (shell, SWT.NONE);
    selectedLabel.setText (Labels.getLabel ("text.fetchers.selectedList"));
    selectedLabel.setLayoutData (LayoutHelper.formData (null, null, new FormAttachment (messageLabel, 5), null));
    selectedFetchersList = new List (shell, SWT.BORDER | SWT.MULTI | SWT.V_SCROLL);
    selectedFetchersList.setLayoutData (LayoutHelper.formData (140, 200, new FormAttachment (0), new FormAttachment (selectedLabel, 80, SWT.RIGHT), new FormAttachment (selectedLabel), null));
    Iterator < Fetcher > i = fetcherRegistry.getSelectedFetchers ().iterator ();
    i.next ();
    while (i.hasNext ()) {
        Fetcher fetcher = i.next ();
        selectedFetchersList.add (fetcher.getName ());
    }
    Button upButton = new Button (shell, SWT.NONE);
    upButton.setText (Labels.getLabel ("button.up"));
    Button downButton = new Button (shell, SWT.NONE);
    downButton.setText (Labels.getLabel ("button.down"));
    Button addButton = new Button (shell, SWT.NONE);
    addButton.setText (Labels.getLabel ("button.left"));
    Button removeButton = new Button (shell, SWT.NONE);
    removeButton.setText (Labels.getLabel ("button.right"));
    Button prefsButton = new Button (shell, SWT.NONE);
    prefsButton.setText (Labels.getLabel ("button.fetcherPrefs"));
    prefsButton.setToolTipText (Labels.getLabel ("text.fetchers.preferences"));
    upButton.setLayoutData (LayoutHelper.formData (new FormAttachment (selectedFetchersList), new FormAttachment (downButton, 0, SWT.RIGHT), new FormAttachment (selectedLabel), null));
    downButton.setLayoutData (LayoutHelper.formData (new FormAttachment (selectedFetchersList), null, new FormAttachment (upButton), null));
    addButton.setLayoutData (LayoutHelper.formData (new FormAttachment (selectedFetchersList), new FormAttachment (downButton, 0, SWT.RIGHT), new FormAttachment (downButton, 16), null));
    removeButton.setLayoutData (LayoutHelper.formData (new FormAttachment (selectedFetchersList), new FormAttachment (downButton, 0, SWT.RIGHT), new FormAttachment (addButton), null));
    prefsButton.setLayoutData (LayoutHelper.formData (new FormAttachment (selectedFetchersList), new FormAttachment (downButton, 0, SWT.RIGHT), new FormAttachment (removeButton, 16), null));
    Label registeredLabel = new Label (shell, SWT.NONE);
    registeredLabel.setText (Labels.getLabel ("text.fetchers.availableList"));
    registeredLabel.setLayoutData (LayoutHelper.formData (new FormAttachment (downButton, 10), null, new FormAttachment (messageLabel, 5), null));
    registeredFetchersList = new List (shell, SWT.BORDER | SWT.MULTI | SWT.V_SCROLL);
    registeredFetchersList.setLayoutData (LayoutHelper.formData (140, 200, new FormAttachment (downButton, 10), null, new FormAttachment (registeredLabel), null));
    i = fetcherRegistry.getRegisteredFetchers ().iterator ();
    i.next ();
    while (i.hasNext ()) {
        Fetcher fetcher = i.next ();
        String fetcherName = fetcher.getName ();
        registeredFetcherIdsByNames.put (fetcherName, fetcher.getId ());
        if (selectedFetchersList.indexOf (fetcherName) < 0) registeredFetchersList.add (fetcherName);

    }
    Button okButton = new Button (shell, SWT.NONE);
    okButton.setText (Labels.getLabel ("button.OK"));
    Button cancelButton = new Button (shell, SWT.NONE);
    cancelButton.setText (Labels.getLabel ("button.cancel"));
    positionButtonsInFormLayout (okButton, cancelButton, registeredFetchersList);
    upButton.addListener (SWT.Selection, new UpButtonListener (selectedFetchersList));
    downButton.addListener (SWT.Selection, new DownButtonListener (selectedFetchersList));
    AddRemoveButtonListener addButtonListener = new AddRemoveButtonListener (registeredFetchersList, selectedFetchersList);
    addButton.addListener (SWT.Selection, addButtonListener);
    registeredFetchersList.addListener (SWT.MouseDoubleClick, addButtonListener);
    AddRemoveButtonListener removeButtonListener = new AddRemoveButtonListener (selectedFetchersList, registeredFetchersList);
    removeButton.addListener (SWT.Selection, removeButtonListener);
    selectedFetchersList.addListener (SWT.MouseDoubleClick, removeButtonListener);
    prefsButton.addListener (SWT.Selection, new PrefsListener ());
    shell.layout ();
    Rectangle bounds = registeredFetchersList.getBounds ();
    messageLabel.setLayoutData (LayoutHelper.formData (bounds.x + bounds.width - 10, SWT.DEFAULT, new FormAttachment (0), null, null, null));
    shell.pack ();
    cancelButton.addListener (SWT.Selection, new Listener () {
        public void handleEvent (Event e) {
            shell.close ();
            shell.dispose ();
        }}

    );
    okButton.addListener (SWT.Selection, new Listener () {
        public void handleEvent (Event event) {
            saveFetchersToRegistry (selectedFetchersList.getItems ());
            shell.close ();
            shell.dispose ();
        }}

    );
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/SelectFetchersDialog.java" startline="128" endline="131">
public void handleEvent (Event e) {
    shell.close ();
    shell.dispose ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/SelectFetchersDialog.java" startline="134" endline="138">
public void handleEvent (Event event) {
    saveFetchersToRegistry (selectedFetchersList.getItems ());
    shell.close ();
    shell.dispose ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/SelectFetchersDialog.java" startline="146" endline="155">
void saveFetchersToRegistry (String [] fetchersNamesToSave) {
    String [] fetchersLabelsToRetain = new String [fetchersNamesToSave.length + 1];
    fetchersLabelsToRetain [0] = IPFetcher.ID;
    for (int i = 0;
    i < fetchersNamesToSave.length; i ++) {
        fetchersLabelsToRetain [i + 1] = registeredFetcherIdsByNames.get (fetchersNamesToSave [i]);
    }
    fetcherRegistry.updateSelectedFetchers (fetchersLabelsToRetain);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/SelectFetchersDialog.java" startline="159" endline="168">
public void handleEvent (Event event) {
    String [] selection = selectedFetchersList.getSelection ();
    String fetcherName = selection.length > 0 ? selection [0] : selectedFetchersList.getItem (0);
    for (Fetcher fetcher : fetcherRegistry.getRegisteredFetchers ()) {
        if (fetcherName.equals (fetcher.getName ())) {
            fetcherRegistry.openPreferencesEditor (fetcher);
            break;
        }
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/SelectFetchersDialog.java" startline="176" endline="179">
public AddRemoveButtonListener (List fromList, List toList) {
    this.fromList = fromList;
    this.toList = toList;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/SelectFetchersDialog.java" startline="181" endline="191">
public void handleEvent (Event event) {
    int [] selectedItems = fromList.getSelectionIndices ();
    for (int selectedItem : selectedItems) {
        toList.add (fromList.getItem (selectedItem));
    }
    fromList.remove (selectedItems);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/DetailsWindow.java" startline="42" endline="46">
public DetailsWindow (GUIConfig guiConfig, ResultTable resultTable, ScanningResultList scanningResults) {
    this.guiConfig = guiConfig;
    this.resultTable = resultTable;
    this.scanningResults = scanningResults;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/DetailsWindow.java" startline="49" endline="51">
protected int getShellStyle () {
    return SWT.TOOL | SWT.DIALOG_TRIM | SWT.APPLICATION_MODAL | SWT.RESIZE;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/DetailsWindow.java" startline="54" endline="85">
protected void populateShell () {
    shell.setText (Labels.getLabel ("title.details"));
    shell.setLayout (LayoutHelper.formLayout (3, 3, 3));
    shell.setSize (guiConfig.detailsWindowSize);
    resultIndex = resultTable.getSelectionIndex ();
    ScanningResult result = resultTable.getSelectedResult ();
    commentsText = new Text (shell, SWT.BORDER);
    commentsText.pack ();
    commentsText.setLayoutData (LayoutHelper.formData (new FormAttachment (0), new FormAttachment (100), null, new FormAttachment (100)));
    CommentsTextListener commentsTextListener = new CommentsTextListener ();
    commentsText.addFocusListener (commentsTextListener);
    commentsText.addModifyListener (commentsTextListener);
    String comment = commentsConfig.getComment (scanningResults, resultIndex);
    if (comment != null) commentsText.setText (comment);
    else commentsTextListener.focusLost (null);

    Text detailsText = new Text (shell, SWT.BORDER | SWT.READ_ONLY | SWT.MULTI | SWT.V_SCROLL | SWT.WRAP);
    detailsText.setText (result.toString ());
    detailsText.setBackground (shell.getDisplay ().getSystemColor (SWT.COLOR_LIST_BACKGROUND));
    detailsText.setTabs (32);
    detailsText.setLayoutData (LayoutHelper.formData (new FormAttachment (0), new FormAttachment (100), new FormAttachment (0), new FormAttachment (commentsText)));
    Listener traverseListener = new TraverseListener ();
    detailsText.addListener (SWT.Traverse, traverseListener);
    commentsText.addListener (SWT.Traverse, traverseListener);
    shell.layout ();
    detailsText.forceFocus ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/DetailsWindow.java" startline="90" endline="95">
public void focusGained (FocusEvent e) {
    if (commentsText.getText ().equals (defaultText)) {
        commentsText.setText ("");
        commentsText.setForeground (commentsText.getDisplay ().getSystemColor (SWT.COLOR_WIDGET_FOREGROUND));
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/DetailsWindow.java" startline="97" endline="102">
public void focusLost (FocusEvent e) {
    if (commentsText.getText ().length () == 0) {
        commentsText.setText (defaultText);
        commentsText.setForeground (commentsText.getDisplay ().getSystemColor (SWT.COLOR_WIDGET_NORMAL_SHADOW));
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/DetailsWindow.java" startline="104" endline="112">
public void modifyText (ModifyEvent e) {
    String newComment = commentsText.getText ();
    if (! defaultText.equals (newComment)) {
        commentsConfig.setComment (scanningResults, resultIndex, newComment);
        resultTable.updateResult (resultIndex, CommentFetcher.ID, newComment);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/DetailsWindow.java" startline="116" endline="122">
public void handleEvent (Event e) {
    if (e.detail == SWT.TRAVERSE_RETURN) {
        guiConfig.detailsWindowSize = shell.getSize ();
        shell.close ();
        shell.dispose ();
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/Startup.java" startline="19" endline="19">
public Startup () {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/Startup.java" startline="21" endline="46">
public void onStart () {
    if (guiConfig.isFirstRun) {
        new GoogleAnalytics ().asyncReport ("First run");
        Display.getCurrent ().asyncExec (new Runnable () {
            public void run () {
                GettingStartedDialog dialog = new GettingStartedDialog ();
                if (Platform.CRIPPLED_WINDOWS) dialog.prependText (Labels.getLabel ("text.crippledWindowsInfo"));

                if (Platform.GNU_JAVA) dialog.prependText (Labels.getLabel ("text.gnuJavaInfo"));

                shell.forceActive ();
                dialog.open ();
                guiConfig.isFirstRun = false;
            }}

        );
    } else if (! Version.getVersion ().equals (guiConfig.lastRunVersion)) {
        new GoogleAnalytics ().asyncReport ("Update " + guiConfig.lastRunVersion + " to " + Version.getVersion ());
        guiConfig.lastRunVersion = Version.getVersion ();
    } else if (System.currentTimeMillis () - guiConfig.lastVersionCheck > 30L * 24 * 3600 * 1000) {
        checkVersion.check (false);
        guiConfig.lastVersionCheck = System.currentTimeMillis ();
    }

}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ipscan/src/net/azib/ipscan/gui/Startup.java" startline="25" endline="35">
public void run () {
    GettingStartedDialog dialog = new GettingStartedDialog ();
    if (Platform.CRIPPLED_WINDOWS) dialog.prependText (Labels.getLabel ("text.crippledWindowsInfo"));

    if (Platform.GNU_JAVA) dialog.prependText (Labels.getLabel ("text.gnuJavaInfo"));

    shell.forceActive ();
    dialog.open ();
    guiConfig.isFirstRun = false;
}
</source>
