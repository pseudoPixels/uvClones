<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/TargetPlatformLoader.java" startline="35" endline="50">
public void loadTargetPlatform (IProgressMonitor monitor, File targetPlatformFile) throws CoreException {
    if (targetPlatformFile == null || ! targetPlatformFile.exists ()) {
        Log.info ("Target platform file missing: Use eclipse as target platform");
        return;
    }
    StopWatch stopWatch = new StopWatch ();
    Log.info ("Use target platform declared in: " + targetPlatformFile.getAbsolutePath ());
    Log.info ("START: loadTargetPlatform");
    loadTargetPlatformImpl (monitor, targetPlatformFile);
    Log.info (stopWatch.end ("END: loadTargetPlatform", false));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/TargetPlatformLoader.java" startline="52" endline="67">
private static void loadTargetPlatformImpl (IProgressMonitor monitor, File targetPlatformFile) throws CoreException {
    try {
        ITargetPlatformService tps = (ITargetPlatformService) PDECore.getDefault ().acquireService (ITargetPlatformService.class.getName ());
        ITargetHandle targetHandle = tps.getTarget (targetPlatformFile.toURI ());
        ITargetDefinition targetDefinition = targetHandle.getTargetDefinition ();
        new LoadTargetDefinitionJob (targetDefinition).run (monitor);
    } catch (NoClassDefFoundError error) {
        Log.error ("Can't load target platform file: " + targetPlatformFile.getAbsolutePath (), error);
        Log.error ("Solutions:");
        Log.error (" - Use eclipse classic, or");
        Log.error (" - Remove key '" + UCDHeadless.HEADLESS_KEY_TARGET + "' from " + UCDHeadless.UCDETECTOR_OPTIONS);
        throw error;
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/MarkerFactory.java" startline="82" endline="92">
public static String ucdMarkerTypeToNiceString (IMarker marker) {
    try {
        if (marker != null) {
            return markerMap.get (marker.getType ());
        }
    } catch (CoreException e) {
        Log.warn ("Can't get marker type: " + e);
    }
    return null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/MarkerFactory.java" startline="104" endline="106">
private MarkerFactory (List < IUCDetectorReport > reports) {
    this.reports = reports;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/MarkerFactory.java" startline="108" endline="122">
public static MarkerFactory createInstance () {
    ReportNameManager.setNextFreeFileNumberString ();
    ArrayList < IUCDetectorReport > reportsList = new ArrayList < IUCDetectorReport > ();
    reportsList.add (new MarkerReport ());
    if (Prefs.isWriteReportFile ()) {
        reportsList.add (new XmlReport ());
    }
    List < ReportExtension > classExtensions = ReportExtension.getClassExtensions ();
    for (ReportExtension reportExtension : classExtensions) {
        IUCDetectorReport report = reportExtension.getReport ();
        report.setExtension (reportExtension);
        reportsList.add (report);
    }
    return new MarkerFactory (reportsList);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/MarkerFactory.java" startline="124" endline="128">
public void startReport (IJavaElement [] objectsToIterate, long startTime) throws CoreException {
    for (IUCDetectorReport report : reports) {
        report.startReport (objectsToIterate, startTime);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/MarkerFactory.java" startline="134" endline="148">
public boolean reportMarker (ReportParam reportParam) throws CoreException {
    if (reportParam.getLine () == LineManger.LINE_NOT_FOUND) {
        String elementName = JavaElementUtil.getElementName (reportParam.getJavaElement ());
        Log.error ("reportMarker: Line not found for: " + elementName);
        return false;
    }
    if (reportParam.getJavaElement ().getResource () == null) {
        Log.error ("reportMarker: Resource is null");
        return false;
    }
    for (IUCDetectorReport report : reports) {
        report.reportMarker (reportParam);
    }
    return true;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/MarkerFactory.java" startline="150" endline="154">
public void reportDetectionProblem (IStatus status) {
    for (IUCDetectorReport report : reports) {
        report.reportDetectionProblem (status);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/MarkerFactory.java" startline="156" endline="163">
public void endReport () throws CoreException {
    if (! Prefs.isWriteReportFile ()) {
        Log.info ("Do not write reports, because no write report option is selected");
    }
    for (IUCDetectorReport report : reports) {
        report.endReport ();
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/MarkerFactory.java" startline="172" endline="177">
public boolean createFinalMarker (IMethod method, int line) throws CoreException {
    String searchInfo = JavaElementUtil.getMemberTypeString (method);
    String elementName = JavaElementUtil.getElementName (method);
    String message = NLS.bind (Messages.MarkerFactory_MarkerFinalMethod, new Object [] {searchInfo, elementName});
    return reportMarker (new ReportParam (method, message, line, UCD_MARKER_TYPE_USE_FINAL));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/MarkerFactory.java" startline="186" endline="191">
public boolean createFinalMarker (IField field, int line) throws CoreException {
    String searchInfo = JavaElementUtil.getMemberTypeString (field);
    String elementName = JavaElementUtil.getElementName (field);
    String message = NLS.bind (Messages.MarkerFactory_MarkerFinalField, new Object [] {searchInfo, elementName});
    return reportMarker (new ReportParam (field, message, line, UCD_MARKER_TYPE_USE_FINAL));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/MarkerFactory.java" startline="202" endline="205">
public boolean createReferenceMarker (IMember javaElement, String message, int line, int found) throws CoreException {
    String type = found == 0 ? UCD_MARKER_TYPE_UNUSED : UCD_MARKER_TYPE_USED_FEW;
    return reportMarker (new ReportParam (javaElement, message, line, type, found));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/MarkerFactory.java" startline="214" endline="219">
public boolean createReferenceMarkerTestOnly (IMember member, int line) throws CoreException {
    String searchInfo = JavaElementUtil.getMemberTypeString (member);
    String elementName = JavaElementUtil.getElementName (member);
    String message = NLS.bind (Messages.MarkerFactory_MarkerTestOnly, new Object [] {searchInfo, elementName});
    return reportMarker (new ReportParam (member, message, line, UCD_MARKER_TYPE_TEST_ONLY));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/MarkerFactory.java" startline="229" endline="248">
public boolean createVisibilityMarker (IMember member, String type, int line) throws CoreException {
    String visibilityString = null;
    if (UCD_MARKER_TYPE_USE_PRIVATE.equals (type)) {
        visibilityString = "private";
    } else if (UCD_MARKER_TYPE_USE_PROTECTED.equals (type)) {
        visibilityString = "protected";
    } else if (UCD_MARKER_TYPE_USE_DEFAULT.equals (type)) {
        visibilityString = "default";
    }

    String searchInfo = JavaElementUtil.getMemberTypeString (member);
    if (member instanceof IType) {
        visibilityString += Messages.MarkerFactory_VisibilityCompileErrorForClass;
    }
    Object [] bindings = new Object [] {searchInfo, JavaElementUtil.getElementName (member), visibilityString};
    String message = NLS.bind (Messages.MarkerFactory_MarkerVisibility, bindings);
    return reportMarker (new ReportParam (member, message, line, type));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/MarkerFactory.java" startline="255" endline="259">
public static void deleteMarkers (IJavaElement javaElement) throws CoreException {
    if (javaElement.getResource () != null) {
        javaElement.getResource ().deleteMarkers (UCD_MARKER_TYPE_PREFIX, true, IResource.DEPTH_INFINITE);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/MarkerFactory.java" startline="261" endline="263">
public void setExtension (ReportExtension reportExtension) {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/MarkerFactory.java" startline="265" endline="267">
public static String dumpMarker (IMarker m) {
    return markerAsMap (m).toString ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/MarkerFactory.java" startline="269" endline="281">
public static Map < String, Object > markerAsMap (IMarker m) {
    Map < String, Object > result = new HashMap < String, Object > ();
    try {
        Map < ?, ? > attributes = m.getAttributes ();
        for (Object key : attributes.keySet ()) {
            result.put (String.valueOf (key), attributes.get (key));
        }
    } catch (CoreException e) {
        result.put ("_ERROR_", e.getMessage ());
    }
    return result;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/StopWatch.java" startline="30" endline="32">
public StopWatch () {
    message = null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/StopWatch.java" startline="34" endline="36">
public StopWatch (IMember member) {
    this.message = JavaElementUtil.getElementName (member);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/StopWatch.java" startline="38" endline="40">
public String end (String info) {
    return end (info, false);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/StopWatch.java" startline="48" endline="63">
public String end (String info, boolean doLog) {
    long duration = System.currentTimeMillis () - start;
    start = System.currentTimeMillis ();
    String logMessage = createLogMessage (info, duration);
    if (doLog) {
        if (Log.isDebug () && duration > MINIMUM_DURATION) {
            Log.debug (logMessage);
        } else if (duration > MINIMUM_DURATION_WARN) {
            Log.warn (logMessage);
        }

    }
    return logMessage;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/StopWatch.java" startline="65" endline="75">
private String createLogMessage (String info, long duration) {
    StringBuilder sb = new StringBuilder ();
    if (info != null) {
        sb.append ("Duration: ").append (info).append (' ');
    }
    if (message != null) {
        sb.append (message);
    }
    sb.append (": ").append (timeAsString (duration));
    return sb.toString ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/StopWatch.java" startline="77" endline="88">
public static String timeAsString (long millis) {
    if (millis <= 1000) {
        return millis + " millis";
    }
    if (millis <= 60 * 1000) {
        return StopWatch.DOUBLE_FORMAT.format (millis / 1000.0) + " seconds";
    }
    if (millis <= 60 * 60 * 1000) {
        return StopWatch.DOUBLE_FORMAT.format (millis / 60000.0) + " minutes";
    }
    return StopWatch.DOUBLE_FORMAT.format (millis / 3600000.0) + " hours";
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/ASTMemberVisitor.java" startline="44" endline="46">
public boolean visit (TypeDeclaration declaration) {
    return visitImpl (declaration, declaration.getName ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/ASTMemberVisitor.java" startline="49" endline="51">
public boolean visit (EnumDeclaration declaration) {
    return visitImpl (declaration, declaration.getName ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/ASTMemberVisitor.java" startline="54" endline="56">
public boolean visit (AnnotationTypeDeclaration declaration) {
    return visitImpl (declaration, declaration.getName ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/ASTMemberVisitor.java" startline="62" endline="64">
public boolean visit (MethodDeclaration declaration) {
    return visitImpl (declaration, declaration.getName ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/ASTMemberVisitor.java" startline="67" endline="69">
public boolean visit (AnnotationTypeMemberDeclaration declaration) {
    return visitImpl (declaration, declaration.getName ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/ASTMemberVisitor.java" startline="81" endline="90">
public boolean visit (FieldDeclaration declaration) {
    List < ? > fragments = declaration.fragments ();
    if (fragments.size () > 0) {
        Object last = fragments.get (fragments.size () - 1);
        VariableDeclarationFragment fragment = (VariableDeclarationFragment) last;
        SimpleName name = fragment.getName ();
        visitImpl (declaration, name);
    }
    return false;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/ASTMemberVisitor.java" startline="93" endline="96">
public boolean visit (EnumConstantDeclaration declaration) {
    visitImpl (declaration, declaration.getName ());
    return false;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="68" endline="70">
private JavaElementUtil () {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="82" endline="91">
public static IPackageFragmentRoot getPackageFragmentRootFor (IJavaElement javaElement) {
    IJavaElement parent = javaElement.getParent ();
    while (true) {
        if (parent == null || parent instanceof IPackageFragmentRoot) {
            return (IPackageFragmentRoot) parent;
        }
        parent = parent.getParent ();
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="97" endline="105">
public static IPackageFragment getPackageFor (IJavaElement javaElement) {
    IJavaElement parent = javaElement.getParent ();
    while (true) {
        if (parent instanceof IPackageFragment || parent == null) {
            return (IPackageFragment) parent;
        }
        parent = parent.getParent ();
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="113" endline="119">
public static String getSourceFolderProjectRelativePath (IPackageFragmentRoot root) {
    IResource resource = root.getResource ();
    if (resource != null && resource.getProjectRelativePath () != null) {
        return resource.getProjectRelativePath ().toOSString ();
    }
    return null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="141" endline="152">
public static List < IPackageFragment > getSubPackages (IPackageFragment packageFragment) throws CoreException {
    List < IPackageFragment > subPackages = new ArrayList < IPackageFragment > ();
    IJavaElement [] allPackages = ((IPackageFragmentRoot) packageFragment.getParent ()).getChildren ();
    for (IJavaElement javaElement : allPackages) {
        IPackageFragment pakage = (IPackageFragment) javaElement;
        String startPackagenName = packageFragment.getElementName () + ".";
        if (packageFragment.isDefaultPackage () || pakage.getElementName ().startsWith (startPackagenName)) {
            subPackages.add (pakage);
        }
    }
    return subPackages;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="165" endline="188">
public static IType getTypeFor (IJavaElement javaElement, boolean isPrimary) {
    IType result = null;
    IJavaElement parent = javaElement;
    while (parent != null) {
        if (parent instanceof IType) {
            result = (IType) parent;
            break;
        }
        if (parent instanceof ICompilationUnit) {
            result = ((ICompilationUnit) parent).findPrimaryType ();
            break;
        }
        parent = parent.getParent ();
    }
    if (isPrimary && result != null && result.getCompilationUnit () != null) {
        IType primaryType = result.getCompilationUnit ().findPrimaryType ();
        if (primaryType != null) {
            result = primaryType;
        }
    }
    return result;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="194" endline="201">
public static IType getTypeFor (IResource resource) {
    if (isJavaFile (resource)) {
        IJavaElement javaElement = JavaCore.create ((IFile) resource);
        return getTypeFor (javaElement, true);
    }
    return null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="203" endline="205">
private static boolean isJavaFile (IResource resource) {
    return resource instanceof IFile && "java".equalsIgnoreCase (resource.getFileExtension ()) && resource.isAccessible ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="211" endline="224">
public static IType getRootTypeFor (IJavaElement javaElement) {
    IJavaElement parent = javaElement;
    IType lastType = null;
    while (parent != null) {
        if (parent instanceof IType) {
            lastType = (IType) parent;
        } else if (parent instanceof ICompilationUnit) {
            return lastType;
        }

        parent = parent.getParent ();
    }
    return lastType;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="230" endline="240">
public static boolean isPrimary (IType type) {
    ICompilationUnit cu = type.getCompilationUnit ();
    if (cu == null) {
        return false;
    }
    IType primaryType = cu.findPrimaryType ();
    if (primaryType == null) {
        return false;
    }
    return primaryType.equals (type);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="247" endline="254">
public static boolean isInSameType (IJavaElement element1, IJavaElement element2) {
    IType type1 = JavaElementUtil.getTypeFor (element1, false);
    IType type2 = JavaElementUtil.getTypeFor (element2, false);
    if (type1 == null || type2 == null) {
        return false;
    }
    return type1.equals (type2);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="265" endline="267">
public static boolean isInterfaceMethod (IMethod method) throws JavaModelException {
    return isParentInterface (method);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="274" endline="276">
public static boolean isInterfaceField (IField field) throws JavaModelException {
    return isParentInterface (field);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="278" endline="281">
private static boolean isParentInterface (IJavaElement element) throws JavaModelException {
    IJavaElement parent = element.getParent ();
    return (parent instanceof IType && ((IType) parent).isInterface ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="291" endline="299">
public static ICompilationUnit getCompilationUnitFor (IResource resource) {
    if (isJavaFile (resource)) {
        IJavaElement javaElement = JavaCore.create ((IFile) resource);
        if (javaElement instanceof ICompilationUnit) {
            return (ICompilationUnit) javaElement;
        }
    }
    return null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="317" endline="332">
public static boolean isMethodOfJavaLangObject (IMethod method) {
    String methodName = method.getElementName ();
    switch (method.getNumberOfParameters ()) {
        case 0 :
            {
                return "hashCode".equals (methodName) || "clone".equals (methodName) || "toString".equals (methodName) || "finalize".equals (methodName);
            } case 1 :
            {
                return "equals".equals (methodName);
            } default :
            return false;
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="350" endline="364">
public static boolean isSerializationMethod (IMethod method) throws JavaModelException {
    if (! Flags.isStatic (method.getFlags ())) {
        String methodName = method.getElementName ();
        if (method.getNumberOfParameters () == 0) {
            return "writeReplace".equals (methodName) || "readResolve".equals (methodName) || "readObjectNoData".equals (methodName);
        } else if (method.getNumberOfParameters () == 1) {
            return "writeObject".equals (methodName) || "readObject".equals (methodName);
        }

    }
    return false;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="378" endline="396">
public static boolean isBeanMethod (IMethod method) throws JavaModelException {
    if (! Flags.isPublic (method.getFlags ()) || Flags.isStatic (method.getFlags ())) {
        return false;
    }
    String name = method.getElementName ();
    if (Signature.SIG_VOID.equals (method.getReturnType ()) && name.startsWith ("set") && name.length () > 3 && Character.isUpperCase (name.charAt (3)) && method.getNumberOfParameters () == 1) {
        return true;
    }
    if (! Signature.SIG_VOID.equals (method.getReturnType ()) && name.startsWith ("get") && name.length () > 3 && Character.isUpperCase (name.charAt (3)) && method.getNumberOfParameters () == 0) {
        return true;
    }
    if (Signature.SIG_BOOLEAN.equals (method.getReturnType ()) && name.startsWith ("is") && name.length () > 2 && Character.isUpperCase (name.charAt (2)) && method.getNumberOfParameters () == 0) {
        return true;
    }
    return false;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="411" endline="430">
public static boolean isUsedBySpecialEnumMethods (IType enumType) throws CoreException {
    if (enumType.isEnum ()) {
        String [] stringPatterns = new String [] {enumType.getFullyQualifiedName ('.') + ".values()", enumType.getFullyQualifiedName ('.') + ".valueOf(java.lang.String)"};
        for (String stringPattern : stringPatterns) {
            SearchPattern pattern = SearchPattern.createPattern (stringPattern, IJavaSearchConstants.METHOD, IJavaSearchConstants.REFERENCES, SearchPattern.R_ERASURE_MATCH);
            CountSearchRequestor requestor = new CountSearchRequestor ();
            runSearch (pattern, requestor);
            if (requestor.isFound ()) {
                return true;
            }
        }
    }
    return false;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="449" endline="455">
public static boolean isSerializationField (IField field) throws JavaModelException {
    if (isConstant (field)) {
        return "serialVersionUID".equals (field.getElementName ()) || "serialPersistentFields".equals (field.getElementName ());
    }
    return false;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="464" endline="466">
public static boolean isConstant (IField field) throws JavaModelException {
    return Flags.isStatic (field.getFlags ()) && Flags.isFinal (field.getFlags ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="468" endline="476">
public static IMethod getMainMethod (IType member) throws JavaModelException {
    IMethod [] methods = member.getMethods ();
    for (IMethod method : methods) {
        if (method.isMainMethod ()) {
            return method;
        }
    }
    return null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="478" endline="480">
public static boolean hasMainMethod (IType member) throws JavaModelException {
    return getMainMethod (member) != null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="494" endline="514">
public static String getElementName (IJavaElement element) {
    if (element == null) {
        return "null";
    }
    if (element instanceof IMethod) {
        return getMethodName ((IMethod) element);
    }
    if (element instanceof IField) {
        return getFieldName ((IField) element);
    }
    if (element instanceof IType) {
        return getTypeName (element);
    }
    if (element instanceof IPackageFragment && ((IPackageFragment) element).isDefaultPackage ()) {
        return "default package";
    }
    if (element instanceof IImportContainer) {
        return "import declarations";
    }
    return element.getElementName ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="520" endline="525">
public static String getTypeName (IJavaElement element) {
    if (element instanceof IType) {
        return ((IType) element).getTypeQualifiedName ('.');
    }
    return "class?";
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="531" endline="537">
public static String getTypeNameFull (IType type) {
    IPackageFragment pakage = getPackageFor (type);
    if (pakage.isDefaultPackage ()) {
        return getTypeName (type);
    }
    return pakage.getElementName () + '.' + getTypeName (type);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="542" endline="548">
private static String getMethodName (IMethod method) {
    if (method == null) {
        return "method?";
    }
    return String.format ("%s.%s(%s)", getTypeName (method.getParent ()), getSimpleMethodName (method), parametersToString (method));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="550" endline="553">
public static String getSimpleMethodName (IMethod method) {
    String methodName = (method == null) ? "method?" : method.getElementName ();
    return ((methodName.length () == 0 ? "<init>" : methodName));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="555" endline="557">
public static String getSimpleFieldName (IField field) {
    return (field == null) ? UNKNOWN_FIELD : field.getElementName ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="559" endline="564">
private static String getFieldName (IField field) {
    if (field == null) {
        return UNKNOWN_FIELD;
    }
    return String.format ("%s.%s", getTypeName (field.getParent ()), field.getElementName ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="573" endline="587">
private static String parametersToString (IMethod method) {
    StringBuilder sb = new StringBuilder ();
    String [] typeParameters = method.getParameterTypes ();
    for (int i = 0;
    i < typeParameters.length; i ++) {
        String typeAsString = Signature.toString (typeParameters [i]);
        if (i == 0) {
            sb.append (typeAsString);
        } else {
            sb.append (',');
            sb.append (sb.length () > 30 ? "*" : typeAsString);
        }
    }
    return sb.toString ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="609" endline="612">
private MemberInfo (String info, String icon) {
    this.info = info;
    this.icon = icon;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="615" endline="617">
public String toString () {
    return info;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="619" endline="621">
public String getIcon () {
    return icon;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="649" endline="652">
public static String getMemberTypeString (IMember member) {
    MemberInfo memberInfo = getMemberInfo (member);
    return memberInfo == null ? "???" : memberInfo.toString ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="654" endline="700">
public static MemberInfo getMemberInfo (IMember member) {
    try {
        if (member instanceof IType) {
            IType type = (IType) member;
            if (type.isAnnotation ()) {
                return MemberInfo.Annotation;
            }
            if (type.isAnonymous ()) {
                return MemberInfo.ClassAnonymous;
            }
            if (type.isEnum ()) {
                return MemberInfo.Enum;
            }
            if (type.isInterface ()) {
                return MemberInfo.Interface;
            }
            if (type.isLocal ()) {
                return MemberInfo.ClassLocal;
            }
            if (type.isMember ()) {
                return MemberInfo.ClassMember;
            }
            return MemberInfo.Class;
        }
        if (member instanceof IMethod) {
            IMethod method = (IMethod) member;
            if (method.isConstructor ()) {
                return MemberInfo.Constructor;
            }
            return MemberInfo.Method;
        }
        if (member instanceof IField) {
            IField field = (IField) member;
            if (field.isEnumConstant ()) {
                return MemberInfo.EnumConstant;
            }
            if (JavaElementUtil.isConstant (field)) {
                return MemberInfo.Constant;
            }
            return MemberInfo.Field;
        }
    } catch (JavaModelException ex) {
        Log.error ("Can't get memberTypeString for member: " + member, ex);
    }
    return null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="712" endline="726">
public static String getMemberTypeStringSimple (IMember member) {
    if (member instanceof IType) {
        return MemberInfo.Class.toString ();
    }
    if (member instanceof IMethod) {
        return MemberInfo.Method.toString ();
    }
    if (member instanceof IField) {
        return MemberInfo.Field.toString ();
    }
    if (member instanceof IInitializer) {
        return MemberInfo.Initializer.toString ();
    }
    return "???";
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="728" endline="734">
public static String getElementNames (Collection < ? extends IJavaElement > javaElements) {
    StringBuilder sb = new StringBuilder ();
    for (IJavaElement javaElement : javaElements) {
        sb.append (getElementName (javaElement)).append ("\n\t");
    }
    return sb.toString ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="736" endline="738">
public static String getElementNameAndClassName (IJavaElement javaElement) {
    return String.format ("%s\t%s", getElementName (javaElement), getClassName (javaElement));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="752" endline="771">
public static boolean isOverriddenMethod (IMethod method) throws CoreException {
    int flags = method.getFlags ();
    if (method.isConstructor () || Flags.isStatic (flags) || Flags.isPrivate (flags)) {
        return false;
    }
    if (hasOverrideAnnotation (method)) {
        return true;
    }
    int limitTo = IJavaSearchConstants.DECLARATIONS | IJavaSearchConstants.IGNORE_DECLARING_TYPE | IJavaSearchConstants.IGNORE_RETURN_TYPE;
    SearchPattern pattern = SearchPattern.createPattern (method, limitTo);
    CountSearchRequestor requestor = new CountSearchRequestor ();
    IType declaringType = method.getDeclaringType ();
    IJavaSearchScope scope = SearchEngine.createHierarchyScope (declaringType);
    runSearch (pattern, requestor, scope);
    return requestor.getFoundCount () > 1;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="778" endline="786">
public static boolean hasOverrideAnnotation (IMethod method) throws JavaModelException {
    for (IAnnotation annotation : method.getAnnotations ()) {
        String annotationName = annotation.getElementName ();
        if ("Override".equals (annotationName) || "java.lang.Override".equals (annotationName)) {
            return true;
        }
    }
    return false;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="819" endline="824">
public static boolean runSearch (SearchPattern pattern, SearchRequestor requestor) throws CoreException {
    IJavaSearchScope sourceScope = createWorkspaceScope (IJavaSearchScope.SOURCES);
    return runSearch (pattern, requestor, sourceScope);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="828" endline="837">
private static IJavaSearchScope createWorkspaceScope (int includeMask) {
    try {
        IJavaProject [] projects = JavaCore.create (ResourcesPlugin.getWorkspace ().getRoot ()).getJavaProjects ();
        return SearchEngine.createJavaSearchScope (projects, includeMask);
    } catch (JavaModelException e) {
    }
    return SearchEngine.createWorkspaceScope ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="848" endline="870">
private static boolean runSearch (SearchPattern pattern, SearchRequestor requestor, IJavaSearchScope scope) throws CoreException {
    boolean isSearchException = false;
    SearchEngine searchEngine = new SearchEngine ();
    try {
        SearchParticipant [] participant = new SearchParticipant [] {SearchEngine.getDefaultSearchParticipant ()};
        searchEngine.search (pattern, participant, scope, requestor, null);
    } catch (OperationCanceledException e) {
    } catch (OutOfMemoryError e) {
        isSearchException = true;
        UCDetectorPlugin.handleOutOfMemoryError (e);
    } catch (Throwable throwable) {
        isSearchException = true;
        String mes = "Java search problems. UCDetecor will ignore this exception. Maybe a 'org.eclipse.jdt.core.search' bug!";
        Log.error (mes, throwable);
    }
    return isSearchException;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="881" endline="883">
public static boolean hasSubClasses (IType type) throws JavaModelException {
    return hasXType (type, false);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="891" endline="893">
public static boolean hasSuperClasses (IType type) throws JavaModelException {
    return hasXType (type, true);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="899" endline="909">
private static boolean hasXType (IType type, boolean isSupertype) throws JavaModelException {
    ITypeHierarchy hierarchy = type.newTypeHierarchy (NULL_MONITOR);
    if (hierarchy != null) {
        IType [] types = isSupertype ? hierarchy.getSupertypes (type) : hierarchy.getSubtypes (type);
        if (types == null || types.length == 0) {
            return false;
        }
    }
    return true;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="924" endline="964">
public static boolean isTestCode (IJavaElement javaElement) {
    IType type = getTypeFor (javaElement, true);
    if (type != null && type.getElementName ().endsWith ("Test")) {
        return true;
    }
    IPackageFragmentRoot pfr = getPackageFragmentRootFor (javaElement);
    if (pfr != null) {
        String sourceFolder = getSourceFolderProjectRelativePath (pfr);
        if (sourceFolder != null) {
            sourceFolder = sourceFolder.toLowerCase (Locale.ENGLISH);
            if (sourceFolder.contains ("test") || sourceFolder.contains ("junit")) {
                return true;
            }
        }
    }
    if (javaElement instanceof IMethod) {
        IMethod method = (IMethod) javaElement;
        try {
            if (Signature.SIG_VOID.equals (method.getReturnType ()) && Flags.isPublic (method.getFlags ()) && ! Flags.isStatic (method.getFlags ()) && method.getNumberOfParameters () == 0) {
                if (method.getElementName ().startsWith ("test")) {
                    return true;
                }
            }
        } catch (JavaModelException e) {
            Log.error ("Can't run isTestCode() for method: " + method, e);
        }
    }
    return false;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="1008" endline="1015">
public static IType [] getAllSupertypes (IType type) throws JavaModelException {
    ITypeHierarchy hierarchy = type.newTypeHierarchy (NULL_MONITOR);
    if (hierarchy != null) {
        return hierarchy.getAllSupertypes (type);
    }
    return new IType [0];
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="1017" endline="1019">
public static String getClassName (Object o) {
    return String.format ("[%s]", o == null ? "?" : o.getClass ().getName ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/util/JavaElementUtil.java" startline="1028" endline="1034">
public static String createJavaLink (IMember javaElement, int lineNr) {
    IType type = getTypeFor (javaElement, true);
    String typeNameFull = getTypeNameFull (type);
    String member = (javaElement instanceof IType) ? "<init>" : javaElement.getElementName ();
    String typeName = getElementName (type);
    return String.format ("%s.%s(%s.java:%s)", typeNameFull, member, typeName, Integer.toString (lineNr));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/ReportParam.java" startline="41" endline="53">
public String toString () {
    StringBuilder sb = new StringBuilder ();
    sb.append ("MARKER{").append (getLevel ()).append (';').append (getMessage ());
    IResource resource = getJavaElement ().getResource ();
    if (resource != null) {
        sb.append (';').append (resource.getFullPath ()).append (':').append (getLine ());
    } else {
        sb.append (";line=").append (getLine ());
    }
    sb.append (';').append (getMarkerType ()).append ('}');
    return sb.toString ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/ReportParam.java" startline="55" endline="57">
public ReportParam (IMember javaElement, String message, int line, String markerType) {
    this (javaElement, message, line, markerType, null, - 1);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/ReportParam.java" startline="59" endline="61">
public ReportParam (IMember javaElement, String message, int line, String markerType, int referenceCount) {
    this (javaElement, message, line, markerType, null, referenceCount);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/ReportParam.java" startline="63" endline="65">
public ReportParam (IMember javaElement, String message, int line, String markerType, WarnLevel warnLevel) {
    this (javaElement, message, line, markerType, warnLevel, - 1);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/ReportParam.java" startline="67" endline="78">
private ReportParam (IMember javaElement, String message, int line, String markerType, WarnLevel warnLevel, int referenceCount) {
    this.javaElement = javaElement;
    this.message = message;
    this.line = line;
    this.markerType = markerType;
    this.level = warnLevel == null ? calculateWarnLevel () : warnLevel;
    this.referenceCount = referenceCount;
    this.author = LineManger.getAuthor (javaElement);
    this.lineStart = lineManager == null ? LineManger.LINE_NOT_FOUND : lineManager.getLineStart (javaElement);
    this.lineEnd = lineManager == null ? LineManger.LINE_NOT_FOUND : lineManager.getLineEnd (javaElement);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/ReportParam.java" startline="80" endline="110">
private WarnLevel calculateWarnLevel () {
    WarnLevel warnLevel = null;
    if (MarkerFactory.UCD_MARKER_TYPE_UNUSED.equals (getMarkerType ()) || MarkerFactory.UCD_MARKER_TYPE_USED_FEW.equals (getMarkerType ())) {
        if (getJavaElement () instanceof IType) {
            warnLevel = Prefs.getUCDetectionInClasses ();
        } else if (getJavaElement () instanceof IMethod) {
            warnLevel = Prefs.getUCDetectionInMethods ();
        } else if (getJavaElement () instanceof IField) {
            warnLevel = Prefs.getUCDetectionInFields ();
        }

    } else if (MarkerFactory.UCD_MARKER_TYPE_USE_PROTECTED.equals (getMarkerType ()) || MarkerFactory.UCD_MARKER_TYPE_USE_DEFAULT.equals (getMarkerType ())) {
        warnLevel = Prefs.getVisibilityProtectedCheck (getJavaElement ());
    } else if (MarkerFactory.UCD_MARKER_TYPE_USE_PRIVATE.equals (getMarkerType ())) {
        warnLevel = Prefs.getVisibilityPrivateCheck (getJavaElement ());
    } else if (MarkerFactory.UCD_MARKER_TYPE_USE_FINAL.equals (getMarkerType ())) {
        if (getJavaElement () instanceof IMethod) {
            warnLevel = Prefs.getCheckUseFinalMethod ();
        } else if (getJavaElement () instanceof IField) {
            warnLevel = Prefs.getCheckUseFinalField ();
        }

    }

    return warnLevel == null ? WarnLevel.WARNING : warnLevel;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/ReportParam.java" startline="112" endline="114">
public IMember getJavaElement () {
    return javaElement;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/ReportParam.java" startline="116" endline="118">
public String getMessage () {
    return message;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/ReportParam.java" startline="120" endline="122">
public int getLine () {
    return line;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/ReportParam.java" startline="124" endline="126">
public String getMarkerType () {
    return markerType;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/ReportParam.java" startline="128" endline="130">
public WarnLevel getLevel () {
    return level;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/ReportParam.java" startline="132" endline="134">
public int getReferenceCount () {
    return referenceCount;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/ReportParam.java" startline="136" endline="138">
public String getAuthor () {
    return author;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/ReportParam.java" startline="141" endline="143">
public String getAuthorTrimmed () {
    return author == null ? "" : author.length () > 70 ? author.substring (0, 70) + "..." : author;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/ReportParam.java" startline="145" endline="147">
public int getLineStart () {
    return lineStart;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/ReportParam.java" startline="149" endline="151">
public int getLineEnd () {
    return lineEnd;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/MarkerReport.java" startline="43" endline="64">
private static void createMarker (ReportParam reportParam) throws CoreException {
    WarnLevel level = reportParam.getLevel ();
    if (level == WarnLevel.IGNORE) {
        return;
    }
    int severity = (level == WarnLevel.ERROR) ? IMarker.SEVERITY_ERROR : IMarker.SEVERITY_WARNING;
    IMember javaElement = reportParam.getJavaElement ();
    ISourceRange range = javaElement.getNameRange ();
    IMarker marker = javaElement.getResource ().createMarker (reportParam.getMarkerType ());
    Map < String, Object > attributes = new HashMap < String, Object > ();
    attributes.put (IMarker.SEVERITY, severity);
    attributes.put (IMarker.MESSAGE, reportParam.getMessage ());
    attributes.put (IMarker.PRIORITY, IMarker.PRIORITY_HIGH);
    attributes.put (IMarker.LINE_NUMBER, reportParam.getLine ());
    attributes.put (IMarker.CHAR_START, range.getOffset ());
    attributes.put (IMarker.CHAR_END, range.getOffset () + range.getLength ());
    attributes.put (MarkerFactory.JAVA_NAME, javaElement.getElementName ());
    attributes.put (MarkerFactory.JAVA_TYPE, getElementType (javaElement).toString ());
    marker.setAttributes (attributes);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/MarkerReport.java" startline="69" endline="102">
private static ElementType getElementType (IMember javaElement) throws JavaModelException {
    if (javaElement instanceof IType) {
        IType type = (IType) javaElement;
        if (JavaElementUtil.isPrimary (type)) {
            return ElementType.PRIMARY_TYPE;
        }
        if (type.isEnum ()) {
            return ElementType.ENUM;
        }
        if (type.isAnnotation ()) {
            return ElementType.ANNOTATION;
        }
        if (type.isInterface ()) {
            return ElementType.INTERFACE;
        }
        return ElementType.TYPE;
    } else if (javaElement instanceof IMethod) {
        IType type = JavaElementUtil.getTypeFor (javaElement, false);
        if (type.isAnnotation ()) {
            return ElementType.ANNOTATION_TYPE_MEMBER;
        }
        return ElementType.METHOD;
    } else if (javaElement instanceof IField) {
        IField field = (IField) javaElement;
        if (field.isEnumConstant ()) {
            return ElementType.ENUM_CONSTANT;
        }
        return ElementType.FIELD;
    }

    return ElementType.UNKNOWN;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/MarkerReport.java" startline="115" endline="123">
public static ElementType valueOfSave (String valueString) {
    try {
        return ElementType.valueOf (valueString);
    } catch (Exception ex) {
        Log.error (String.format ("Unknown ElementType: '%s'", valueString), ex);
        return null;
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/MarkerReport.java" startline="126" endline="128">
public void startReport (IJavaElement [] objectsToIterate, long startTime) throws CoreException {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/MarkerReport.java" startline="130" endline="142">
public boolean reportMarker (ReportParam reportParam) throws CoreException {
    if (Log.isDebug ()) {
        Log.debug ("    Add to queue: " + reportParam);
    }
    markersToFlash.add (reportParam);
    totalMarkerCount ++;
    if (totalMarkerCount < MARKERS_FLASH_LIMIT || markersToFlash.size () >= MARKERS_FLASH_LIMIT) {
        flushReport ();
    }
    return true;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/MarkerReport.java" startline="147" endline="155">
private void flushReport () throws CoreException {
    if (Log.isDebug ()) {
        Log.debug ("flushReport will create %s markers", Integer.valueOf (markersToFlash.size ()));
    }
    for (ReportParam reportParamToCreate : markersToFlash) {
        createMarker (reportParamToCreate);
    }
    markersToFlash.clear ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/MarkerReport.java" startline="157" endline="160">
public void endReport () throws CoreException {
    flushReport ();
    Log.info (totalMarkerCount + " markers created");
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/MarkerReport.java" startline="162" endline="164">
public void reportDetectionProblem (IStatus status) {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/MarkerReport.java" startline="166" endline="168">
public void setExtension (ReportExtension reportExtension) {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/ReportExtension.java" startline="42" endline="48">
private ReportExtension (String resultFile, String description, String xslt, IUCDetectorReport report, String id) {
    this.resultFile = resultFile;
    this.description = description;
    this.xslt = xslt;
    this.report = report;
    this.id = id;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/ReportExtension.java" startline="50" endline="52">
public String getResultFile () {
    return resultFile;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/ReportExtension.java" startline="54" endline="56">
public String getDescription () {
    return description;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/ReportExtension.java" startline="58" endline="60">
public String getXslt () {
    return xslt;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/ReportExtension.java" startline="62" endline="64">
public IUCDetectorReport getReport () {
    return report;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/ReportExtension.java" startline="66" endline="68">
public String getId () {
    return id;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/ReportExtension.java" startline="71" endline="74">
public String toString () {
    return String.format ("ReportExtension [resultFile=%s, description=%s, xslt=%s, report=%s, id=%s]", resultFile, description, xslt, report, id);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/ReportExtension.java" startline="78" endline="119">
private static void loadExtensions () {
    if (! isInitialized) {
        isInitialized = true;
        xsltExtensions = new ArrayList < ReportExtension > ();
        classExtensions = new ArrayList < ReportExtension > ();
        allExtensions = new ArrayList < ReportExtension > ();
        IExtensionRegistry reg = Platform.getExtensionRegistry ();
        IConfigurationElement [] reports = reg.getConfigurationElementsFor (EXTENSION_POINT_ID);
        for (IConfigurationElement report : reports) {
            String resultFile = report.getAttribute ("resultFile");
            String name = report.getAttribute ("description");
            String xslt = report.getAttribute (ATTRIBUTE_STYLESHEET);
            String clazz = report.getAttribute (ATTRIBUTE_CLASS);
            String id = report.getAttribute (ATTRIBUTE_REPORT_ID);
            if (xslt != null && clazz == null) {
                boolean xsltFound = ReportExtension.class.getClassLoader ().getResourceAsStream (xslt) != null;
                if (xsltFound) {
                    xsltExtensions.add (new ReportExtension (resultFile, name, xslt, null, id));
                } else if (xslt.endsWith ("custom.xslt")) {
                    Log.info ("Tip: To create custom reports rename file to custom.xslt: org.ucdetector_x.y.z.jar/org/ucdetector/report/__custom.xslt");
                }

            } else if (xslt == null && clazz != null) {
                try {
                    IUCDetectorReport reportObject = (IUCDetectorReport) report.createExecutableExtension (ATTRIBUTE_CLASS);
                    classExtensions.add (new ReportExtension (resultFile, name, null, reportObject, id));
                } catch (Throwable ex) {
                    UCDetectorPlugin.logToEclipseLog ("Can't load ReportExtension", ex);
                }
            } else {
                Log.warn ("One attribute needed: '%s' or '%s'", ATTRIBUTE_CLASS, ATTRIBUTE_STYLESHEET);
            }

        }
        allExtensions.addAll (classExtensions);
        allExtensions.addAll (xsltExtensions);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/ReportExtension.java" startline="121" endline="124">
public static List < ReportExtension > getXsltExtensions () {
    loadExtensions ();
    return xsltExtensions;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/ReportExtension.java" startline="126" endline="129">
public static List < ReportExtension > getClassExtensions () {
    loadExtensions ();
    return classExtensions;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/ReportExtension.java" startline="131" endline="134">
public static List < ReportExtension > getAllExtensions () {
    loadExtensions ();
    return allExtensions;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/XmlReport.java" startline="119" endline="133">
public XmlReport () {
    initXML ();
    if (UCDetectorPlugin.isHeadlessMode ()) {
        Runtime.getRuntime ().addShutdownHook (new Thread () {
            @Override
            public void run () {
                if (! endReportCalled) {
                    Log.warn ("Process interrupted? Try to write reports in ShutdownHook");
                    writeReports (true);
                    Log.warn ("Wrote reports in ShutdownHook");
                }
            }}

        );
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/XmlReport.java" startline="124" endline="130">
public void run () {
    if (! endReportCalled) {
        Log.warn ("Process interrupted? Try to write reports in ShutdownHook");
        writeReports (true);
        Log.warn ("Wrote reports in ShutdownHook");
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/XmlReport.java" startline="138" endline="161">
private void initXML () {
    if (! Prefs.isWriteReportFile ()) {
        return;
    }
    try {
        doc = DocumentBuilderFactory.newInstance ().newDocumentBuilder ().newDocument ();
        String stylesheet = String.format ("type=\"text/xsl\" href=\"%s/%s\"", ICONS_DIR, HTML_XSLT);
        doc.insertBefore (doc.createProcessingInstruction ("xml-stylesheet", stylesheet), doc.getDocumentElement ());
        doc.insertBefore (doc.createComment (COPY_RIGHT), doc.getDocumentElement ());
        Element root = doc.createElement ("ucdetector");
        doc.appendChild (root);
        statistcs = doc.createElement ("statistics");
        root.appendChild (statistcs);
        markers = doc.createElement ("markers");
        root.appendChild (markers);
        problems = doc.createElement ("problems");
        root.appendChild (problems);
        markers.appendChild (doc.createComment (XML_INFO));
    } catch (Throwable e) {
        Log.error ("Can't create xml report: ", e);
        initXMLException = e;
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/XmlReport.java" startline="166" endline="169">
public void startReport (IJavaElement [] objectsToIterateArray, long startTimeIn) throws CoreException {
    this.objectsToIterate = objectsToIterateArray;
    this.startTime = startTimeIn;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/XmlReport.java" startline="174" endline="179">
public boolean reportMarker (ReportParam reportParam) throws CoreException {
    if (initXMLException != null || ! Prefs.isWriteReportFile ()) {
        return true;
    }
    return reportMarkerImpl (reportParam);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/XmlReport.java" startline="184" endline="245">
private boolean reportMarkerImpl (ReportParam reportParam) {
    Element marker = null;
    try {
        markerCount ++;
        marker = doc.createElement ("marker");
        markers.appendChild (marker);
        setMarkerAttributes (reportParam, marker);
        IMember javaElement = reportParam.getJavaElement ();
        IResource resource = javaElement.getResource ();
        appendChild (marker, "description", reportParam.getMessage ());
        if (resource != null && resource.getRawLocation () != null) {
            appendChild (marker, "file", resource.getRawLocation ().toOSString ());
        }
        appendProject (marker, javaElement);
        IPackageFragmentRoot sourceFolder = JavaElementUtil.getPackageFragmentRootFor (javaElement);
        if (sourceFolder != null && sourceFolder.getResource () != null) {
            IPath path = sourceFolder.getResource ().getProjectRelativePath ();
            if (path != null) {
                appendChild (marker, "sourceFolder", path.toString ());
            }
        }
        IPackageFragment pack = JavaElementUtil.getPackageFor (javaElement);
        appendChild (marker, "package", pack.getElementName ());
        IType type = JavaElementUtil.getTypeFor (javaElement, true);
        appendChild (marker, "class", JavaElementUtil.getElementName (type));
        Element javaTypeElement = appendChild (marker, "javaType", null);
        javaTypeElement.setAttribute ("simple", JavaElementUtil.getMemberTypeStringSimple (javaElement));
        javaTypeElement.setAttribute ("long", JavaElementUtil.getMemberTypeString (javaElement));
        MemberInfo memberInfo = JavaElementUtil.getMemberInfo (javaElement);
        if (memberInfo != null) {
            javaTypeElement.setAttribute ("icon", memberInfo.getIcon ());
        }
        if (javaElement instanceof IMethod) {
            IMethod method = (IMethod) javaElement;
            appendChild (marker, "method", JavaElementUtil.getSimpleMethodName (method));
        }
        if (javaElement instanceof IField) {
            IField field = (IField) javaElement;
            appendChild (marker, "field", JavaElementUtil.getSimpleFieldName (field));
        }
        if (reportParam.getAuthor () != null) {
            appendChild (marker, "author", reportParam.getAuthorTrimmed ());
        }
        if (UCDetectorPlugin.isHeadlessMode () && markerCount % 50 == 0) {
            Log.info ("Flush reports!");
            writeReports (false);
        }
    } catch (Throwable ex) {
        Log.error ("XML problems", ex);
        if (marker != null) {
            appendChild (marker, "ExceptionForCreatingMarker", ex.getMessage ());
        }
    }
    return true;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/XmlReport.java" startline="247" endline="262">
private void setMarkerAttributes (ReportParam reportParam, Element marker) {
    String markerType = reportParam.getMarkerType ();
    if (markerType.startsWith (MarkerFactory.UCD_MARKER_TYPE_PREFIX)) {
        markerType = markerType.substring (MarkerFactory.UCD_MARKER_TYPE_PREFIX.length ());
    }
    marker.setAttribute ("nr", String.valueOf (markerCount));
    marker.setAttribute ("level", String.valueOf (reportParam.getLevel ()));
    marker.setAttribute ("line", String.valueOf (reportParam.getLine ()));
    marker.setAttribute ("lineStart", String.valueOf (reportParam.getLineStart ()));
    marker.setAttribute ("lineEnd", String.valueOf (reportParam.getLineEnd ()));
    marker.setAttribute ("markerType", markerType);
    int iRefCount = reportParam.getReferenceCount ();
    String sReferenceCount = (iRefCount == - 1) ? "-" : "" + iRefCount;
    marker.setAttribute ("referenceCount", sReferenceCount);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/XmlReport.java" startline="264" endline="276">
private void appendProject (Element marker, IMember javaElement) {
    if (javaElement.getJavaProject () != null) {
        IJavaProject project = javaElement.getJavaProject ();
        Element projectElement = appendChild (marker, "project", null);
        projectElement.setAttribute ("name", project.getElementName ());
        IPath location = project.getProject ().getLocation ();
        String parentDir = location.removeLastSegments (1).toString ();
        projectElement.setAttribute ("parentDir", parentDir);
        String projectDir = location.lastSegment ();
        projectElement.setAttribute ("dir", projectDir);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/XmlReport.java" startline="278" endline="284">
public void reportDetectionProblem (IStatus status) {
    detectionProblemCount ++;
    Element problem = doc.createElement ("problem");
    problems.appendChild (problem);
    appendChild (problem, "status", status.toString ());
    appendChild (problem, "exception", UCDetectorPlugin.exceptionToString (status.getException ()));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/XmlReport.java" startline="287" endline="291">
private static void logEndReportMessage (String message, int iStatus, Throwable ex, String...parms) {
    String mes = NLS.bind (message, parms);
    Status status = new Status (iStatus, UCDetectorPlugin.ID, iStatus, mes, ex);
    UCDetectorPlugin.logToEclipseLog (status);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/XmlReport.java" startline="294" endline="333">
private void appendStatistics (boolean isEndReport) {
    if (isFirstStatistic) {
        isFirstStatistic = false;
        abouts = appendChild (statistcs, "abouts", null);
        appendAbout ("operatingSystem", "Operating system", UCDetectorPlugin.getAboutOS (), true, null);
        appendAbout ("javaVersion", "Java", UCDetectorPlugin.getAboutJavaVersion (), true, null);
        appendAbout ("eclipseVersion", "Eclipse", UCDetectorPlugin.getAboutEclipseVersion (), true, null);
        appendAbout ("eclipseHome", "Eclipse home", UCDetectorPlugin.getAboutEclipseHome (), false, null);
        appendAbout ("eclipseProduct", "Eclipse product", UCDetectorPlugin.getAboutEclipseProduct (), true, null);
        appendAbout ("ucdetectorVersion", "UCDetector", UCDetectorPlugin.getAboutUCDVersion (), true, null);
        appendAbout ("logfile", "Logfile", UCDetectorPlugin.getAboutLogfile (), false, null);
        appendAbout ("workspace", "Workspace", UCDetectorPlugin.getAboutWorkspace (), false, null);
        appendAbout ("mode", "Mode", Prefs.getModeName (), true, null);
        appendAbout ("host", "Host", UCDetectorPlugin.getHostName (), false, null);
        appendAbout ("headless", "headless", "" + UCDetectorPlugin.isHeadlessMode (), false, null);
        Element searched = appendChild (statistcs, "searched", null);
        for (IJavaElement javaElement : objectsToIterate) {
            Element search = appendChild (searched, "search", JavaElementUtil.getElementName (javaElement));
            search.setAttribute ("class", javaElement.getClass ().getSimpleName ());
        }
        Element preferencesNode = appendChild (statistcs, "preferences", null);
        Set < Entry < String, String > > preferencesSet = UCDetectorPlugin.getDeltaPreferences ().entrySet ();
        for (Entry < String, String > entry : preferencesSet) {
            Element preferenceNode = appendChild (preferencesNode, "preference", null);
            preferenceNode.setAttribute ("key", entry.getKey ());
            preferenceNode.setAttribute ("value", entry.getValue ());
        }
    }
    long now = System.currentTimeMillis ();
    long duration = (now - startTime);
    String durationString = StopWatch.timeAsString (duration);
    nodeCreated = appendAbout ("reportCreated", "Created report", UCDetectorPlugin.getNow (), true, nodeCreated);
    nodeCreatedTS = appendAbout ("reportCreatedTS", "Created report", "" + now, false, nodeCreatedTS);
    nodeDuration = appendAbout ("searchDuration", "Search duration", durationString, true, nodeDuration);
    nodeDurationTS = appendAbout ("searchDurationTS", "Search duration", "" + duration, false, nodeDurationTS);
    nodeFinished = appendAbout ("detectionFinished", "Detection Finished", "" + isEndReport, false, nodeFinished);
    nodeWarnings = appendAbout ("warnings", "Warnings", String.valueOf (markerCount), true, nodeWarnings);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/XmlReport.java" startline="343" endline="353">
private Element appendAbout (String nodeName, String nodeNiceName, String value, boolean show, Element alreadyCreated) {
    if (alreadyCreated != null) {
        alreadyCreated.getParentNode ().removeChild (alreadyCreated);
    }
    Element about = appendChild (abouts, "about", null);
    about.setAttribute ("name", nodeName);
    about.setAttribute ("show", Boolean.toString (show));
    appendChild (about, "key", nodeNiceName);
    appendChild (about, "value", value);
    return about;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/XmlReport.java" startline="356" endline="363">
private Element appendChild (Element parent, String tagName, String text) {
    Element childNode = doc.createElement (tagName);
    if (text != null) {
        childNode.appendChild (doc.createTextNode (text));
    }
    parent.appendChild (childNode);
    return childNode;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/XmlReport.java" startline="365" endline="368">
public void endReport () throws CoreException {
    endReportCalled = true;
    writeReports (true);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/XmlReport.java" startline="371" endline="412">
private void writeReports (boolean isEndReport) {
    if (! Prefs.isWriteReportFile ()) {
        return;
    }
    long start = System.currentTimeMillis ();
    File reportDir = new File (ReportNameManager.getReportDir (true));
    String reportPath = reportDir.getAbsolutePath ();
    if (initXMLException != null) {
        logEndReportMessage (Messages.XMLReport_WriteError, IStatus.ERROR, initXMLException, reportPath);
        return;
    }
    if (markerCount == 0 && detectionProblemCount == 0) {
        logEndReportMessage (Messages.XMLReport_WriteNoWarnings, IStatus.INFO, initXMLException);
        return;
    }
    appendStatistics (isEndReport);
    copyFilesToDotIconDir (reportDir);
    try {
        List < ReportExtension > xsltExtensions = ReportExtension.getXsltExtensions ();
        for (ReportExtension xsltExtension : xsltExtensions) {
            if (Prefs.isCreateReport (xsltExtension)) {
                String reportName = ReportNameManager.getReportFileName (xsltExtension.getResultFile (), objectsToIterate);
                File resultFile = new File (reportDir, reportName);
                writeTextFile (resultFile, xsltExtension.getXslt ());
            }
        }
        String reportName = ReportNameManager.getReportFileName (Prefs.getReportFile (), objectsToIterate);
        if (Prefs.isCreateReportXML ()) {
            File xmlFile = new File (reportDir, reportName + ".xml");
            writeDocumentToFile (doc, xmlFile);
        }
        long duration = System.currentTimeMillis () - start;
        Log.info ("Created reports in: %s", StopWatch.timeAsString (duration));
        if (isEndReport) {
            logEndReportMessage (Messages.XMLReport_WriteOk, IStatus.INFO, null, String.valueOf (markerCount), reportPath);
        }
    } catch (Exception e) {
        logEndReportMessage (Messages.XMLReport_WriteError, IStatus.ERROR, e, reportPath);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/XmlReport.java" startline="414" endline="424">
private void copyFilesToDotIconDir (File reportDir) {
    File iconsOutDir = new File (reportDir, ICONS_DIR);
    iconsOutDir.mkdirs ();
    try {
        copyStylesheet (iconsOutDir);
        copyIconFiles (iconsOutDir);
    } catch (IOException ex) {
        Log.error ("Problems copying files to: " + ICONS_DIR, ex);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/XmlReport.java" startline="426" endline="430">
private void copyStylesheet (File iconsOutDir) throws IOException {
    InputStream inStream = getClass ().getResourceAsStream (HTML_XSLT);
    copyStream (inStream, new FileOutputStream (new File (iconsOutDir, HTML_XSLT)));
    inStream.close ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/XmlReport.java" startline="439" endline="452">
private static void copyIconFiles (File iconsOutDir) throws IOException {
    for (String iconName : ICONS) {
        Path iconPath = new Path ("icons");
        File outFile = new File (iconsOutDir, iconName);
        Bundle bundle = UCDetectorPlugin.getDefault ().getBundle ();
        copyToIconDir (iconPath, iconName, outFile, bundle);
    }
    for (JavaElementUtil.MemberInfo memberInfo : JavaElementUtil.MemberInfo.values ()) {
        Path iconPath = new Path ("icons/full/obj16/");
        File outFile = new File (iconsOutDir, memberInfo.getIcon ());
        Bundle bundle = Platform.getBundle ("org.eclipse.jdt.ui");
        copyToIconDir (iconPath, memberInfo.getIcon (), outFile, bundle);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/XmlReport.java" startline="454" endline="459">
private static void copyToIconDir (Path iconPath, String iconName, File outFile, Bundle bundle) throws IOException {
    if (! outFile.exists ()) {
        InputStream inStream = FileLocator.openStream (bundle, iconPath.append (iconName), false);
        copyStream (inStream, new FileOutputStream (outFile));
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/XmlReport.java" startline="461" endline="472">
private void writeTextFile (File file, String xslt) throws IOException, TransformerException {
    String text = transformToText (doc, xslt);
    OutputStreamWriter fileWriter = null;
    try {
        fileWriter = new OutputStreamWriter (new FileOutputStream (file), UCDetectorPlugin.UTF_8);
        fileWriter.write (text);
    } finally {
        UCDetectorPlugin.closeSave (fileWriter);
    }
    Log.info ("Wrote file= " + UCDetectorPlugin.getCanonicalPath (file));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/XmlReport.java" startline="474" endline="492">
private static void writeDocumentToFile (Document docToWrite, File file) throws IOException, TransformerException {
    Source source = new DOMSource (docToWrite);
    Result result = new StreamResult (new OutputStreamWriter (new FileOutputStream (file), UCDetectorPlugin.UTF_8));
    TransformerFactory tf = TransformerFactory.newInstance ();
    Transformer xformer = tf.newTransformer ();
    try {
        xformer.setOutputProperty (OutputKeys.METHOD, "xml");
        xformer.setOutputProperty (OutputKeys.INDENT, "yes");
        xformer.setOutputProperty ("{http://xml.apache.org/xslt}indent-amount", "2");
        xformer.setOutputProperty ("{http://xml.apache.org/xalan}indent-amount", "2");
        tf.setAttribute ("indent-number", Integer.valueOf (2));
    } catch (IllegalArgumentException ignore) {
        Log.warn ("Can't change output format: " + ignore);
    }
    xformer.transform (source, result);
    Log.info ("Wrote file= " + UCDetectorPlugin.getCanonicalPath (file));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/XmlReport.java" startline="496" endline="500">
private String transformToText (Document xmlDoc, String xslt) throws TransformerException {
    StringWriter stringWriter = new StringWriter ();
    transform (xmlDoc, xslt, new StreamResult (stringWriter));
    return stringWriter.toString ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/XmlReport.java" startline="502" endline="508">
private void transform (Document xmlDoc, String xslt, Result result) throws TransformerException {
    InputStream xslIn = getClass ().getClassLoader ().getResourceAsStream (xslt);
    Templates template = TransformerFactory.newInstance ().newTemplates (new StreamSource (xslIn));
    Transformer transformer = template.newTransformer ();
    Source source = new DOMSource (xmlDoc);
    transformer.transform (source, result);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/XmlReport.java" startline="510" endline="516">
private static void copyStream (InputStream inStream, OutputStream outStream) throws IOException {
    byte [] buffer = new byte [1024];
    int read;
    while ((read = inStream.read (buffer)) != - 1) {
        outStream.write (buffer, 0, read);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/XmlReport.java" startline="518" endline="520">
public void setExtension (ReportExtension reportExtension) {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/ReportNameManager.java" startline="39" endline="49">
public static String getReportDir (boolean create) {
    String dir = Prefs.getString (Prefs.REPORT_DIR);
    if (dir.length () == 0) {
        dir = ReportNameManager.getReportDirDefault ();
    }
    File reportDir = new File (dir);
    reportDir.mkdirs ();
    return reportDir.getAbsolutePath ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/ReportNameManager.java" startline="51" endline="64">
public static String getReportDirDefault () {
    String reportDir;
    try {
        File workspaceDir = Platform.getLocation ().toFile ();
        reportDir = UCDetectorPlugin.getCanonicalPath (new File (workspaceDir, REPORT_DEFAULT_DIR));
    } catch (Exception e) {
        reportDir = REPORT_DEFAULT_DIR;
        Log.error ("Can't get report file name", e);
    }
    new File (reportDir).mkdirs ();
    return reportDir;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/ReportNameManager.java" startline="73" endline="83">
public static String getReportFileName (String fileName, IJavaElement [] objectsToIterate) {
    DateFormat dateFormat = new SimpleDateFormat ("yyyy-MM-dd");
    DateFormat timeFormat = new SimpleDateFormat ("HHmmss");
    String result = fileName;
    result = result.replace ("${reportName}", Prefs.getReportFile ());
    result = result.replace ("${project}", ReportNameManager.getProjectName (objectsToIterate));
    result = result.replace ("${date}", dateFormat.format (new Date ()));
    result = result.replace ("${time}", timeFormat.format (new Date ()));
    result = result.replace (FILE_NAME_REPLACE_NUMBER, freeFileNumber);
    return result;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/ReportNameManager.java" startline="87" endline="106">
public static void setNextFreeFileNumberString () {
    File reportDir = new File (getReportDir (true));
    String [] files = reportDir.list ();
    files = (files == null) ? new String [0] : files;
    for (int i = 1;
    i < 1000; i ++) {
        String number = FORMAT_REPORT_NUMBER.format (i);
        boolean fileNumberFound = false;
        for (String file : files) {
            if (file.contains (number)) {
                fileNumberFound = true;
                break;
            }
        }
        if (! fileNumberFound) {
            freeFileNumber = number;
            return;
        }
    }
    freeFileNumber = "";
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/ReportNameManager.java" startline="108" endline="123">
private static String getProjectName (IJavaElement [] objectsToIterate) {
    Set < String > projects = new HashSet < String > ();
    for (IJavaElement element : objectsToIterate) {
        if (element.getJavaProject () != null) {
            projects.add (element.getJavaProject ().getElementName ());
        }
    }
    switch (projects.size ()) {
        case 0 :
            return "unknown_project";
        case 1 :
            return projects.iterator ().next ();
        default :
            return "several_projects";
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/TextReport.java" startline="42" endline="47">
public void startReport (IJavaElement [] objectsToIterateIn, long startTime) throws CoreException {
    this.objectsToIterate = objectsToIterateIn;
    reset ();
    appendTitle ();
    appendHeader ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/TextReport.java" startline="49" endline="53">
private void reset () {
    this.report = new StringBuilder ();
    this.detectionProblems.clear ();
    this.markerCount = 0;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/TextReport.java" startline="55" endline="60">
private void appendTitle () {
    report.append ("Created with UCDetector ").append (UCDetectorPlugin.getAboutUCDVersion ()).append (TAB);
    report.append (UCDetectorPlugin.getNow ()).append (TAB);
    report.append ("http://www.ucdetector.org/").append (TAB);
    report.append (NEW_LINE);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/TextReport.java" startline="62" endline="69">
private void appendHeader () {
    report.append ("Location").append (TAB);
    report.append ("Description").append (TAB);
    report.append ("Java").append (TAB);
    report.append ("Marker").append (TAB);
    report.append ("Author");
    report.append (NEW_LINE);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/TextReport.java" startline="71" endline="82">
public boolean reportMarker (ReportParam reportParam) throws CoreException {
    markerCount ++;
    IMember javaElement = reportParam.getJavaElement ();
    String location = JavaElementUtil.createJavaLink (javaElement, reportParam.getLine ());
    report.append (location).append (TAB);
    report.append (reportParam.getMessage ()).append (TAB);
    report.append (JavaElementUtil.getElementName (javaElement)).append (TAB);
    report.append (reportParam.getMarkerType ()).append (TAB);
    report.append (reportParam.getAuthorTrimmed ());
    report.append (NEW_LINE);
    return true;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/TextReport.java" startline="84" endline="86">
public void reportDetectionProblem (IStatus status) {
    detectionProblems.add (status);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/TextReport.java" startline="88" endline="97">
public void endReport () throws CoreException {
    if (! detectionProblems.isEmpty ()) {
        report.append (NEW_LINE).append (detectionProblems.size ()).append (" Exceptions found during detection");
    }
    for (IStatus status : detectionProblems) {
        report.append (NEW_LINE);
        report.append (UCDetectorPlugin.exceptionToString (status.getException ()));
    }
    writeReportFile ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/TextReport.java" startline="99" endline="116">
private void writeReportFile () {
    if (markerCount == 0 || ! Prefs.isCreateReport (extension)) {
        return;
    }
    String reportName = ReportNameManager.getReportFileName (extension.getResultFile (), objectsToIterate);
    String reportDir = ReportNameManager.getReportDir (true);
    File resultFile = new File (reportDir, reportName);
    OutputStreamWriter writer = null;
    try {
        writer = new OutputStreamWriter (new FileOutputStream (resultFile), UCDetectorPlugin.UTF_8);
        writer.append (report.toString ());
        Log.info ("Created file: " + resultFile);
    } catch (IOException ex) {
        UCDetectorPlugin.logToEclipseLog ("Can't write report", ex);
    }
    UCDetectorPlugin.closeSave (writer);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/report/TextReport.java" startline="118" endline="120">
public void setExtension (ReportExtension reportExtension) {
    this.extension = reportExtension;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/FinalHandler.java" startline="38" endline="40">
FinalHandler (MarkerFactory markerFactory) {
    this.markerFactory = markerFactory;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/FinalHandler.java" startline="46" endline="66">
boolean createFinalMarker (IMethod method, int line) throws CoreException {
    int flags = method.getFlags ();
    if (line == LineManger.LINE_NOT_FOUND || ! Prefs.isCheckUseFinalMethod () || Flags.isPrivate (flags) || Flags.isStatic (flags) || Flags.isAbstract (flags) || Flags.isFinal (flags) || method.isConstructor () || method.isMainMethod () || JavaElementUtil.isInterfaceMethod (method)) {
        return false;
    }
    IType type = JavaElementUtil.getTypeFor (method, false);
    if (! JavaElementUtil.hasSubClasses (type)) {
        return false;
    }
    return markerFactory.createFinalMarker (method, line);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/FinalHandler.java" startline="72" endline="87">
boolean createFinalMarker (IField field, int line) throws CoreException {
    int flags = field.getFlags ();
    if (line == LineManger.LINE_NOT_FOUND || ! Prefs.isCheckUseFinalField () || Flags.isFinal (flags) || Flags.isVolatile (flags) || field.isEnumConstant () || JavaElementUtil.isInterfaceField (field)) {
        return false;
    }
    if (! canMakeFinal (field)) {
        return false;
    }
    return markerFactory.createFinalMarker (field, line);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/FinalHandler.java" startline="95" endline="100">
private static boolean canMakeFinal (IField field) throws CoreException {
    SearchPattern pattern = SearchPattern.createPattern (field, IJavaSearchConstants.WRITE_ACCESSES);
    CanMakeFinalRequestor requestor = new CanMakeFinalRequestor (field);
    JavaElementUtil.runSearch (pattern, requestor);
    return ! requestor.fieldHasWriteAccessFromMethod;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/FinalHandler.java" startline="115" endline="117">
CanMakeFinalRequestor (IField field) {
    this.field = field;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/FinalHandler.java" startline="120" endline="122">
public String toString () {
    return field.getElementName () + ".hasWriteAccess=" + fieldHasWriteAccessFromMethod;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/FinalHandler.java" startline="125" endline="157">
public void acceptSearchMatch (SearchMatch match) {
    try {
        Object matchElement = match.getElement ();
        if (! (matchElement instanceof IJavaElement)) {
            return;
        }
        IJavaElement javaElement = (IJavaElement) matchElement;
        if (javaElement instanceof IMethod) {
            IMethod method = (IMethod) javaElement;
            if (! Flags.isStatic (field.getFlags ()) && method.isConstructor ()) {
                if (JavaElementUtil.isInSameType (field, javaElement)) {
                    return;
                }
            }
        } else if (javaElement instanceof IField) {
            return;
        } else if (javaElement instanceof IInitializer) {
            return;
        }

    } catch (JavaModelException e) {
        Log.info ("Problem for search match %s: %s", match, e);
    }
    this.fieldHasWriteAccessFromMethod = true;
    throw new OperationCanceledException ("Cancel Search: Field is not final");
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/SearchManager.java" startline="79" endline="85">
public SearchManager (UCDProgressMonitor monitor, int searchTotal, MarkerFactory markerFactory) {
    this.monitor = monitor;
    this.searchTotal = searchTotal;
    this.markerFactory = markerFactory;
    this.finalHandler = new FinalHandler (markerFactory);
    ReportParam.lineManager = lineManger;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/SearchManager.java" startline="91" endline="127">
public final void search (Set < TypeContainer > typeContainers) {
    logStart (typeContainers);
    try {
        int pos = 0;
        for (TypeContainer container : typeContainers) {
            if (monitor.isCanceled ()) {
                return;
            }
            pos ++;
            if (Log.isDebug ()) {
                Log.debug (getProgress (typeContainers, pos, container));
            } else if (pos == 1 || pos % 10 == 0 || pos == typeContainers.size ()) {
                Log.info (getProgress (typeContainers, pos, container));
            }

            if (container.getType () != null) {
                searchAndHandleException (container.getType ());
            }
            for (IMethod method : container.getMethods ()) {
                searchAndHandleException (method);
            }
            for (IField field : container.getFields ()) {
                searchAndHandleException (field);
            }
        }
    } catch (OperationCanceledException e) {
    }
    Log.info ("Search end: " + UCDetectorPlugin.getNow ());
    if (searchProblems.size () > 0) {
        IStatus [] stati = searchProblems.toArray (new IStatus [searchProblems.size ()]);
        MultiStatus status = new MultiStatus (UCDetectorPlugin.ID, IStatus.ERROR, stati, stati.length + " errors happened during UCDetection", null);
        UCDetectorPlugin.logToEclipseLog (status);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/SearchManager.java" startline="130" endline="134">
private String getProgress (Set < TypeContainer > typeContainers, int pos, TypeContainer container) {
    return String.format ("Search %4s of %4s types. Markers %4s. Exceptions %2s. Class %s - %s", pos, typeContainers.size (), markerCreated, searchProblems.size (), JavaElementUtil.getTypeName (container.getType ()), UCDetectorPlugin.getNow ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/SearchManager.java" startline="136" endline="147">
private static void logStart (Set < TypeContainer > typeContainers) {
    int methodsToDetect = 0;
    int fieldsToDetect = 0;
    for (TypeContainer container : typeContainers) {
        methodsToDetect += container.getMethods ().size ();
        fieldsToDetect += container.getFields ().size ();
    }
    Log.info ("Detection start      : " + UCDetectorPlugin.getNow ());
    Log.info ("    Classes to detect: " + typeContainers.size ());
    Log.info ("    Methods to detect: " + methodsToDetect);
    Log.info ("    Fields  to detect: " + fieldsToDetect);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/SearchManager.java" startline="152" endline="182">
private void searchAndHandleException (IMember member) {
    monitor.setActiveSearchElement (member);
    checkForCancel ();
    search ++;
    try {
        if (member instanceof IType) {
            searchSpecific ((IType) member);
        } else if (member instanceof IMethod) {
            searchSpecific ((IMethod) member);
        } else if (member instanceof IField) {
            searchSpecific ((IField) member);
        }

    } catch (OperationCanceledException ex) {
        throw ex;
    } catch (Exception ex) {
        String message = String.format ("An exception occurred searching %s %s: %s", JavaElementUtil.getMemberTypeString (member), JavaElementUtil.getElementName (member), ex);
        Log.error (message, ex);
        Status status = new Status (IStatus.ERROR, UCDetectorPlugin.ID, IStatus.ERROR, message, ex);
        markerFactory.reportDetectionProblem (status);
        searchProblems.add (status);
        if (searchProblems.size () > 100) {
            throw new OperationCanceledException ("Stopped searching. To many Exceptions!");
        }
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/SearchManager.java" startline="187" endline="197">
private void searchSpecific (IType type) throws CoreException {
    monitor.worked (1);
    String searchInfo = JavaElementUtil.getMemberTypeString (type);
    updateMonitorMessage (type, Messages.SearchManager_SearchReferences, searchInfo);
    StopWatch watch = new StopWatch (type);
    int found = searchImpl (type, searchInfo, false);
    watch.end ("    Calculate reference marker");
    if (found == 0) {
        addNoRefTypes (type);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/SearchManager.java" startline="199" endline="202">
private void addNoRefTypes (IType type) {
    Log.info ("No references found for type: %s", JavaElementUtil.getElementName (type));
    noRefTypes.add (type);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/SearchManager.java" startline="207" endline="247">
private void searchSpecific (IMethod method) throws CoreException {
    monitor.worked (1);
    IType type = JavaElementUtil.getTypeFor (method, false);
    if (type.isAnonymous ()) {
        return;
    }
    if (noRefTypes.contains (type)) {
        return;
    }
    if (JavaElementUtil.isMethodOfJavaLangObject (method)) {
        return;
    }
    if (JavaElementUtil.isSerializationMethod (method)) {
        return;
    }
    int line = lineManger.getLine (method);
    if (line == LineManger.LINE_NOT_FOUND) {
        logIgnore ("Ignore method " + method.getElementName ());
        return;
    }
    String searchInfo = JavaElementUtil.getMemberTypeString (method);
    updateMonitorMessage (method, "override/implements", searchInfo);
    StopWatch stop = new StopWatch (method);
    boolean isOverriddenMethod = JavaElementUtil.isOverriddenMethod (method);
    stop.end ("    Calculate if is overridden method");
    StopWatch watch = new StopWatch (method);
    if (! isOverriddenMethod) {
        updateMonitorMessage (method, SEARCH_FINAL_MESSAGE, searchInfo);
        boolean created = finalHandler.createFinalMarker (method, line);
        watch.end ("    Calculate method final marker");
        if (created) {
            markerCreated ++;
        }
    }
    updateMonitorMessage (method, Messages.SearchManager_SearchReferences, searchInfo);
    searchImpl (method, searchInfo, isOverriddenMethod);
    watch.end ("    searchImpl");
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/SearchManager.java" startline="252" endline="293">
private void searchSpecific (IField field) throws CoreException {
    monitor.worked (1);
    int line = lineManger.getLine (field);
    if (line == LineManger.LINE_NOT_FOUND) {
        logIgnore ("Ignore field " + field.getElementName ());
        return;
    }
    String searchInfo = JavaElementUtil.getMemberTypeString (field);
    updateMonitorMessage (field, SEARCH_FINAL_MESSAGE, searchInfo);
    StopWatch watch = new StopWatch (field);
    if (JavaElementUtil.isSerializationField (field)) {
        return;
    }
    boolean created = finalHandler.createFinalMarker (field, line);
    watch.end ("    Calculate field final marker");
    if (created) {
        markerCreated ++;
    }
    if (Flags.isPrivate (field.getFlags ())) {
        return;
    }
    IType type = JavaElementUtil.getTypeFor (field, false);
    if (noRefTypes.contains (type)) {
        return;
    }
    if (type.isAnonymous ()) {
        return;
    }
    if (usedByValueEnumsCache.contains (type)) {
        return;
    }
    updateMonitorMessage (field, Messages.SearchManager_SearchReferences, searchInfo);
    int found = searchImpl (field, searchInfo, false);
    watch.end ("    searchImpl");
    if (found > 0 && ! hasReadAccess (field)) {
        String message = NLS.bind (Messages.MarkerFactory_MarkerReferenceFieldNeverRead, new Object [] {JavaElementUtil.getElementName (field)});
        markerFactory.createReferenceMarker (field, message, line, 0);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/SearchManager.java" startline="300" endline="308">
boolean contains (IType enumType) throws CoreException {
    if (enumType.isEnum () && ! alreadySearched.contains (enumType)) {
        alreadySearched.add (enumType);
        if (JavaElementUtil.isUsedBySpecialEnumMethods (enumType)) {
            usedByValueEnums.add (enumType);
        }
    }
    return usedByValueEnums.contains (enumType);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/SearchManager.java" startline="311" endline="315">
private static void logIgnore (String message) {
    if (Log.isDebug ()) {
        Log.debug (message);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/SearchManager.java" startline="317" endline="319">
private void checkForCancel () {
    monitor.throwIfIsCanceled ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/SearchManager.java" startline="321" endline="323">
public int getMarkerCreated () {
    return markerCreated;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/SearchManager.java" startline="328" endline="333">
private static boolean hasReadAccess (IField field) throws CoreException {
    SearchPattern pattern = SearchPattern.createPattern (field, IJavaSearchConstants.READ_ACCESSES);
    CountSearchRequestor requestor = new CountSearchRequestor ();
    JavaElementUtil.runSearch (pattern, requestor);
    return requestor.isFound ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/SearchManager.java" startline="338" endline="398">
private int searchImpl (IMember member, String searchInfo, boolean isOverriddenMethod) throws CoreException {
    int line = lineManger.getLine (member);
    checkForCancel ();
    if (line == LineManger.LINE_NOT_FOUND) {
        return 0;
    }
    VisibilityHandler visibilityHandler = new VisibilityHandler (markerFactory, member);
    UCDSearchRequestor foundResult = searchJavaImpl (member, visibilityHandler);
    int found = foundResult.found;
    int foundInTextFiles = 0;
    boolean isTestOnlyMatches = found > 0 && (found == foundResult.foundTest);
    if (found == 0 || isTestOnlyMatches) {
        foundInTextFiles = searchTextImpl (member, visibilityHandler);
    }
    boolean created = false;
    if (isTestOnlyMatches && foundInTextFiles == 0) {
        created = markerFactory.createReferenceMarkerTestOnly (member, line);
        if (created) {
            markerCreated ++;
        }
    }
    found += foundInTextFiles;
    if (! isOverriddenMethod) {
        created = visibilityHandler.createMarker (line, found);
        if (created) {
            markerCreated ++;
        }
    }
    Object [] bindings = new Object [] {searchInfo, JavaElementUtil.getElementName (member), Integer.valueOf (found)};
    String markerMessage = NLS.bind (Messages.MarkerFactory_MarkerReference, bindings);
    if (member instanceof IMethod) {
        IMethod method = (IMethod) member;
        if (method.isConstructor () && found > 0) {
            return found;
        }
        boolean isInterfaceMethod = JavaElementUtil.isInterfaceMethod (method);
        if (! isInterfaceMethod && isOverriddenMethod) {
            return found;
        }
    }
    if (found > Prefs.getWarnLimit ()) {
        return found;
    }
    if (member instanceof IType && JavaElementUtil.hasMainMethod ((IType) member)) {
        if (Prefs.isFilterClassWithMainMethod ()) {
            Log.info ("No marker, because class has main() method: %s", JavaElementUtil.getElementName (member));
            return found;
        }
    }
    created = markerFactory.createReferenceMarker (member, markerMessage, line, found);
    if (created) {
        markerCreated ++;
    }
    return found;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/SearchManager.java" startline="403" endline="413">
private UCDSearchRequestor searchJavaImpl (IMember member, VisibilityHandler visibilityHandler) throws CoreException {
    checkForCancel ();
    SearchPattern pattern = SearchPattern.createPattern (member, IJavaSearchConstants.REFERENCES);
    UCDSearchRequestor requestor = new UCDSearchRequestor (member, visibilityHandler, lineManger);
    boolean isSearchException = JavaElementUtil.runSearch (pattern, requestor);
    if (isSearchException && requestor.found == 0) {
        requestor.found = 1;
    }
    return requestor;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/SearchManager.java" startline="418" endline="479">
private int searchTextImpl (IMember member, VisibilityHandler visibilityHandler) throws CoreException {
    checkForCancel ();
    if (! Prefs.isUCDetectionInLiterals () || ! (member instanceof IType)) {
        return 0;
    }
    if (! Flags.isPublic (member.getFlags ())) {
        return 0;
    }
    IType type = (IType) member;
    if (type.isAnonymous () || type.isLocal () || ! Flags.isPublic (type.getFlags ())) {
        return 0;
    }
    String searchInfo = JavaElementUtil.getMemberTypeString (member);
    updateMonitorMessage (type, Messages.SearchManager_SearchClassNameAsLiteral, searchInfo);
    FileTextSearchScope scope = FileTextSearchScope.newWorkspaceScope (Prefs.getFilePatternLiteralSearch (), false);
    List < String > searchStrings = new ArrayList < String > ();
    if (Prefs.isUCDetectionInLiteralsFullClassName ()) {
        String fullClassName = type.getFullyQualifiedName ();
        searchStrings.add (fullClassName);
        Log.debug ("Text search of full classname '%s'", fullClassName);
    }
    if (Prefs.isUCDetectionInLiteralsSimpleClassName ()) {
        String simpleClassName = type.getElementName ();
        searchStrings.add (simpleClassName);
        Log.debug ("Text search of simple classname '%s'", simpleClassName);
    }
    int requestorFound = 0;
    for (String searchString : searchStrings) {
        if (searchString == null || searchString.length () == 0) {
            continue;
        }
        Pattern searchPattern = Pattern.compile (Pattern.quote (searchString));
        UCDFileSearchRequestor requestor = new UCDFileSearchRequestor (type, searchString, visibilityHandler);
        try {
            TextSearchEngine.createDefault ().search (scope, requestor, searchPattern, null);
        } catch (OperationCanceledException e) {
            Log.info ("Text search canceled");
        } catch (OutOfMemoryError e) {
            UCDetectorPlugin.handleOutOfMemoryError (e);
        }
        if (requestor.matchedFiles.size () > 0) {
            if (Log.isDebug ()) {
                Log.debug ("Matches found searching class name '%s' in text files: %s", searchString, requestor.matchedFiles);
            }
            addNoRefTypes (type);
        }
        requestorFound += requestor.matchedFiles.size ();
    }
    return requestorFound;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/SearchManager.java" startline="485" endline="492">
private void updateMonitorMessage (IJavaElement element, String details, String searchInfo) {
    checkForCancel ();
    String javaElement = JavaElementUtil.getElementName (element);
    Object [] bindings = new Object [] {Integer.valueOf (markerCreated), Integer.valueOf (search), Integer.valueOf (searchTotal), searchInfo, javaElement, details};
    String message = NLS.bind (Messages.SearchManager_Monitor, bindings);
    monitor.subTask (message);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/SearchManager.java" startline="504" endline="506">
public String toString () {
    return String.format ("'%s' found=%s", searchString, Integer.valueOf (matchedFiles.size ()));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/SearchManager.java" startline="508" endline="512">
UCDFileSearchRequestor (IType startType, String searchString, VisibilityHandler visibilityHandler) {
    this.startType = startType;
    this.searchString = searchString;
    this.visibilityHandler = visibilityHandler;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/SearchManager.java" startline="520" endline="540">
public boolean acceptPatternMatch (TextSearchMatchAccess matchAccess) throws CoreException {
    char beforeChar = getCharBefore (matchAccess);
    char afterChar = getCharAfter (matchAccess);
    boolean isValidCharBefore = Character.isJavaIdentifierStart (beforeChar);
    boolean isValidCharAfter = Character.isJavaIdentifierPart (afterChar);
    boolean isClassNamMatchOk = ! isValidCharBefore && ! isValidCharAfter;
    if (DEBUG) {
        int offset = matchAccess.getMatchOffset ();
        int length = matchAccess.getMatchLength ();
        String match = matchAccess.getFileContent (offset, length);
        Log.debug ("    TEXT MATCH {%s%s%s}. isMatchOk: %s. in: %s", beforeChar, match, afterChar, isClassNamMatchOk, matchAccess.getFile ());
    }
    if (isClassNamMatchOk) {
        matchedFiles.add (matchAccess.getFile ().getFullPath ().toString ());
    }
    IJavaElement matchJavaElement = JavaCore.create (matchAccess.getFile ());
    visibilityHandler.checkVisibility (matchJavaElement);
    checkCancelSearch (startType, matchedFiles.size (), - 1, visibilityHandler);
    return true;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/SearchManager.java" startline="542" endline="545">
private static char getCharBefore (TextSearchMatchAccess match) {
    int offset = match.getMatchOffset ();
    return (offset == 0) ? '\n' : match.getFileContentChar (offset - 1);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/SearchManager.java" startline="547" endline="552">
private static char getCharAfter (TextSearchMatchAccess match) {
    int offset = match.getMatchOffset ();
    int length = match.getMatchLength ();
    boolean fileEnd = (offset + length) >= match.getFileContentLength ();
    return fileEnd ? '\n' : match.getFileContentChar (offset + length);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/SearchManager.java" startline="567" endline="570">
public String toString () {
    return String.format ("%s found=%s, foundTest=%s", searchStart.getElementName (), Integer.valueOf (found), Integer.valueOf (foundTest));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/SearchManager.java" startline="572" endline="576">
UCDSearchRequestor (IMember searchStart, VisibilityHandler visibilityHandler, LineManger lineManager) {
    this.searchStart = searchStart;
    this.visibilityHandler = visibilityHandler;
    this.lineManager = lineManager;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/SearchManager.java" startline="579" endline="592">
public void acceptSearchMatch (SearchMatch match) {
    if (ignoreMatch (match)) {
        return;
    }
    this.found ++;
    IJavaElement matchJavaElement = (IJavaElement) match.getElement ();
    if (Prefs.isDetectTestOnly () && JavaElementUtil.isTestCode (matchJavaElement)) {
        foundTest ++;
    }
    visibilityHandler.checkVisibility (matchJavaElement);
    checkCancelSearch (searchStart, found, foundTest, visibilityHandler);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/SearchManager.java" startline="664" endline="696">
private boolean ignoreMatch (SearchMatch match) {
    IJavaElement matchJavaElement = defaultIgnoreMatch (match);
    if (matchJavaElement == null) {
        return true;
    }
    if (matchJavaElement instanceof IImportDeclaration) {
        IImportDeclaration importDecl = (IImportDeclaration) matchJavaElement;
        try {
            return ! Flags.isStatic (importDecl.getFlags ());
        } catch (JavaModelException ex) {
            Log.error ("Can't get flags of: " + importDecl.getElementName (), ex);
            return false;
        }
    }
    if (searchStart instanceof IType) {
        IType searchStartType = (IType) searchStart;
        IType matchPrimaryType = JavaElementUtil.getTypeFor (matchJavaElement, false);
        if (matchPrimaryType.equals (searchStartType)) {
            return true;
        }
    }
    if (matchJavaElement.equals (searchStart)) {
        return true;
    }
    return false;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/SearchManager.java" startline="704" endline="719">
private static void checkCancelSearch (IMember startElement, int found, int foundTest, VisibilityHandler visibilityHandler) {
    if (Prefs.isDetectTestOnly () && (found == foundTest)) {
        return;
    }
    if (found <= Prefs.getWarnLimit ()) {
        return;
    }
    if (Prefs.isVisibilityCheck (startElement) && ! visibilityHandler.isMaxVisibilityFoundPublic ()) {
        return;
    }
    throw new OperationCanceledException ("Cancel Search: Warn limit reached");
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/SearchManager.java" startline="731" endline="748">
public static IJavaElement defaultIgnoreMatch (SearchMatch match) {
    if (match.isInsideDocComment ()) {
        return null;
    }
    if (match.getAccuracy () == SearchMatch.A_INACCURATE) {
        return null;
    }
    Object matchElement = match.getElement ();
    if (! (matchElement instanceof IJavaElement)) {
        return null;
    }
    return (IJavaElement) matchElement;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/LineManger.java" startline="95" endline="97">
public LineManger () {
    authorMap.clear ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/LineManger.java" startline="105" endline="109">
public int getLine (IMember element) throws CoreException {
    ISourceRange sourceRange = element.getNameRange ();
    int offset = sourceRange.getOffset ();
    return getLine (element, offset);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/LineManger.java" startline="111" endline="124">
public int getLineEnd (IMember element) {
    try {
        ISourceRange sourceRange = element.getSourceRange ();
        int offsetEnd = sourceRange.getOffset () + sourceRange.getLength ();
        IScanner scanner = createScanner (element);
        if (scanner != null) {
            return scanner.getLineNumber (offsetEnd);
        }
    } catch (CoreException e) {
        Log.warn ("Can't get LineEnd: %s", e);
    }
    return LINE_NOT_FOUND;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/LineManger.java" startline="126" endline="139">
public int getLineStart (IMember element) {
    try {
        ISourceRange javaDocRange = element.getJavadocRange ();
        int offset = javaDocRange != null ? javaDocRange.getOffset () : element.getSourceRange ().getOffset ();
        IScanner scanner = createScanner (element);
        if (scanner != null) {
            return scanner.getLineNumber (offset);
        }
    } catch (CoreException e) {
        Log.warn ("Can't get LineEnd: %s", e);
    }
    return LINE_NOT_FOUND;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/LineManger.java" startline="141" endline="143">
public static String getAuthor (IJavaElement javaElement) {
    return authorMap.get (JavaElementUtil.getTypeFor (javaElement, true));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/LineManger.java" startline="151" endline="162">
public int getLine (IMember element, int offset) throws CoreException {
    IScanner scanner = createScanner (element);
    if (scanner == null) {
        return LINE_NOT_FOUND;
    }
    int lineNbr = scanner.getLineNumber (offset);
    Set < Integer > ignoreLines = ignoreLineMap.get (scanner);
    if (ignoreLines.contains (Integer.valueOf (lineNbr))) {
        return LINE_NOT_FOUND;
    }
    return lineNbr;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/LineManger.java" startline="168" endline="178">
private static FindIgnoreLinesVisitor findUcdSuppressWarningLines (IScanner scanner, ICompilationUnit compilationUnit) {
    ASTParser parser = ASTParser.newParser (AST.JLS3);
    parser.setSource (compilationUnit);
    parser.setKind (ASTParser.K_COMPILATION_UNIT);
    parser.setResolveBindings (true);
    ASTNode createAST = parser.createAST (null);
    FindIgnoreLinesVisitor visitor = new FindIgnoreLinesVisitor (scanner);
    createAST.accept (visitor);
    return visitor;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/LineManger.java" startline="185" endline="187">
protected FindIgnoreLinesVisitor (IScanner scanner) {
    this.scanner = scanner;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/LineManger.java" startline="196" endline="239">
protected boolean visitImpl (BodyDeclaration declaration, SimpleName name) {
    for (Object modifier : declaration.modifiers ()) {
        if (modifier instanceof Annotation) {
            Annotation annotation = (Annotation) modifier;
            if (isIgnoreAnnotation (annotation)) {
                ignoreLines.add (Integer.valueOf (scanner.getLineNumber (name.getStartPosition ())));
            }
        }
    }
    if (Prefs.isFilterDeprecated ()) {
        Javadoc javadoc = declaration.getJavadoc ();
        if (javadoc != null && javadoc.tags () != null) {
            @SuppressWarnings("unchecked")
            List < TagElement > tags = javadoc.tags ();
            for (TagElement tag : tags) {
                if (TagElement.TAG_DEPRECATED.equals (tag.getTagName ())) {
                    ignoreLines.add (Integer.valueOf (scanner.getLineNumber (name.getStartPosition ())));
                }
            }
        }
    }
    if (declaration instanceof AbstractTypeDeclaration) {
        Javadoc javadoc = declaration.getJavadoc ();
        if (javadoc != null && javadoc.tags () != null) {
            @SuppressWarnings("unchecked")
            List < TagElement > tags = javadoc.tags ();
            for (TagElement tag : tags) {
                if (TagElement.TAG_AUTHOR.equals (tag.getTagName ())) {
                    @SuppressWarnings("unchecked")
                    List < TextElement > fragments = tag.fragments ();
                    if (! fragments.isEmpty () && firstAuthor == null) {
                        firstAuthor = fragments.get (0).getText ();
                        break;
                    }
                }
            }
        }
    }
    return true;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/LineManger.java" startline="241" endline="268">
private static boolean isIgnoreAnnotation (Annotation annotation) {
    String visibleName = annotation.getTypeName ().getFullyQualifiedName ();
    if (Prefs.isFilter_NO_UCD () && isSuppressWarningsUCDetector (annotation, visibleName)) {
        return true;
    }
    if (isUsedByAnnotation (visibleName)) {
        return true;
    }
    if (Prefs.isFilterDeprecated () && isDeprecatedAnnotation (visibleName)) {
        return true;
    }
    if (Prefs.isFilterAnnotation (visibleName)) {
        return true;
    }
    ITypeBinding typeBinding = annotation.resolveTypeBinding ();
    if (typeBinding != null) {
        String name = typeBinding.getName ();
        String fullName = typeBinding.getQualifiedName ();
        if (Prefs.isFilterAnnotation (fullName) || Prefs.isFilterAnnotation (name)) {
            return true;
        }
    }
    return false;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/LineManger.java" startline="270" endline="291">
private static boolean isSuppressWarningsUCDetector (Annotation annotation, String name) {
    if (SuppressWarnings.class.getName ().equals (name) || SuppressWarnings.class.getSimpleName ().equals (name)) {
        if (annotation instanceof SingleMemberAnnotation) {
            Expression value = ((SingleMemberAnnotation) annotation).getValue ();
            if (value instanceof ArrayInitializer) {
                ArrayInitializer arrayInitializer = (ArrayInitializer) value;
                List < ? > expressions = arrayInitializer.expressions ();
                for (Object oExpression : expressions) {
                    if (isUcdTag ((StringLiteral) oExpression)) {
                        return true;
                    }
                }
            } else if (value instanceof StringLiteral) {
                if (isUcdTag ((StringLiteral) value)) {
                    return true;
                }
            }

        }
    }
    return false;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/LineManger.java" startline="293" endline="296">
private static boolean isUsedByAnnotation (String name) {
    return UsedBy.class.getSimpleName ().equals (name) || UsedBy.class.getName ().equals (name);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/LineManger.java" startline="299" endline="302">
private static boolean isDeprecatedAnnotation (String name) {
    return Deprecated.class.getSimpleName ().equals (name) || Deprecated.class.getName ().equals (name);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/LineManger.java" startline="304" endline="307">
private static boolean isUcdTag (StringLiteral literal) {
    return literal.getLiteralValue ().equalsIgnoreCase (UCD_ANNOTATION_VALUE);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/LineManger.java" startline="313" endline="362">
private IScanner createScanner (IJavaElement javaElement) throws CoreException {
    IOpenable openable = javaElement.getOpenable ();
    if (! (openable instanceof ICompilationUnit)) {
        Log.warn ("openable NOT instanceof ICompilationUnit '%s' %s", JavaElementUtil.getElementName (javaElement), JavaElementUtil.getClassName (javaElement));
        return null;
    }
    ICompilationUnit compilationUnit = (ICompilationUnit) openable;
    long timeStamp = javaElement.getResource ().getLocalTimeStamp ();
    ScannerTimestamp scannerTimestamp = scannerMap.get (compilationUnit);
    if (scannerTimestamp != null) {
        if (timeStamp > scannerTimestamp.timeStamp) {
            scannerMap.remove (compilationUnit);
        } else {
            return scannerMap.get (compilationUnit).scanner;
        }
    }
    IScanner scanner = ToolFactory.createScanner (true, false, false, true);
    char [] contents = compilationUnit.getBuffer ().getCharacters ();
    contentsMap.put (compilationUnit, contents);
    scanner.setSource (contents);
    Set < Integer > ignoreLines = new HashSet < Integer > ();
    ignoreLineMap.put (scanner, ignoreLines);
    int nextToken;
    try {
        while ((nextToken = scanner.getNextToken ()) != ITerminalSymbols.TokenNameEOF) {
            if (Prefs.isFilter_NO_UCD ()) {
                addIgnoreLineForToken (ignoreLines, scanner, NO_UCD_COMMENT, nextToken, ITerminalSymbols.TokenNameCOMMENT_LINE);
            }
        }
    } catch (InvalidInputException e) {
        IStatus status = new Status (IStatus.ERROR, UCDetectorPlugin.ID, IStatus.ERROR, e.getMessage (), e);
        throw new CoreException (status);
    }
    scannerMap.put (compilationUnit, new ScannerTimestamp (scanner, timeStamp));
    lineEndsMap.put (compilationUnit, scanner.getLineEnds ());
    FindIgnoreLinesVisitor visitor = findUcdSuppressWarningLines (scanner, compilationUnit);
    ignoreLines.addAll (visitor.ignoreLines);
    if (visitor.firstAuthor != null) {
        IType type = JavaElementUtil.getTypeFor (javaElement, true);
        authorMap.put (type, visitor.firstAuthor.trim ());
    }
    return scanner;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/LineManger.java" startline="369" endline="390">
public String getPieceOfCode (IJavaElement element, int offset) {
    IType type = JavaElementUtil.getTypeFor (element, false);
    ICompilationUnit unit = type.getCompilationUnit ();
    int [] lineEnds = lineEndsMap.get (unit);
    char [] chars = contentsMap.get (unit);
    if (lineEnds != null && chars != null) {
        for (int i = 0;
        i < lineEnds.length - 1; i ++) {
            int start = lineEnds [i];
            int end = lineEnds [i + 1];
            if (start < offset && offset < end) {
                try {
                    return String.valueOf (chars, start, end - start).trim ();
                } catch (Exception e) {
                    Log.error ("Can't get piece of code for element: " + JavaElementUtil.getElementName (element) + ", offset: " + offset, e);
                }
            }
        }
    }
    return "";
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/LineManger.java" startline="414" endline="434">
private static void addIgnoreLineForToken (Set < Integer > ignoreLines, IScanner scanner, String tag, int nextToken, int tokenType) {
    if (nextToken == tokenType) {
        char [] currentTokenSource = scanner.getCurrentTokenSource ();
        String source = new String (currentTokenSource);
        if (source.contains (tag)) {
            int start = scanner.getCurrentTokenStartPosition ();
            int line = scanner.getLineNumber (start);
            ignoreLines.add (Integer.valueOf (line));
        }
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/LineManger.java" startline="444" endline="447">
ScannerTimestamp (IScanner scanner, long timeStamp) {
    this.scanner = scanner;
    this.timeStamp = timeStamp;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/UCDProgressMonitor.java" startline="34" endline="36">
public boolean isFinished () {
    return isFinished;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/UCDProgressMonitor.java" startline="38" endline="40">
public UCDProgressMonitor (IProgressMonitor delegate) {
    this.delegate = delegate;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/UCDProgressMonitor.java" startline="42" endline="44">
public UCDProgressMonitor () {
    this (new NullProgressMonitor ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/UCDProgressMonitor.java" startline="46" endline="50">
public void beginTask (String name, int totalWork) {
    Log.info ("Task.beginTask '" + name + "'");
    this.taskName = name;
    delegate.beginTask (taskName, totalWork);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/UCDProgressMonitor.java" startline="52" endline="56">
public void done () {
    Log.info ("Task.done '" + taskName + "'");
    delegate.done ();
    isFinished = true;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/UCDProgressMonitor.java" startline="58" endline="65">
public void internalWorked (double work) {
    String sWork = FORMAT_DOUBLE.format (work);
    if (UCDetectorPlugin.isHeadlessMode () && ! sWork.equals (lastWork)) {
        Log.info ("Task.internalWorked " + sWork);
    }
    lastWork = sWork;
    delegate.internalWorked (work);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/UCDProgressMonitor.java" startline="67" endline="69">
public boolean isCanceled () {
    return delegate.isCanceled ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/UCDProgressMonitor.java" startline="71" endline="75">
protected void throwIfIsCanceled () {
    if (isCanceled ()) {
        throw new OperationCanceledException ();
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/UCDProgressMonitor.java" startline="77" endline="80">
public void setCanceled (boolean value) {
    Log.warn ("Task.setCanceled: " + value);
    delegate.setCanceled (value);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/UCDProgressMonitor.java" startline="82" endline="86">
public void setTaskName (String name) {
    Log.info ("Task.setTaskName " + name);
    this.taskName = name;
    delegate.setTaskName (name);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/UCDProgressMonitor.java" startline="88" endline="96">
public void subTask (String name) {
    if (Log.isDebug ()) {
        Log.debug (name);
    } else if (UCDetectorPlugin.isHeadlessMode ()) {
        Log.info (name);
    }

    delegate.subTask (name);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/UCDProgressMonitor.java" startline="98" endline="102">
public void worked (int work) {
    delegate.worked (work);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/UCDProgressMonitor.java" startline="104" endline="106">
public void setActiveSearchElement (IMember activeSearchElement) {
    this.activeSearchElement = activeSearchElement;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/UCDProgressMonitor.java" startline="108" endline="110">
public IMember getActiveSearchElement () {
    return activeSearchElement;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/CountSearchRequestor.java" startline="24" endline="29">
public void acceptSearchMatch (SearchMatch match) {
    if (match.getElement () instanceof IJavaElement) {
        this.found ++;
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/CountSearchRequestor.java" startline="32" endline="34">
public String toString () {
    return "found: " + found;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/CountSearchRequestor.java" startline="36" endline="38">
public boolean isFound () {
    return found > 0;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/CountSearchRequestor.java" startline="40" endline="42">
public int getFoundCount () {
    return found;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/VisibilityHandler.java" startline="36" endline="38">
private Visibility (int value) {
    this.value = value;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/VisibilityHandler.java" startline="47" endline="51">
VisibilityHandler (MarkerFactory markerFactory, IMember startElement) throws JavaModelException {
    this.markerFactory = markerFactory;
    this.startElement = startElement;
    visibilityStart = calculateVisibilityStart (startElement);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/VisibilityHandler.java" startline="53" endline="58">
private static Visibility calculateVisibilityStart (IMember startElementInput) throws JavaModelException {
    Visibility vRootType = getVisibiliyRootType (startElementInput);
    Visibility vStart = getVisibility (startElementInput);
    return vRootType.value < vStart.value ? vRootType : vStart;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/VisibilityHandler.java" startline="60" endline="72">
private static Visibility getVisibility (IMember element) throws JavaModelException {
    int flags = element.getFlags ();
    if (Flags.isPublic (flags)) {
        return Visibility.PUBLIC;
    }
    if (Flags.isProtected (flags)) {
        return Visibility.PROTECTED;
    }
    if (Flags.isPackageDefault (flags)) {
        return Visibility.DEFAULT;
    }
    return Visibility.PRIVATE;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/VisibilityHandler.java" startline="74" endline="77">
private static Visibility getVisibiliyRootType (IMember element) throws JavaModelException {
    IType rootType = JavaElementUtil.getRootTypeFor (element);
    return rootType == null ? Visibility.PUBLIC : getVisibility (rootType);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/VisibilityHandler.java" startline="85" endline="110">
void checkVisibility (IJavaElement foundElement) {
    if (! Prefs.isVisibilityCheck (startElement)) {
        return;
    }
    IType startRootType = JavaElementUtil.getRootTypeFor (startElement);
    IType foundRootType = JavaElementUtil.getRootTypeFor (foundElement);
    if (startRootType == null || foundRootType == null) {
        setMaxVisibilityFound (Visibility.PUBLIC);
        return;
    }
    if (startRootType.equals (foundRootType)) {
        setMaxVisibilityFound (Prefs.isIgnoreSyntheticAccessEmulationWarning () ? Visibility.PRIVATE : Visibility.PROTECTED);
        return;
    }
    IPackageFragment startPackage = JavaElementUtil.getPackageFor (startElement);
    IPackageFragment foundPackage = JavaElementUtil.getPackageFor (foundElement);
    if (startPackage.getElementName ().equals (foundPackage.getElementName ())) {
        setMaxVisibilityFound (Visibility.PROTECTED);
        return;
    }
    setMaxVisibilityFound (Visibility.PUBLIC);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/VisibilityHandler.java" startline="116" endline="189">
boolean createMarker (int line, int found) throws CoreException {
    if (! needVisibilityMarker (startElement, found)) {
        return false;
    }
    if (startElement instanceof IField) {
        IField field = (IField) startElement;
        if (field.isEnumConstant ()) {
            return false;
        }
        if (JavaElementUtil.isInterfaceField (field)) {
            return false;
        }
    } else if (startElement instanceof IMethod) {
        IMethod method = (IMethod) startElement;
        if (method.isMainMethod ()) {
            return false;
        }
        if (JavaElementUtil.isInterfaceMethod (method)) {
            return false;
        }
        if (Flags.isAbstract (method.getFlags ())) {
            return false;
        }
    } else if (startElement instanceof IType) {
        IType type = (IType) startElement;
        if (type.isLocal () || type.isAnonymous ()) {
            return false;
        }
        if (JavaElementUtil.isPrimary (type)) {
            if (visibilityMaxFound == Visibility.PRIVATE || visibilityMaxFound == Visibility.PROTECTED) {
                visibilityMaxFound = Visibility.DEFAULT;
            }
        }
        if (hasPublicChild ((IType) startElement)) {
        }
    }

    if (startElement instanceof IField || startElement instanceof IMethod) {
        if (visibilityMaxFound == Visibility.PRIVATE) {
            IType type = JavaElementUtil.getTypeFor (startElement, false);
            if (type != null && type.isEnum ()) {
                return false;
            }
        }
    }
    String markerType;
    switch (visibilityMaxFound) {
        case PRIVATE :
            markerType = MarkerFactory.UCD_MARKER_TYPE_USE_PRIVATE;
            break;
        case DEFAULT :
            markerType = MarkerFactory.UCD_MARKER_TYPE_USE_DEFAULT;
            break;
        case PROTECTED :
            markerType = MarkerFactory.UCD_MARKER_TYPE_USE_DEFAULT;
            break;
        default :
            return false;
    }
    return markerFactory.createVisibilityMarker (startElement, markerType, line);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/VisibilityHandler.java" startline="191" endline="200">
private static boolean hasPublicChild (IType type) throws JavaModelException {
    for (IJavaElement element : type.getChildren ()) {
        if (element instanceof IMember) {
            if (Flags.isPublic (((IMember) element).getFlags ())) {
                return true;
            }
        }
    }
    return false;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/VisibilityHandler.java" startline="210" endline="214">
private void setMaxVisibilityFound (Visibility visibility) {
    if (visibility.value > visibilityMaxFound.value) {
        visibilityMaxFound = visibility;
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/VisibilityHandler.java" startline="220" endline="238">
private boolean needVisibilityMarker (IMember member, int found) {
    if (found == 0) {
        return false;
    }
    if (visibilityMaxFound.value >= visibilityStart.value) {
        return false;
    }
    switch (visibilityMaxFound) {
        case PUBLIC :
            return false;
        case PROTECTED :
        case DEFAULT :
            return Prefs.isVisibilityProtectedCheck (member);
        case PRIVATE :
            return Prefs.isVisibilityPrivateCheck (member);
        default :
            return false;
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/VisibilityHandler.java" startline="240" endline="242">
boolean isMaxVisibilityFoundPublic () {
    return visibilityMaxFound == Visibility.PUBLIC;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/search/VisibilityHandler.java" startline="245" endline="248">
public String toString () {
    return String.format ("%s [visibilityStart=%s, visibilityMaxFound=%s]", getClass ().getSimpleName (), visibilityStart, visibilityMaxFound);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/action/AbstractUCDetectorAction.java" startline="50" endline="95">
public void runWithEvent (IAction action, Event event) {
    final AbstractUCDetectorIterator iterator = createIterator ();
    if (iterator == null) {
        return;
    }
    final Job job = new Job (iterator.getJobName ()) {
        @Override
        public IStatus run (IProgressMonitor monitor) {
            UCDProgressMonitor ucdMonitor = new UCDProgressMonitor (monitor);
            iterator.setMonitor (ucdMonitor);
            try {
                iterator.iterate (getSelections ());
                if (iterator.getElelementsToDetectCount () == 0) {
                    showNothingToDetectMessage ();
                }
            } catch (CoreException e) {
                UCDetectorPlugin.logToEclipseLog (e.getStatus ());
            } catch (Throwable e) {
                UCDetectorPlugin.logToEclipseLog (Messages.AbstractUCDetectorAction_AnalyzeFailedText, e);
            }
            IStatus status = null;
            try {
                status = postIteration ();
            } finally {
                ucdMonitor.done ();
            }
            return status != null ? status : ucdMonitor.isCanceled () ? Status.CANCEL_STATUS : Status.OK_STATUS;
        } private void showNothingToDetectMessage () {
            Display.getDefault ().asyncExec (new Runnable () {
                public void run () {
                    MessageDialog.openWarning (UCDetectorPlugin.getShell (), Messages.AbstractUCDetectorIterator_NothingToDetectTitle, Messages.AbstractUCDetectorIterator_NothingToDetect);
                }}

            );
        }}

    ;
    setJobProperty (job);
    job.schedule ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/action/AbstractUCDetectorAction.java" startline="57" endline="81">
public IStatus run (IProgressMonitor monitor) {
    UCDProgressMonitor ucdMonitor = new UCDProgressMonitor (monitor);
    iterator.setMonitor (ucdMonitor);
    try {
        iterator.iterate (getSelections ());
        if (iterator.getElelementsToDetectCount () == 0) {
            showNothingToDetectMessage ();
        }
    } catch (CoreException e) {
        UCDetectorPlugin.logToEclipseLog (e.getStatus ());
    } catch (Throwable e) {
        UCDetectorPlugin.logToEclipseLog (Messages.AbstractUCDetectorAction_AnalyzeFailedText, e);
    }
    IStatus status = null;
    try {
        status = postIteration ();
    } finally {
        ucdMonitor.done ();
    }
    return status != null ? status : ucdMonitor.isCanceled () ? Status.CANCEL_STATUS : Status.OK_STATUS;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/action/AbstractUCDetectorAction.java" startline="83" endline="91">
private void showNothingToDetectMessage () {
    Display.getDefault ().asyncExec (new Runnable () {
        public void run () {
            MessageDialog.openWarning (UCDetectorPlugin.getShell (), Messages.AbstractUCDetectorIterator_NothingToDetectTitle, Messages.AbstractUCDetectorIterator_NothingToDetect);
        }}

    );
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/action/AbstractUCDetectorAction.java" startline="85" endline="89">
public void run () {
    MessageDialog.openWarning (UCDetectorPlugin.getShell (), Messages.AbstractUCDetectorIterator_NothingToDetectTitle, Messages.AbstractUCDetectorIterator_NothingToDetect);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/action/AbstractUCDetectorAction.java" startline="98" endline="102">
protected void setJobProperty (Job job) {
    ImageDescriptor ucdIcon = UCDetectorPlugin.getImageDescriptor (UCDetectorPlugin.IMAGE_UCD);
    job.setProperty (IProgressConstants.ICON_PROPERTY, ucdIcon);
    job.setProperty (IProgressConstants.KEEP_PROPERTY, Boolean.TRUE);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/action/AbstractUCDetectorAction.java" startline="108" endline="110">
protected IStatus postIteration () {
    return null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/action/AbstractUCDetectorAction.java" startline="114" endline="121">
public void selectionChanged (IAction action, ISelection selection) {
    if (action != null) {
        getSelectedJavaElements (selection);
        PlatformUI.getWorkbench ().getHelpSystem ().setHelp (action, UCDetectorPlugin.HELP_ID);
        handleJavaElementSelections (action);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/action/AbstractUCDetectorAction.java" startline="123" endline="142">
private void getSelectedJavaElements (ISelection selection) {
    selections.clear ();
    if (selection instanceof IStructuredSelection) {
        List < ? > structered = ((IStructuredSelection) selection).toList ();
        for (Object selectedObject : structered) {
            if (selectedObject instanceof IJavaElement) {
                selections.add (selectedObject);
            } else if (selectedObject instanceof IWorkingSet) {
                IAdaptable [] workingSetProjects = ((IWorkingSet) selectedObject).getElements ();
                for (IAdaptable workingSetProject : workingSetProjects) {
                    if (workingSetProject instanceof IProject) {
                        selections.add (workingSetProject);
                    }
                }
            }

        }
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/action/AbstractUCDetectorAction.java" startline="145" endline="147">
protected void handleJavaElementSelections (IAction action) {
    action.setEnabled (true);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/action/AbstractUCDetectorAction.java" startline="151" endline="166">
protected IJavaElement [] getSelections () {
    List < IJavaElement > result = new ArrayList < IJavaElement > ();
    for (Object selection : selections) {
        if (selection instanceof IJavaElement) {
            result.add ((IJavaElement) selection);
        } else if (selection instanceof IProject) {
            IProject project = (IProject) selection;
            IJavaProject javaProject = JavaCore.create (project);
            if (javaProject.exists ()) {
                result.add (javaProject);
            }
        }

    }
    return result.toArray (new IJavaElement [result.size ()]);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/action/CleanMarkersAction.java" startline="23" endline="25">
protected AbstractUCDetectorIterator createIterator () {
    return new CleanMarkersIterator ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/action/CleanMarkersAction.java" startline="28" endline="30">
protected IStatus postIteration () {
    return null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/action/CountAction.java" startline="30" endline="33">
protected AbstractUCDetectorIterator createIterator () {
    iterator = new CountIterator ();
    return iterator;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/action/CountAction.java" startline="36" endline="47">
protected IStatus postIteration () {
    final IStatus status = new Status (IStatus.INFO, UCDetectorPlugin.ID, IStatus.INFO, iterator.toString (), null);
    UCDetectorPlugin.logToEclipseLog (status);
    Display.getDefault ().asyncExec (new Runnable () {
        public void run () {
            Shell shell = UCDetectorPlugin.getShell ();
            MessageDialog.openInformation (shell, Messages.CountAction_ResultTitle, iterator.toString ());
        }}

    );
    return status;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/action/CountAction.java" startline="41" endline="44">
public void run () {
    Shell shell = UCDetectorPlugin.getShell ();
    MessageDialog.openInformation (shell, Messages.CountAction_ResultTitle, iterator.toString ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/action/UCDetectorAction.java" startline="40" endline="43">
protected AbstractUCDetectorIterator createIterator () {
    iterator = new UCDetectorIterator ();
    return iterator;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/action/UCDetectorAction.java" startline="46" endline="50">
protected void setJobProperty (Job job) {
    super.setJobProperty (job);
    IAction openEditor = new OpenInEditorAction ();
    job.setProperty (IProgressConstants.ACTION_PROPERTY, openEditor);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/action/UCDetectorAction.java" startline="57" endline="77">
public void run () {
    String objectToShow = null;
    try {
        UCDProgressMonitor monitor = iterator.getMonitor ();
        if (monitor.isFinished ()) {
            objectToShow = IPageLayout.ID_PROBLEM_VIEW;
            UCDetectorPlugin.getActivePage ().showView (IPageLayout.ID_PROBLEM_VIEW);
            return;
        }
        IJavaElement element = monitor.getActiveSearchElement ();
        if (element != null) {
            objectToShow = JavaElementUtil.getElementName (element);
            IEditorPart part = JavaUI.openInEditor (element, true, false);
            JavaUI.revealInEditor (part, element);
        }
    } catch (Exception ex) {
        Log.error ("Can't open view for object: " + objectToShow, ex);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/action/UCDetectorAction.java" startline="81" endline="93">
protected IStatus postIteration () {
    int created = iterator.getMarkerCreated ();
    StringBuilder mes = new StringBuilder ();
    mes.append (NLS.bind (Messages.UCDetectorAction_ResultMessage, String.valueOf (created)));
    String reportFolder = ReportNameManager.getReportDir (false);
    if (reportFolder != null && created > 0) {
        mes.append (". ");
        String s = NLS.bind (Messages.UCDetectorAction_ResultReport, reportFolder);
        mes.append (s);
    }
    return new Status (IStatus.INFO, UCDetectorPlugin.ID, mes.toString ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorConsole.java" startline="39" endline="41">
public UCDetectorConsole (String name, ImageDescriptor imageDescriptor, boolean autoLifecycle) {
    super (name, imageDescriptor, autoLifecycle);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorConsole.java" startline="43" endline="53">
public static void log (boolean isWarn, String formattedMessage, Throwable ex) {
    PrintStream stream = isWarn ? consoleStreamWarn : consoleStreamInfo;
    if (stream != null) {
        if (formattedMessage != null) {
            stream.println (formattedMessage);
        }
        if (ex != null) {
            ex.printStackTrace (stream);
        }
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorConsole.java" startline="57" endline="86">
public void openConsole () {
    IConsoleManager consoleManager = ConsolePlugin.getDefault ().getConsoleManager ();
    boolean exists = false;
    if (console == null) {
        console = new UCDetectorConsole ("UCDetector Console", null, true);
        MessageConsoleStream infoStream = console.newMessageStream ();
        infoStream.setColor (Display.getDefault ().getSystemColor (SWT.COLOR_BLACK));
        try {
            consoleStreamInfo = new PrintStream (infoStream, true, UCDetectorPlugin.UTF_8);
            MessageConsoleStream warnStream = infoStream;
            warnStream.setColor (Display.getDefault ().getSystemColor (SWT.COLOR_RED));
            consoleStreamWarn = new PrintStream (warnStream, true, UCDetectorPlugin.UTF_8);
        } catch (UnsupportedEncodingException ex) {
            UCDetectorPlugin.logToEclipseLog ("Can't set encoding", ex);
        }
    } else {
        IConsole [] existingConsoles = consoleManager.getConsoles ();
        for (IConsole existingConsole : existingConsoles) {
            if (console == existingConsole) {
                exists = true;
            }
        }
    }
    if (! exists) {
        consoleManager.addConsoles (new IConsole [] {console});
    }
    consoleManager.showConsoleView (console);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorConsole.java" startline="91" endline="99">
public void init (IPageBookViewPage page, IConsole unused) {
    Action removeAction = new RemoveAction ();
    removeAction.setText ("Close UCDetector console");
    SearchPluginImages.setImageDescriptors (removeAction, SearchPluginImages.T_LCL, SearchPluginImages.IMG_LCL_SEARCH_REM);
    IActionBars bars = page.getSite ().getActionBars ();
    bars.getToolBarManager ().appendToGroup (IConsoleConstants.LAUNCH_GROUP, removeAction);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorConsole.java" startline="102" endline="104">
public Object getAdapter (Class adapter) {
    return null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorConsole.java" startline="106" endline="108">
public void dispose () {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorConsole.java" startline="110" endline="112">
public void activated () {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorConsole.java" startline="114" endline="116">
public void deactivated () {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorConsole.java" startline="122" endline="128">
public void run () {
    IConsoleManager manager = ConsolePlugin.getDefault ().getConsoleManager ();
    if (console != null) {
        manager.removeConsoles (new IConsole [] {console});
        console = null;
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDHeadless.java" startline="72" endline="91">
public UCDHeadless (String optionsFileName) throws FileNotFoundException {
    Log.info ("Options file name: %s", optionsFileName);
    this.workspace = ResourcesPlugin.getWorkspace ();
    File optionsFile = getFile (optionsFileName, UCDETECTOR_OPTIONS);
    Map < String, String > options = loadOptions (optionsFile);
    this.targetPlatformFile = getFile (options.get (HEADLESS_KEY_TARGET), null);
    String sBuildType = options.get (HEADLESS_KEY + "buildType");
    this.buildType = parseBuildType (sBuildType);
    this.report = parseReport (options.get (HEADLESS_KEY + "report"));
    this.resourcesToIterate = getResourcesToIterate (options);
    String iterateInfo = resourcesToIterate.isEmpty () ? "ALL" : resourcesToIterate.size () + " elements: " + resourcesToIterate;
    Log.info ("----------------------------------------------------------------------");
    logExists (optionsFile);
    logExists (targetPlatformFile);
    Log.info ("    iterate           : " + iterateInfo);
    Log.info ("    buildType         : " + (sBuildType == null ? INCREMENTAL_BUILD : sBuildType));
    Log.info ("    report            : " + report);
    Log.info ("----------------------------------------------------------------------");
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDHeadless.java" startline="93" endline="105">
private static File getFile (String fileName, String defaultFileName) throws FileNotFoundException {
    if (fileName == null || fileName.trim ().length () == 0) {
        return defaultFileName == null ? null : new File (defaultFileName);
    }
    String resultName = fileName;
    resultName = resultName.replace ("${WORKSPACE}", UCDetectorPlugin.getAboutWorkspace ());
    resultName = resultName.replace ("${ECLIPSE_HOME}", UCDetectorPlugin.getAboutEclipseHome ());
    File resultFile = new File (UCDetectorPlugin.getCanonicalPath (resultName));
    if (! resultFile.exists ()) {
        throw new FileNotFoundException ("Missing file: " + resultFile.getAbsolutePath ());
    }
    return resultFile;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDHeadless.java" startline="107" endline="128">
public void iterate () throws CoreException {
    long start = System.currentTimeMillis ();
    try {
        Log.info ("Starting UCDetector Headless");
        tryToStartDsPlugin ();
        new TargetPlatformLoader ().loadTargetPlatform (ucdMonitor, targetPlatformFile);
        IWorkspaceRoot workspaceRoot = workspace.getRoot ();
        List < IJavaProject > allProjects = createProjects (ucdMonitor, workspaceRoot);
        prepareWorkspace ();
        List < IJavaElement > javaElementsToIterate = getJavaElementsToIterate (workspaceRoot, allProjects);
        iterateImpl (javaElementsToIterate);
        postIterate (javaElementsToIterate);
    } catch (OperationCanceledException e) {
        Log.info ("UCDetector Headless canceled: " + e);
    } finally {
        closeWorkspace ();
        Log.info ("Time to run UCDetector Headless: " + StopWatch.timeAsString (System.currentTimeMillis () - start));
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDHeadless.java" startline="130" endline="143">
private static List < String > getResourcesToIterate (Map < String, String > options) {
    List < String > result = new ArrayList < String > ();
    String resourcesToIterateString = options.get (HEADLESS_KEY + "resourcesToIterate");
    if (resourcesToIterateString != null) {
        String [] resourcesList = resourcesToIterateString.split (",");
        for (String resourceName : resourcesList) {
            resourceName = resourceName.trim ();
            if (resourceName.length () > 0) {
                result.add (resourceName);
            }
        }
    }
    return result;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDHeadless.java" startline="145" endline="150">
private static void logExists (File file) {
    if (file != null) {
        Log.info ("To change detection   : %-6s %s", file.exists () ? "edit" : "create", UCDetectorPlugin.getCanonicalPath (file));
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDHeadless.java" startline="152" endline="163">
static Map < String, String > loadOptions (File optionFile) {
    Map < String, String > ucdOptions = Collections.emptyMap ();
    Log.info ("   optionFile: %s exists: %s", UCDetectorPlugin.getCanonicalPath (optionFile), "" + optionFile.exists ());
    if (optionFile.exists ()) {
        ucdOptions = ModesReader.loadModeFile (true, optionFile.getAbsolutePath ());
        for (Entry < String, String > option : ucdOptions.entrySet ()) {
            Prefs.setValue (option.getKey (), option.getValue ());
        }
        Log.info (UCDetectorPlugin.getPreferencesAsString ().replace (", ", "\n\t"));
    }
    return ucdOptions;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDHeadless.java" startline="165" endline="178">
private void closeWorkspace () {
    StopWatch stopWatch = new StopWatch ();
    try {
        workspace.save (true, new UCDProgressMonitor ());
    } catch (Exception ex) {
        Log.error ("Can't close workspace", ex);
    }
    Log.info (stopWatch.end ("Time to close workspace"));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDHeadless.java" startline="181" endline="189">
private static void tryToStartDsPlugin () {
    try {
        Bundle fwAdminBundle = Platform.getBundle ("org.eclipse.equinox.ds");
        fwAdminBundle.start ();
    } catch (Exception e) {
        Log.error ("PROBLEMS STARTING DS", e);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDHeadless.java" startline="191" endline="209">
private void prepareWorkspace () throws CoreException {
    StopWatch stopWatch = new StopWatch ();
    IWorkspaceRoot workspaceRoot = workspace.getRoot ();
    Log.info (stopWatch.end ("createProjects", false));
    IProject [] projects = workspaceRoot.getProjects ();
    Log.info ("\tprojects found in workspace: " + projects.length);
    Log.info ("\tWorkspace: " + workspaceRoot.getLocation ());
    Log.info ("Refresh workspace... Please wait...!");
    workspaceRoot.refreshLocal (IResource.DEPTH_INFINITE, ucdMonitor);
    Log.info (stopWatch.end ("Refresh workspace", false));
    Log.info ("Build workspace... Please wait...!");
    workspace.build (buildType, ucdMonitor);
    Log.info (stopWatch.end ("Build workspace", false));
    if (projects.length == 0) {
        Log.warn ("NO PROJECTS FOUND - NOTHING TODO");
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDHeadless.java" startline="211" endline="224">
private void iterateImpl (List < IJavaElement > javaElementsToIterate) throws CoreException {
    if (report == null || Report.eachproject == report) {
        for (IJavaElement javaElement : javaElementsToIterate) {
            AbstractUCDetectorIterator iterator = new UCDetectorIterator ();
            iterator.setMonitor (ucdMonitor);
            iterator.iterate (new IJavaElement [] {javaElement});
        }
    } else {
        AbstractUCDetectorIterator iterator = new UCDetectorIterator ();
        iterator.setMonitor (ucdMonitor);
        iterator.iterate (javaElementsToIterate);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDHeadless.java" startline="226" endline="234">
private void postIterate (List < IJavaElement > javaElementsToIterate) throws CoreException {
    List < AbstractUCDetectorIterator > postIterators = HeadlessExtension.getPostIterators ();
    for (AbstractUCDetectorIterator postIterator : postIterators) {
        Log.info ("Run Post iterator: %s, for: %s", postIterator.getJobName (), JavaElementUtil.getElementNames (javaElementsToIterate));
        postIterator.setMonitor (ucdMonitor);
        postIterator.iterate (javaElementsToIterate);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDHeadless.java" startline="236" endline="276">
private List < IJavaElement > getJavaElementsToIterate (IWorkspaceRoot workspaceRoot, List < IJavaProject > allProjects) {
    List < IJavaElement > javaElementsToIterate = new ArrayList < IJavaElement > ();
    if (resourcesToIterate == null || resourcesToIterate.isEmpty ()) {
        javaElementsToIterate.addAll (allProjects);
    } else {
        for (String resourceToIterate : resourcesToIterate) {
            Log.info ("resourceToIterate: " + resourceToIterate);
            try {
                Path path = new Path (resourceToIterate);
                IJavaElement javaElement;
                if (path.segmentCount () == 1) {
                    IProject project = workspaceRoot.getProject (resourceToIterate);
                    javaElement = JavaCore.create (project);
                    Log.info ("resource=%s, javaProject=%s", resourceToIterate, javaElement.getElementName ());
                } else {
                    IFolder folder = workspaceRoot.getFolder (path);
                    javaElement = JavaCore.create (folder);
                    Log.info ("resource=%s, folder=%s, javaElement=%s", resourceToIterate, folder, JavaElementUtil.getElementName (javaElement));
                }
                if (javaElement == null || ! javaElement.exists ()) {
                    Log.warn ("Ignore resource: '%s'. Possible reasons: It is not a java element, it does not exists", resourceToIterate);
                    continue;
                }
                javaElementsToIterate.add (javaElement);
            } catch (Exception ex) {
                Log.warn ("Ignore resource: '%s' because %s", resourceToIterate, ex);
            }
        }
    }
    Log.info ("There are %s java elements to iterate", String.valueOf (javaElementsToIterate.size ()));
    for (IJavaElement javaElement : javaElementsToIterate) {
        Log.info ("    " + JavaElementUtil.getElementName (javaElement));
    }
    return javaElementsToIterate;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDHeadless.java" startline="278" endline="309">
private static List < IJavaProject > createProjects (IProgressMonitor monitor, IWorkspaceRoot workspaceRoot) throws CoreException {
    List < IJavaProject > projects = new ArrayList < IJavaProject > ();
    File rootDir = workspaceRoot.getLocation ().toFile ();
    File [] rootFiles = rootDir.listFiles ();
    for (File rootFile : rootFiles) {
        File dotProject = new File (rootFile, ".project");
        if (! dotProject.exists ()) {
            continue;
        }
        IProject project = workspaceRoot.getProject (rootFile.getName ());
        if (! project.exists ()) {
            Log.info ("\tCreate project for: " + rootFile.getAbsolutePath ());
            project.create (monitor);
        }
        project.open (monitor);
        IJavaProject javaProject = JavaCore.create (project);
        if (javaProject.exists ()) {
            projects.add (javaProject);
            Log.info ("Project created: " + javaProject.getElementName ());
        } else {
            Log.warn ("Ignore project '%s'. Maybe it is not a java project!", javaProject.getElementName ());
        }
    }
    return projects;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDHeadless.java" startline="311" endline="322">
private static Report parseReport (String reportString) {
    if (reportString == null || reportString.length () == 0) {
        return Report.eachproject;
    }
    for (Report rep : Report.values ()) {
        if (rep.name ().equals (reportString)) {
            return rep;
        }
    }
    Log.warn ("Unknown report: '%s'. Using: %s", reportString, Report.eachproject);
    return Report.eachproject;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDHeadless.java" startline="325" endline="328">
private static int parseBuildType (String buildType) {
    return "FULL_BUILD".equals (buildType) ? IncrementalProjectBuilder.FULL_BUILD : IncrementalProjectBuilder.INCREMENTAL_BUILD;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/Compatibility.java" startline="32" endline="34">
public static boolean isEclipse37OrNewer () {
    return ECLIPSE_USED.compareTo (ECLIPSE_3_7) >= 0;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorPlugin.java" startline="97" endline="99">
public UCDetectorPlugin () {
    plugin = this;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorPlugin.java" startline="101" endline="118">
private static void dumpInformation () {
    Log.info (SEPARATOR);
    Log.info ("Starting UCDetector Plug-In version " + getAboutUCDVersion ());
    Log.info (SEPARATOR);
    Log.info ("Time            : " + getNow ());
    Log.info ("OS              : " + getAboutOS ());
    Log.info ("Java            : " + getAboutJavaVersion ());
    Log.info ("Eclipse version : " + getAboutEclipseVersion ());
    Log.info ("Eclipse home    : " + getAboutEclipseHome ());
    Log.info ("Eclipse product : " + getAboutEclipseProduct ());
    Log.info ("Workspace       : " + getAboutWorkspace ());
    Log.info ("Logfile         : " + getAboutLogfile ());
    Log.info ("Log level       : " + Log.getActiveLogLevel ().toString ());
    Log.info ("Modes Dir       : " + getModesDir ().getAbsolutePath ());
    Log.info (getPreferencesAsString ());
    logMemoryInfo ();
    Log.info (SEPARATOR);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorPlugin.java" startline="120" endline="129">
public static void logMemoryInfo () {
    long used = (Runtime.getRuntime ().totalMemory () - Runtime.getRuntime ().freeMemory ()) / MEGA_BYTE;
    long max = Runtime.getRuntime ().maxMemory () / MEGA_BYTE;
    long percentUsed = (100 * used) / max;
    String message = String.format ("Memory: %s MB max, %s MB used (%s %%)", String.valueOf (max), String.valueOf (used), String.valueOf (percentUsed));
    Log.log (percentUsed > 80 ? LogLevel.WARN : LogLevel.INFO, message);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorPlugin.java" startline="132" endline="136">
public void start (BundleContext context) throws Exception {
    super.start (context);
    dumpInformation ();
    addPropertyChangeListener ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorPlugin.java" startline="138" endline="158">
private void addPropertyChangeListener () {
    getPreferenceStore ().addPropertyChangeListener (new IPropertyChangeListener () {
        public void propertyChange (PropertyChangeEvent event) {
            String property = event.getProperty ();
            String newValue = event.getNewValue ().toString ();
            if (property.equals (Prefs.LOG_LEVEL)) {
                LogLevel newLogLevel = LogLevel.valueOf (newValue);
                Log.setActiveLogLevel (newLogLevel);
                if (newLogLevel.ordinal () > LogLevel.INFO.ordinal ()) {
                    System.out.println ("UCDetector Log level: " + newLogLevel);
                } else {
                    Log.info ("UCDetector Log level: " + newLogLevel);
                }
            } else if (property.equals (Prefs.LOG_TO_ECLIPSE)) {
                Log.setLogToEclipse (Boolean.parseBoolean (newValue));
            }

        }}

    );
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorPlugin.java" startline="140" endline="156">
public void propertyChange (PropertyChangeEvent event) {
    String property = event.getProperty ();
    String newValue = event.getNewValue ().toString ();
    if (property.equals (Prefs.LOG_LEVEL)) {
        LogLevel newLogLevel = LogLevel.valueOf (newValue);
        Log.setActiveLogLevel (newLogLevel);
        if (newLogLevel.ordinal () > LogLevel.INFO.ordinal ()) {
            System.out.println ("UCDetector Log level: " + newLogLevel);
        } else {
            Log.info ("UCDetector Log level: " + newLogLevel);
        }
    } else if (property.equals (Prefs.LOG_TO_ECLIPSE)) {
        Log.setLogToEclipse (Boolean.parseBoolean (newValue));
    }

}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorPlugin.java" startline="161" endline="171">
public static String getPreferencesAsString () {
    StringBuilder sb = new StringBuilder ();
    Map < String, String > deltaPreferences = getDeltaPreferences ();
    sb.append (String.format ("%s UCDetector preferences are different from default preferences:", "" + deltaPreferences.size ()));
    Set < Entry < String, String > > entrySet = deltaPreferences.entrySet ();
    for (Entry < String, String > entry : entrySet) {
        sb.append (String.format ("%n       %s=%s", entry.getKey (), entry.getValue ()));
    }
    return sb.toString ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorPlugin.java" startline="174" endline="185">
public static Map < String, String > getDeltaPreferences () {
    IEclipsePreferences node = new InstanceScope ().getNode (ID);
    Map < String, String > allDeltas = getPreferencesImpl (node);
    Set < String > keySetClone = new HashSet < String > (allDeltas.keySet ());
    for (String key : keySetClone) {
        if (key.startsWith (Prefs.INTERNAL)) {
            allDeltas.remove (key);
        }
    }
    return allDeltas;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorPlugin.java" startline="188" endline="192">
public static Map < String, String > getAllPreferences () {
    IEclipsePreferences node = new DefaultScope ().getNode (ID);
    return getPreferencesImpl (node);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorPlugin.java" startline="194" endline="208">
private static Map < String, String > getPreferencesImpl (IEclipsePreferences ePrefs) {
    Map < String, String > result = new LinkedHashMap < String, String > ();
    try {
        String [] propertyNames = ePrefs.keys ();
        Arrays.sort (propertyNames);
        for (String propertyName : propertyNames) {
            result.put (propertyName, ePrefs.get (propertyName, null));
        }
    } catch (BackingStoreException ex) {
        result.put ("EXCEPTION", ex.getMessage ());
        Log.error ("Can't get preferences for " + ePrefs, ex);
    }
    return result;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorPlugin.java" startline="214" endline="218">
public void stop (BundleContext context) throws Exception {
    Log.info ("Stopping UCDetector Plug-In at " + getNow ());
    super.stop (context);
    plugin = null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorPlugin.java" startline="226" endline="229">
public static void handleOutOfMemoryError (OutOfMemoryError e) throws CoreException {
    Status status = logToEclipseLog (Messages.OutOfMemoryError_Hint, e);
    throw new CoreException (status);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorPlugin.java" startline="234" endline="236">
public static UCDetectorPlugin getDefault () {
    return plugin;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorPlugin.java" startline="242" endline="250">
protected void initializeImageRegistry (ImageRegistry registry) {
    super.initializeImageRegistry (registry);
    registry.put (IMAGE_UCD, createImage (ID, "icons/ucd.gif"));
    registry.put (IMAGE_CYCLE, createImage (ID, "icons/cycle.gif"));
    registry.put (IMAGE_FINAL, createImage (JavaUI.ID_PLUGIN, "icons/full/ovr16/final_co.gif"));
    registry.put (IMAGE_COMMENT, createImage (JavaUI.ID_PLUGIN, "icons/full/etool16/comment_edit.gif"));
    registry.put (IMAGE_TODO, createImage (IDEWorkbenchPlugin.IDE_WORKBENCH, "icons/full/elcl16/showtsk_tsk.gif"));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorPlugin.java" startline="252" endline="257">
private static ImageDescriptor createImage (String bundleName, String icon) {
    IPath path = new Path (icon);
    Bundle bundle = Platform.getBundle (bundleName);
    return JavaPluginImages.createImageDescriptor (bundle, path, true);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorPlugin.java" startline="259" endline="262">
public static final Image getSharedImage (String id) {
    ISharedImages sharedImages = PlatformUI.getWorkbench ().getSharedImages ();
    return sharedImages.getImage (id);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorPlugin.java" startline="264" endline="266">
public static Image getImage (String key) {
    return getDefault ().getImageRegistry ().get (key);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorPlugin.java" startline="268" endline="270">
public static ImageDescriptor getImageDescriptor (String key) {
    return getDefault ().getImageRegistry ().getDescriptor (key);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorPlugin.java" startline="272" endline="274">
public static String getNow () {
    return getDefault ().dateFormat.format (new Date ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorPlugin.java" startline="278" endline="281">
public static WorkbenchPage getActivePage () {
    IWorkbenchWindow window = getActiveWorkbenchWindow ();
    return window == null ? null : (WorkbenchPage) window.getActivePage ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorPlugin.java" startline="283" endline="285">
public static IWorkbenchWindow getActiveWorkbenchWindow () {
    return getDefault ().getWorkbench ().getWorkbenchWindows () [0];
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorPlugin.java" startline="287" endline="289">
public static Shell getShell () {
    return getActiveWorkbenchWindow ().getShell ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorPlugin.java" startline="291" endline="293">
protected static void setHeadlessMode (boolean isHeadlessMode) {
    UCDetectorPlugin.isHeadlessMode = isHeadlessMode;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorPlugin.java" startline="295" endline="297">
public static boolean isHeadlessMode () {
    return UCDetectorPlugin.isHeadlessMode;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorPlugin.java" startline="299" endline="308">
public static void closeSave (Closeable closable) {
    if (closable != null) {
        try {
            closable.close ();
        } catch (Exception e) {
            Log.warn ("Can't close %s: %s", closable, e);
        }
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorPlugin.java" startline="311" endline="313">
public static String getAboutOS () {
    return System.getProperty ("os.name") + " - " + System.getProperty ("os.version");
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorPlugin.java" startline="315" endline="317">
public static String getAboutJavaVersion () {
    return System.getProperty ("java.runtime.version");
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorPlugin.java" startline="319" endline="321">
public static String getAboutEclipseVersion () {
    return System.getProperty ("osgi.framework.version");
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorPlugin.java" startline="323" endline="326">
public static String getAboutUCDVersion () {
    Bundle bundle = getDefault ().getBundle ();
    return String.valueOf (bundle.getHeaders ().get ("Bundle-Version"));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorPlugin.java" startline="328" endline="334">
public static String getAboutEclipseHome () {
    String eclipseHome = System.getProperty ("osgi.install.area");
    if (eclipseHome != null && eclipseHome.startsWith ("file:")) {
        return eclipseHome.substring ("file:".length ());
    }
    return eclipseHome;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorPlugin.java" startline="336" endline="362">
public static String getAboutEclipseProduct () {
    IProduct product = Platform.getProduct ();
    if (product == null) {
        return WorkbenchMessages.AboutDialog_defaultProductName;
    }
    if (ProductProperties.getAboutText (product) != null) {
        String aboutText = ProductProperties.getAboutText (product);
        String [] aboutLines = aboutText.split ("\r\n|\r|\n");
        StringBuffer result = new StringBuffer ();
        int foundLines = 0;
        for (String aboutLine : aboutLines) {
            aboutLine = aboutLine.trim ();
            if (aboutLine.length () > 0) {
                foundLines ++;
                result.append (aboutLine);
                if (foundLines >= 3) {
                    return result.toString ();
                }
                result.append (", ");
            }
        }
    }
    return product.getName ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorPlugin.java" startline="364" endline="366">
public static String getAboutLogfile () {
    return System.getProperty ("osgi.logfile");
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorPlugin.java" startline="368" endline="371">
public static String getAboutWorkspace () {
    IPath location = ResourcesPlugin.getWorkspace ().getRoot ().getLocation ();
    return location == null ? System.getProperty ("osgi.instance.area") : location.toOSString ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorPlugin.java" startline="373" endline="380">
public static String getHostName () {
    try {
        return java.net.InetAddress.getLocalHost ().getHostName ();
    } catch (Exception e) {
        return "?";
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorPlugin.java" startline="382" endline="393">
public static String getCanonicalPath (File file) {
    if (file == null) {
        return null;
    }
    try {
        return file.getCanonicalPath ();
    } catch (IOException e) {
        Log.warn ("%s for getCanonicalPath(%s)", e, file);
        return file.getAbsolutePath ();
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorPlugin.java" startline="395" endline="406">
public static String readAll (Reader reader) throws IOException {
    final char [] buf = new char [2048];
    StringBuffer sb = new StringBuffer ();
    int size = 0;
    while (size != - 1) {
        size = reader.read (buf);
        if (size > 0) {
            sb.append (new String (buf, 0, size));
        }
    }
    return sb.toString ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorPlugin.java" startline="408" endline="410">
public static String getCanonicalPath (String fileName) {
    return (fileName == null) ? null : getCanonicalPath (new File (fileName));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorPlugin.java" startline="412" endline="420">
public static String exceptionToString (Throwable ex) {
    if (ex == null) {
        return null;
    }
    StringWriter writer = new StringWriter ();
    ex.printStackTrace (new PrintWriter (writer));
    return writer.toString ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorPlugin.java" startline="427" endline="437">
public static String toString (Map < ? extends Object, ? extends Object > map, String format) {
    if (map == null) {
        return String.valueOf (map);
    }
    String formatUsed = (format == null ? "\t%s = %s%n" : format);
    StringBuilder result = new StringBuilder ();
    for (Object key : map.keySet ()) {
        result.append (String.format (formatUsed, key, map.get (key)));
    }
    return result.toString ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorPlugin.java" startline="444" endline="454">
public static String toString (Collection < ? extends Object > collection, String separator) {
    if (collection == null) {
        return String.valueOf (collection);
    }
    StringBuilder result = new StringBuilder ();
    String separatorUsed = (separator == null ? "\n" : separator);
    for (Object object : collection) {
        result.append (result.length () == 0 ? "" : separatorUsed).append (object);
    }
    return result.toString ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorPlugin.java" startline="458" endline="461">
public static File getModesDir () {
    File ucdDir = getDefault ().getStateLocation ().toFile ();
    return new File (ucdDir, "modes");
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorPlugin.java" startline="465" endline="471">
public static void logToEclipseLog (IStatus status) {
    UCDetectorPlugin ucd = getDefault ();
    if (ucd != null && ucd.getLog () != null) {
        ucd.getLog ().log (status);
    }
    Log.status (status);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDetectorPlugin.java" startline="473" endline="477">
public static Status logToEclipseLog (String message, Throwable ex) {
    Status status = new Status (IStatus.ERROR, ID, IStatus.ERROR, message, ex);
    logToEclipseLog (status);
    return status;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/UseFinalQuickFix.java" startline="27" endline="29">
protected UseFinalQuickFix (IMarker marker) {
    super (marker);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/UseFinalQuickFix.java" startline="32" endline="48">
public final int runImpl (BodyDeclaration nodeToChange) throws BadLocationException {
    ListRewrite listRewrite = getListRewrite (nodeToChange);
    Modifier modifierFound = getModifierVisibility (nodeToChange);
    Modifier modifierFinal = nodeToChange.getAST ().newModifier (Modifier.ModifierKeyword.FINAL_KEYWORD);
    int startPosition = - 1;
    if (modifierFound == null) {
        listRewrite.insertFirst (modifierFinal, null);
    } else {
        listRewrite.insertAfter (modifierFinal, modifierFound, null);
        startPosition = modifierFound.getStartPosition () + modifierFound.getLength () + 1;
    }
    return startPosition;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/UseFinalQuickFix.java" startline="50" endline="52">
public String getLabel () {
    return Messages.UseFinalQuickFix_label;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/UseFinalQuickFix.java" startline="54" endline="56">
public Image getImage () {
    return UCDetectorPlugin.getImage (UCDetectorPlugin.IMAGE_FINAL);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/UseFinalQuickFix.java" startline="58" endline="60">
public String getDescription () {
    return null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/UCDQuickGenerator.java" startline="32" endline="63">
public IMarkerResolution [] getResolutions (IMarker marker) {
    try {
        String markerType = marker.getType ();
        String javaTypeString = (String) marker.getAttribute (MarkerFactory.JAVA_TYPE);
        if (Log.isDebug ()) {
            Log.debug ("UCDQuickFixer.getResolutions() for: " + markerType);
        }
        List < IMarkerResolution > resolutions = new ArrayList < IMarkerResolution > ();
        if (MarkerFactory.UCD_MARKER_TYPE_UNUSED.equals (markerType)) {
            boolean isPrimaryType = (ElementType.valueOfSave (javaTypeString) == ElementType.PRIMARY_TYPE);
            resolutions.add (isPrimaryType ? new DeleteFileQuickFix (marker) : new DeleteQuickFix (marker));
            resolutions.add (new LineCommentQuickFix (marker));
        } else if (MarkerFactory.UCD_MARKER_TYPE_USE_PRIVATE.equals (markerType) || MarkerFactory.UCD_MARKER_TYPE_USE_PROTECTED.equals (markerType) || MarkerFactory.UCD_MARKER_TYPE_USE_DEFAULT.equals (markerType)) {
            resolutions.add (new VisibilityQuickFix (marker));
        } else if (MarkerFactory.UCD_MARKER_TYPE_USE_FINAL.equals (markerType)) {
            resolutions.add (new UseFinalQuickFix (marker));
        }

        resolutions.add (new NoUcdTagQuickFix (marker));
        resolutions.add (new UseSuppressWarningsQuickFix (marker));
        resolutions.add (new TodoQuickFix (marker));
        return resolutions.toArray (new IMarkerResolution [resolutions.size ()]);
    } catch (CoreException e) {
        Log.error ("Can't get UCDetector resolutions for marker: " + marker, e);
    }
    return new IMarkerResolution [0];
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/UCDQuickGenerator.java" startline="65" endline="73">
public boolean hasResolutions (IMarker marker) {
    try {
        return ! MarkerFactory.UCD_MARKER_TYPE_USED_FEW.equals (marker.getType ());
    } catch (CoreException e) {
        Log.error ("Can't get UCD resolutions for marker: " + marker, e);
        return false;
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/DeleteQuickFix.java" startline="26" endline="28">
protected DeleteQuickFix (IMarker marker) {
    super (marker);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/DeleteQuickFix.java" startline="31" endline="42">
public int runImpl (BodyDeclaration nodeToChange) throws BadLocationException {
    LineComment lineComment = nodeToChange.getAST ().newLineComment ();
    rewrite.replace (nodeToChange, lineComment, null);
    if (nodeToChange.getJavadoc () != null) {
        return nodeToChange.getJavadoc ().getStartPosition ();
    }
    return nodeToChange.getStartPosition ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/DeleteQuickFix.java" startline="44" endline="46">
public String getLabel () {
    return Messages.DeleteCodeQuickFix_label;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/DeleteQuickFix.java" startline="48" endline="51">
public Image getImage () {
    return UCDetectorPlugin.getSharedImage (ISharedImages.IMG_TOOL_DELETE);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/DeleteQuickFix.java" startline="53" endline="55">
public String getDescription () {
    return null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/AbstractUCDQuickFix.java" startline="71" endline="74">
protected AbstractUCDQuickFix (IMarker marker) {
    this.marker = marker;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/AbstractUCDQuickFix.java" startline="76" endline="146">
public void run (IMarker marker2) {
    this.marker = marker2;
    charStart = marker2.getAttribute (IMarker.CHAR_START, - 1);
    ICompilationUnit originalUnit = null;
    try {
        if (Log.isDebug ()) {
            Log.debug ("%s.run(). Marker=%s", getClass ().getSimpleName (), MarkerFactory.dumpMarker (marker));
        }
        if (charStart == - 1) {
            Log.warn ("CHAR_START missing for marker: '%s'", MarkerFactory.dumpMarker (marker));
            return;
        }
        originalUnit = JavaElementUtil.getCompilationUnitFor (marker.getResource ());
        if (originalUnit == null) {
            Log.warn ("Can't find CompilationUnit: " + marker.getType ());
            return;
        }
        ITextFileBuffer textFileBuffer = RefactoringFileBuffers.acquire (originalUnit);
        doc = textFileBuffer.getDocument ();
        CompilationUnit copyUnit = createCopy (originalUnit);
        rewrite = ASTRewrite.create (copyUnit.getAST ());
        FindNodeToChangeVisitor visitor = new FindNodeToChangeVisitor (charStart);
        copyUnit.accept (visitor);
        if (visitor.nodeToChange == null) {
            Log.warn ("Node to change not found for marker: '%s'", MarkerFactory.dumpMarker (marker));
            return;
        }
        int startPosition = runImpl (visitor.nodeToChange);
        if (startPosition == - 1) {
            startPosition = doc.getLineInformationOfOffset (charStart).getOffset ();
        }
        marker.delete ();
        commitChanges ();
        IEditorPart part = EditorUtility.isOpenInEditor (originalUnit);
        if (part == null) {
            part = EditorUtility.openInEditor (originalUnit, true);
        }
        if (part != null) {
            part.doSave (null);
        }
        originalUnit.getResource ().refreshLocal (IResource.DEPTH_ONE, null);
        if (part instanceof ITextEditor) {
            if (startPosition > 0) {
                ITextEditor textEditor = (ITextEditor) part;
                textEditor.selectAndReveal (startPosition, 0);
            }
        }
    } catch (Exception e) {
        UCDetectorPlugin.logToEclipseLog (QUICK_FIX_PROBLEMS, e);
    } finally {
        try {
            if (originalUnit != null) {
                RefactoringFileBuffers.release (originalUnit);
            }
        } catch (CoreException e) {
            UCDetectorPlugin.logToEclipseLog (QUICK_FIX_PROBLEMS, e);
        }
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/AbstractUCDQuickFix.java" startline="155" endline="157">
protected FindNodeToChangeVisitor (int charStart) {
    this.charStart = charStart;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/AbstractUCDQuickFix.java" startline="160" endline="173">
protected boolean visitImpl (BodyDeclaration declaration, SimpleName name) {
    int startPos = declaration.getStartPosition ();
    int endPos = name.getStartPosition () + name.getLength ();
    boolean found = startPos <= charStart && charStart <= endPos;
    if (found) {
        nodeToChange = declaration;
    }
    if (Log.isDebug () && found) {
        Log.debug ("NodeToChange: %s. char postion: %s<=%s<=%s.", name.getIdentifier (), "" + startPos, "" + charStart, "" + endPos);
    }
    return nodeToChange == null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/AbstractUCDQuickFix.java" startline="176" endline="178">
public String toString () {
    return "nodeFound='" + nodeToChange + "'";
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/AbstractUCDQuickFix.java" startline="184" endline="190">
private static CompilationUnit createCopy (ICompilationUnit unit) throws JavaModelException {
    unit.becomeWorkingCopy (null);
    ASTParser parser = ASTParser.newParser (AST.JLS3);
    parser.setSource (unit);
    parser.setResolveBindings (true);
    return (CompilationUnit) parser.createAST (null);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/AbstractUCDQuickFix.java" startline="195" endline="198">
private final void commitChanges () throws BadLocationException {
    TextEdit edits = rewrite.rewriteAST (doc, null);
    edits.apply (doc);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/AbstractUCDQuickFix.java" startline="203" endline="206">
protected final ListRewrite getListRewrite (BodyDeclaration nodeToChange) {
    ChildListPropertyDescriptor property = nodeToChange.getModifiersProperty ();
    return rewrite.getListRewrite (nodeToChange, property);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/AbstractUCDQuickFix.java" startline="211" endline="224">
protected static Modifier getModifierVisibility (BodyDeclaration declaration) {
    List < ? > list = declaration.modifiers ();
    for (Object child : list) {
        if (child instanceof Modifier) {
            Modifier modifier = (Modifier) child;
            if (modifier.getKeyword ().equals (ModifierKeyword.PUBLIC_KEYWORD) || modifier.getKeyword ().equals (ModifierKeyword.PROTECTED_KEYWORD) || modifier.getKeyword ().equals (ModifierKeyword.PRIVATE_KEYWORD)) {
                return modifier;
            }
        }
    }
    return null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/AbstractUCDQuickFix.java" startline="234" endline="236">
public int runImpl (BodyDeclaration nodeToChange) throws BadLocationException {
    return - 1;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/AbstractUCDQuickFix.java" startline="239" endline="247">
public IMarker [] findOtherMarkers (IMarker [] markers) {
    final List < IMarker > result = new ArrayList < IMarker > ();
    for (IMarker markerToCheck : markers) {
        if (isOtherMarker (markerToCheck)) {
            result.add (markerToCheck);
        }
    }
    return result.toArray (new IMarker [result.size ()]);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/AbstractUCDQuickFix.java" startline="249" endline="267">
private boolean isOtherMarker (IMarker marker2) {
    if (marker != marker2) {
        try {
            if (marker.getType ().equals (marker2.getType ())) {
                String sJavaType1 = (String) marker.getAttribute (MarkerFactory.JAVA_TYPE);
                String sJavaType2 = (String) marker2.getAttribute (MarkerFactory.JAVA_TYPE);
                ElementType javaType1 = ElementType.valueOf (sJavaType1);
                ElementType javaType2 = ElementType.valueOf (sJavaType2);
                return javaType1 == javaType2;
            }
        } catch (Exception e) {
            Log.error ("Can't compare markers: " + e.getMessage ());
        }
    }
    return false;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/AbstractUCDQuickFix.java" startline="274" endline="276">
protected final String getLineDelimitter () {
    return TextUtilities.getDefaultLineDelimiter (doc);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/AbstractUCDQuickFix.java" startline="278" endline="287">
final String guessIndent (IRegion region) throws BadLocationException {
    String strLine = doc.get (region.getOffset (), region.getLength ());
    int index = 0;
    for (index = 0; index < strLine.length (); index ++) {
        if (! Character.isWhitespace (strLine.charAt (index))) {
            break;
        }
    }
    return strLine.substring (0, index);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/AbstractUCDQuickFix.java" startline="289" endline="296">
final String getMarkerType () {
    try {
        return marker.getType ();
    } catch (CoreException e) {
        return null;
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/LineCommentQuickFix.java" startline="26" endline="28">
protected LineCommentQuickFix (IMarker marker) {
    super (marker);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/LineCommentQuickFix.java" startline="31" endline="38">
public int runImpl (BodyDeclaration nodeToChange) throws BadLocationException {
    int offsetBody = nodeToChange.getStartPosition ();
    int lengthBody = nodeToChange.getLength ();
    int lineStart = doc.getLineOfOffset (offsetBody);
    int lineEnd = doc.getLineOfOffset (offsetBody + lengthBody);
    createLineComments (lineStart, lineEnd);
    return doc.getLineInformation (lineStart).getOffset ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/LineCommentQuickFix.java" startline="44" endline="60">
private void createLineComments (int lineStart, int lineEnd) throws BadLocationException {
    String newLine = getLineDelimitter ();
    for (int lineNr = lineEnd;
    lineNr >= lineStart; lineNr --) {
        IRegion region = doc.getLineInformation (lineNr);
        int offsetLine = region.getOffset ();
        int lengthLine = region.getLength ();
        String strLine = doc.get (offsetLine, lengthLine);
        StringBuilder replace = new StringBuilder ();
        if (lineNr == lineStart) {
            replace.append ("// TODO Remove unused code found by UCDetector");
            replace.append (newLine);
        }
        replace.append ("// ").append (strLine);
        doc.replace (offsetLine, lengthLine, replace.toString ());
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/LineCommentQuickFix.java" startline="62" endline="64">
public String getLabel () {
    return Messages.LineCommentQuickFix_label;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/LineCommentQuickFix.java" startline="66" endline="69">
public Image getImage () {
    return UCDetectorPlugin.getImage (UCDetectorPlugin.IMAGE_COMMENT);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/LineCommentQuickFix.java" startline="71" endline="73">
public String getDescription () {
    return null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/VisibilityQuickFix.java" startline="31" endline="33">
protected VisibilityQuickFix (IMarker marker) {
    super (marker);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/VisibilityQuickFix.java" startline="36" endline="60">
public int runImpl (BodyDeclaration nodeToChange) throws BadLocationException {
    ListRewrite listRewrite = getListRewrite (nodeToChange);
    Modifier modifierFound = getModifierVisibility (nodeToChange);
    Modifier modifierNew = getModifierNew (nodeToChange);
    int startPosition = - 1;
    if (modifierFound == null && modifierNew != null) {
        listRewrite.insertFirst (modifierNew, null);
    } else if (modifierFound != null && modifierNew == null) {
        listRewrite.remove (modifierFound, null);
        startPosition = modifierFound.getStartPosition ();
    } else if (modifierFound != null && modifierNew != null) {
        listRewrite.replace (modifierFound, modifierNew, null);
        startPosition = modifierFound.getStartPosition ();
    }

    return startPosition;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/VisibilityQuickFix.java" startline="62" endline="71">
private Modifier getModifierNew (BodyDeclaration nodeToChange) {
    String markerType = getMarkerType ();
    if (MarkerFactory.UCD_MARKER_TYPE_USE_PRIVATE.equals (markerType)) {
        return nodeToChange.getAST ().newModifier (Modifier.ModifierKeyword.PRIVATE_KEYWORD);
    } else if (MarkerFactory.UCD_MARKER_TYPE_USE_PROTECTED.equals (markerType)) {
        return nodeToChange.getAST ().newModifier (Modifier.ModifierKeyword.PROTECTED_KEYWORD);
    }

    return null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/VisibilityQuickFix.java" startline="73" endline="86">
public String getLabel () {
    String markerType = getMarkerType ();
    String keyword = null;
    if (MarkerFactory.UCD_MARKER_TYPE_USE_PROTECTED.equals (markerType)) {
        keyword = "protected";
    } else if (MarkerFactory.UCD_MARKER_TYPE_USE_DEFAULT.equals (markerType)) {
        keyword = "default";
    } else if (MarkerFactory.UCD_MARKER_TYPE_USE_PRIVATE.equals (markerType)) {
        keyword = "private";
    }

    return NLS.bind (Messages.VisibilityQuickFix_label, keyword);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/VisibilityQuickFix.java" startline="88" endline="100">
public Image getImage () {
    String markerType = getMarkerType ();
    if (MarkerFactory.UCD_MARKER_TYPE_USE_PROTECTED.equals (markerType)) {
        return JavaUI.getSharedImages ().getImage (JavaPluginImages.IMG_MISC_PROTECTED);
    } else if (MarkerFactory.UCD_MARKER_TYPE_USE_DEFAULT.equals (markerType)) {
        return JavaUI.getSharedImages ().getImage (JavaPluginImages.IMG_MISC_DEFAULT);
    } else if (MarkerFactory.UCD_MARKER_TYPE_USE_PRIVATE.equals (markerType)) {
        return JavaUI.getSharedImages ().getImage (JavaPluginImages.IMG_MISC_PRIVATE);
    }

    return null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/VisibilityQuickFix.java" startline="102" endline="104">
public String getDescription () {
    return null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/DeleteFileQuickFix.java" startline="26" endline="28">
protected DeleteFileQuickFix (IMarker marker) {
    super (marker);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/DeleteFileQuickFix.java" startline="31" endline="39">
public void run (IMarker marker2) {
    IResource resource = marker2.getResource ();
    try {
        resource.delete (false, null);
    } catch (CoreException ex) {
        UCDetectorPlugin.logToEclipseLog ("Can't delete file: " + resource, ex);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/DeleteFileQuickFix.java" startline="41" endline="43">
public String getLabel () {
    return Messages.DeleteFileQuickFix_label;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/DeleteFileQuickFix.java" startline="45" endline="47">
public Image getImage () {
    return UCDetectorPlugin.getSharedImage (ISharedImages.IMG_TOOL_DELETE);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/DeleteFileQuickFix.java" startline="49" endline="51">
public String getDescription () {
    return null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/TodoQuickFix.java" startline="26" endline="28">
protected TodoQuickFix (IMarker marker) {
    super (marker);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/TodoQuickFix.java" startline="31" endline="37">
public int runImpl (BodyDeclaration nodeToChange) throws BadLocationException {
    NoUcdTagQuickFix.appendNoUcd (doc, charStart, marker);
    int offset = doc.getLineInformationOfOffset (charStart).getOffset ();
    String todo = TODO_UCD + marker.getAttribute (IMarker.MESSAGE, "?") + getLineDelimitter ();
    doc.replace (offset, 0, todo);
    return offset;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/TodoQuickFix.java" startline="39" endline="41">
public Image getImage () {
    return UCDetectorPlugin.getImage (UCDetectorPlugin.IMAGE_TODO);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/TodoQuickFix.java" startline="43" endline="45">
public String getLabel () {
    return Messages.TodoQuickFix_label;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/TodoQuickFix.java" startline="47" endline="50">
public String getDescription () {
    return String.format ("Add comments:<br><b>%s...</b><br>And<br><b>%s</b>", TODO_UCD, NoUcdTagQuickFix.NO_UCD_COMMENT);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/NoUcdTagQuickFix.java" startline="30" endline="32">
protected NoUcdTagQuickFix (IMarker marker) {
    super (marker);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/NoUcdTagQuickFix.java" startline="35" endline="37">
public int runImpl (BodyDeclaration nodeToChange) throws BadLocationException {
    return appendNoUcd (doc, charStart, marker);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/NoUcdTagQuickFix.java" startline="43" endline="56">
static int appendNoUcd (IDocument document, int charStart, IMarker marker) throws BadLocationException {
    IRegion line = document.getLineInformationOfOffset (charStart);
    int offset = line.getOffset ();
    int length = line.getLength ();
    StringBuilder newLine = new StringBuilder ();
    newLine.append (document.get (offset, length)).append (NO_UCD_COMMENT);
    String markerType = MarkerFactory.ucdMarkerTypeToNiceString (marker);
    if (markerType != null) {
        newLine.append (" (").append (markerType).append (")");
    }
    document.replace (offset, length, newLine.toString ());
    return offset + length + 1;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/NoUcdTagQuickFix.java" startline="58" endline="60">
public Image getImage () {
    return JavaUI.getSharedImages ().getImage (JavaPluginImages.IMG_OBJS_NLS_SKIP);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/NoUcdTagQuickFix.java" startline="62" endline="64">
public String getLabel () {
    return Messages.UseTag_NO_UCD_QuickFix_label;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/NoUcdTagQuickFix.java" startline="66" endline="68">
public String getDescription () {
    return null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/UseSuppressWarningsQuickFix.java" startline="27" endline="29">
protected UseSuppressWarningsQuickFix (IMarker marker) {
    super (marker);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/UseSuppressWarningsQuickFix.java" startline="40" endline="48">
public int runImpl (BodyDeclaration nodeToChange) throws BadLocationException {
    IRegion region = doc.getLineInformationOfOffset (charStart);
    String indent = guessIndent (region);
    String declarationLine = doc.get (region.getOffset (), 0);
    String twoLines = indent + "@SuppressWarnings(\"ucd\")" + getLineDelimitter () + declarationLine;
    doc.replace (region.getOffset (), 0, twoLines);
    return region.getOffset () + indent.length ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/UseSuppressWarningsQuickFix.java" startline="50" endline="52">
public Image getImage () {
    return JavaUI.getSharedImages ().getImage (JavaPluginImages.IMG_OBJS_ANNOTATION);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/UseSuppressWarningsQuickFix.java" startline="54" endline="56">
public String getLabel () {
    return Messages.UseAnnotation_UCD_QuickFix_label;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/quickfix/UseSuppressWarningsQuickFix.java" startline="58" endline="60">
public String getDescription () {
    return null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/CountIterator.java" startline="50" endline="54">
public void handleStartGlobal (IJavaElement [] objects) throws CoreException {
    getMonitor ().beginTask (getJobName (), 10);
    selectedAsString = getSelectedString (objects);
    super.handleStartGlobal (objects);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/CountIterator.java" startline="57" endline="59">
public void handleStartSelectedElement (IJavaElement javaElement) {
    isFirst = true;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/CountIterator.java" startline="62" endline="64">
public void handleEndElement (IJavaElement javaElement) throws CoreException {
    isFirst = false;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/CountIterator.java" startline="67" endline="69">
protected void handleJavaProject (IJavaProject project) {
    projects ++;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/CountIterator.java" startline="75" endline="77">
protected boolean doPackageFragmentRootChildren (IPackageFragmentRoot root) {
    return isFirst ? true : super.doPackageFragmentRootChildren (root);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/CountIterator.java" startline="80" endline="82">
protected void handlePackageFragment (IPackageFragment packageFragment) {
    packages ++;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/CountIterator.java" startline="85" endline="93">
protected boolean handleType (IType type) throws CoreException {
    if (isPrivate (type) || Prefs.isFilterType (type)) {
        debugNotHandle (type, "isPrivate || isFilterType");
        return true;
    }
    debugHandle (type);
    classes ++;
    return true;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/CountIterator.java" startline="96" endline="103">
protected void handleMethod (IMethod method) throws CoreException {
    if (isPrivate (method) || Prefs.isFilterMethod (method)) {
        debugNotHandle (method, "isPrivate || isFilterMethod");
        return;
    }
    debugHandle (method);
    methods ++;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/CountIterator.java" startline="106" endline="112">
protected void handleField (IField field) throws CoreException {
    if (isPrivate (field) || Prefs.isFilterField (field)) {
        return;
    }
    debugHandle (field);
    fields ++;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/CountIterator.java" startline="118" endline="128">
public String toString () {
    StringBuilder sb = new StringBuilder ();
    sb.append (Messages.CountIterator_NotPrivate).append (' ');
    appendLine (sb, Messages.CountIterator_Projects, projects);
    appendLine (sb, Messages.CountIterator_Packages, packages);
    appendLine (sb, Messages.CountIterator_Classes, classes);
    appendLine (sb, Messages.CountIterator_Methods, methods);
    appendLine (sb, Messages.CountIterator_Fields, fields);
    sb.append (NL).append ("In: ").append (selectedAsString);
    return sb.toString ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/CountIterator.java" startline="130" endline="132">
private static void appendLine (StringBuilder sb, String info, int count) {
    sb.append (String.format ("%n\t%s\t=\t%s", info, Integer.valueOf (count)));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/CountIterator.java" startline="135" endline="137">
public int getElelementsToDetectCount () {
    return projects + packages + classes + methods + fields;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/CountIterator.java" startline="140" endline="142">
public String getJobName () {
    return Messages.CountIterator_JobName;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/TypeContainer.java" startline="28" endline="30">
public TypeContainer (IType type) {
    this.type = type;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/TypeContainer.java" startline="35" endline="37">
public IType getType () {
    return type;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/TypeContainer.java" startline="39" endline="41">
public List < IField > getFields () {
    return fields;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/TypeContainer.java" startline="43" endline="45">
public List < IMethod > getMethods () {
    return methods;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/TypeContainer.java" startline="48" endline="50">
public int size () {
    return 1 + getFields ().size () + getMethods ().size ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/CleanMarkersIterator.java" startline="24" endline="26">
public void handleStartSelectedElement (IJavaElement javaElement) throws CoreException {
    MarkerFactory.deleteMarkers (javaElement);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/CleanMarkersIterator.java" startline="29" endline="31">
protected boolean doSelectedElement () {
    return false;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/CleanMarkersIterator.java" startline="34" endline="36">
public String getJobName () {
    return Messages.CleanMarkersIterator_JobName;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/UCDetectorIterator.java" startline="40" endline="45">
private TypeContainer getIteratedTypeContainer () {
    if (iteratedTypeContainer != null) {
        return iteratedTypeContainer;
    }
    return addType (null);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/UCDetectorIterator.java" startline="50" endline="52">
public int getMarkerCreated () {
    return markerCreated;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/UCDetectorIterator.java" startline="55" endline="57">
public void handleStartSelectedElement (IJavaElement javaElement) throws CoreException {
    MarkerFactory.deleteMarkers (javaElement);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/UCDetectorIterator.java" startline="60" endline="105">
protected boolean handleType (IType type) throws CoreException {
    if (isPrivate (type)) {
        debugNotHandle (type, "isPrivate");
        return false;
    }
    if (type.isAnonymous ()) {
        debugNotHandle (type, "isAnonymous");
        return false;
    }
    if (! Prefs.isUCDetectionInClasses ()) {
        debugNotHandle (type, "!isUCDetectionInClasses");
        return false;
    }
    if (Prefs.isFilterType (type)) {
        debugNotHandle (type, "isFilterType");
        return false;
    }
    if (Prefs.isFilterClassContainingString () && type.getCompilationUnit () != null) {
        String classAsString = type.getCompilationUnit ().getSource ();
        if (Prefs.isFilterClassContainingString (classAsString)) {
            debugNotHandle (type, "isFilterClassContainingString");
            return false;
        }
    }
    if (Prefs.isIgnoreDerived ()) {
        if (type.getResource () != null && type.getResource ().isDerived ()) {
            debugNotHandle (type, "isIgnoreDerived");
            return false;
        }
    }
    if (Prefs.isFilterImplements ()) {
        IType [] superTypes = JavaElementUtil.getAllSupertypes (type);
        for (IType superType : superTypes) {
            String simple = superType.getElementName ();
            String full = superType.getFullyQualifiedName ('.');
            if (Prefs.isFilterImplements (simple) || Prefs.isFilterImplements (full)) {
                debugNotHandle (type, "isFilterImplements");
                return false;
            }
        }
    }
    debugHandle (type);
    addType (type);
    return true;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/UCDetectorIterator.java" startline="107" endline="111">
private TypeContainer addType (IType type) {
    iteratedTypeContainer = new TypeContainer (type);
    typeContainers.add (iteratedTypeContainer);
    return iteratedTypeContainer;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/UCDetectorIterator.java" startline="114" endline="143">
protected void handleMethod (IMethod method) throws CoreException {
    if (isPrivate (method)) {
        debugNotHandle (method, "isPrivate");
        return;
    }
    if (method.isMainMethod ()) {
        debugNotHandle (method, "isMainMethod");
        return;
    }
    if (! Prefs.isUCDetectionInMethods ()) {
        debugNotHandle (method, "!isUCDetectionInMethods");
        return;
    }
    if (Prefs.isFilterMethod (method)) {
        debugNotHandle (method, "isFilterMethod");
        return;
    }
    if (method.isConstructor () && method.getNumberOfParameters () == 0) {
        debugNotHandle (method, "default constructor");
        return;
    }
    if (Prefs.isFilterBeanMethod () && JavaElementUtil.isBeanMethod (method)) {
        debugNotHandle (method, "isFilterBeanMethod");
        return;
    }
    debugHandle (method);
    getIteratedTypeContainer ().getMethods ().add (method);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/UCDetectorIterator.java" startline="146" endline="165">
protected void handleField (IField field) throws CoreException {
    if (Prefs.isFilterField (field)) {
        debugNotHandle (field, "isFilterField");
    } else if (! Prefs.isUCDetectionInFields ()) {
        debugNotHandle (field, "!isUCDetectionInFields");
    } else if (Prefs.isCheckUseFinalField ()) {
        debugHandle (field);
        getIteratedTypeContainer ().getFields ().add (field);
    } else if (! isPrivate (field)) {
        debugHandle (field);
        getIteratedTypeContainer ().getFields ().add (field);
    } else {
        debugNotHandle (field, "!isCheckUseFinalField || isUCDetectionInFields");
    }

}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/UCDetectorIterator.java" startline="172" endline="186">
public void handleEndGlobal (IJavaElement [] objects) throws CoreException {
    int totalSize = getElelementsToDetectCount ();
    getMonitor ().beginTask (Messages.UCDetectorIterator_MONITOR_INFO, totalSize);
    getMonitor ().worked (1);
    SearchManager searchManager = new SearchManager (getMonitor (), totalSize, getMarkerFactory ());
    try {
        UCDetectorPlugin.logMemoryInfo ();
        searchManager.search (typeContainers);
        UCDetectorPlugin.logMemoryInfo ();
    } finally {
        stopWatch.end ("Time to run UCDetector");
        markerCreated = searchManager.getMarkerCreated ();
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/UCDetectorIterator.java" startline="189" endline="195">
public int getElelementsToDetectCount () {
    int result = 0;
    for (TypeContainer typeContainer : typeContainers) {
        result += typeContainer.size ();
    }
    return result;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/UCDetectorIterator.java" startline="198" endline="200">
public String getJobName () {
    return Messages.UCDetectorIterator_JobName;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/AbstractUCDetectorIterator.java" startline="78" endline="88">
public final void iterateAll () throws CoreException {
    IProject [] projects = ResourcesPlugin.getWorkspace ().getRoot ().getProjects ();
    List < IJavaProject > openProjects = new ArrayList < IJavaProject > ();
    for (IProject tempProject : projects) {
        IJavaProject project = JavaCore.create (tempProject);
        if (project.isOpen ()) {
            openProjects.add (project);
        }
    }
    iterate (openProjects);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/AbstractUCDetectorIterator.java" startline="90" endline="93">
public final void iterate (List < ? extends IJavaElement > javaElements) throws CoreException {
    IJavaElement [] array = javaElements.toArray (new IJavaElement [javaElements.size ()]);
    iterate (array);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/AbstractUCDetectorIterator.java" startline="100" endline="127">
public final void iterate (IJavaElement [] javaElements) throws CoreException {
    this.objectsToIterate = javaElements;
    try {
        handleStartGlobal (javaElements);
        for (IJavaElement selection : javaElements) {
            Log.info ("###############################################################");
            Log.info ("Start iterating: " + JavaElementUtil.getElementName (selection));
            activePackage = (selection instanceof IPackageFragment ? (IPackageFragment) selection : null);
            handleStartSelectedElement (selection);
            if (doSelectedElement ()) {
                iterate (selection);
            }
            IResource resource = selection.getCorrespondingResource ();
            if (doResources () && resource != null) {
                iterateResource (resource);
            }
            handleEndSelectedElement (selection);
        }
        handleEndGlobal (javaElements);
    } finally {
        if (markerFactory != null) {
            markerFactory.endReport ();
            timeEnd = System.currentTimeMillis ();
            Log.info ("Detection time: " + StopWatch.timeAsString (timeEnd - timeStart));
        }
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/AbstractUCDetectorIterator.java" startline="132" endline="165">
private void iterateResource (IResource resource) throws CoreException {
    if (getMonitor ().isCanceled ()) {
        return;
    }
    if (DEBUG) {
        Log.debug ("Iterate Resource '%s' %s", resource.getName (), JavaElementUtil.getClassName (resource));
    }
    if (resource instanceof IFile) {
        IFile file = (IFile) resource;
        handleResourceFile (file);
    } else if (resource instanceof IFolder) {
        IFolder folder = (IFolder) resource;
        handleResourceFolder (folder);
    } else if (resource instanceof IProject) {
        IProject project = (IProject) resource;
        handleResourceProject (project);
    } else if (resource instanceof IWorkspaceRoot) {
        IWorkspaceRoot workspaceRoot = (IWorkspaceRoot) resource;
        handleResourceWorkspaceRoot (workspaceRoot);
    } else {
        Log.warn ("UNHANDLED RESOURCE %s:%s", resource.getName (), resource.getClass ().getSimpleName ());
    }

    if (resource instanceof IContainer) {
        IContainer container = (IContainer) resource;
        IResource [] members = container.members ();
        for (IResource member : members) {
            iterateResource (member);
        }
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/AbstractUCDetectorIterator.java" startline="172" endline="174">
public int getElelementsToDetectCount () {
    return - 1;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/AbstractUCDetectorIterator.java" startline="181" endline="276">
protected final void iterate (IJavaElement javaElement) throws CoreException {
    if (getMonitor ().isCanceled ()) {
        return;
    }
    if (DEBUG) {
        Log.debug ("Iterate JavaElement '%s' %s", JavaElementUtil.getElementName (javaElement), JavaElementUtil.getClassName (javaElement));
    }
    handleStartElement (javaElement);
    boolean doChildren = true;
    if (javaElement instanceof IJavaModel) {
        IJavaModel model = (IJavaModel) javaElement;
        handleJavaModel (model);
    } else if (javaElement instanceof IJavaProject) {
        IJavaProject project = (IJavaProject) javaElement;
        handleJavaProject (project);
    } else if (javaElement instanceof IPackageFragmentRoot) {
        IPackageFragmentRoot pfRoot = (IPackageFragmentRoot) javaElement;
        doChildren = doPackageFragmentRootChildren (pfRoot);
        handlePackageFragmentRoot (pfRoot);
    } else if (javaElement instanceof IPackageFragment) {
        doChildren = false;
        IPackageFragment packageFragment = (IPackageFragment) javaElement;
        if (! visitedPackages.contains (packageFragment)) {
            visitedPackages.add (packageFragment);
            if (activePackage == packageFragment) {
                List < IPackageFragment > subPackages = JavaElementUtil.getSubPackages (packageFragment);
                for (IPackageFragment subPackage : subPackages) {
                    iterate (subPackage);
                }
            }
            doChildren = doPackageChildren (packageFragment);
            handlePackageFragment (packageFragment);
        }
    } else if (javaElement instanceof IClassFile) {
        IClassFile classFile = (IClassFile) javaElement;
        handleClassFile (classFile);
    } else if (javaElement instanceof ICompilationUnit) {
        ICompilationUnit unit = (ICompilationUnit) javaElement;
        handleCompilationUnit (unit);
    } else if (javaElement instanceof IType) {
        IType type = (IType) javaElement;
        doChildren = handleType (type);
    } else if (javaElement instanceof IImportContainer) {
        IImportContainer importContainer = (IImportContainer) javaElement;
        doChildren = doImportContainerChildren (importContainer);
        handleImportContainer (importContainer);
    } else if (javaElement instanceof IPackageDeclaration) {
        IPackageDeclaration packageDeclaration = (IPackageDeclaration) javaElement;
        handlePackageDeclaration (packageDeclaration);
    } else if (javaElement instanceof IImportDeclaration) {
        IImportDeclaration importDeclaration = (IImportDeclaration) javaElement;
        handleImportDeclaration (importDeclaration);
    } else if (javaElement instanceof IInitializer) {
        IInitializer initializer = (IInitializer) javaElement;
        handleInitializer (initializer);
    } else if (javaElement instanceof IMethod) {
        IMethod method = (IMethod) javaElement;
        handleMethod (method);
    } else if (javaElement instanceof IField) {
        IField field = (IField) javaElement;
        handleField (field);
    } else {
        Log.warn ("UNHANDLED TYPE %s:%s", JavaElementUtil.getElementName (javaElement), javaElement.getClass ().getSimpleName ());
    }

    if (doChildren) {
        if (javaElement instanceof IParent) {
            IJavaElement [] children = ((IParent) javaElement).getChildren ();
            for (IJavaElement child : children) {
                iterate (child);
            }
        }
    }
    handleEndElement (javaElement);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/AbstractUCDetectorIterator.java" startline="278" endline="280">
public final void setMonitor (UCDProgressMonitor monitor) {
    this.monitor = monitor;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/AbstractUCDetectorIterator.java" startline="282" endline="284">
public final UCDProgressMonitor getMonitor () {
    return monitor;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/AbstractUCDetectorIterator.java" startline="294" endline="303">
protected static final String getSelectedString (IJavaElement [] javaElements) {
    StringBuilder selectedAsString = new StringBuilder ();
    for (IJavaElement javaElement : javaElements) {
        if (selectedAsString.length () > 0) {
            selectedAsString.append (SEP);
        }
        selectedAsString.append (JavaElementUtil.getElementName (javaElement));
    }
    return selectedAsString.toString ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/AbstractUCDetectorIterator.java" startline="305" endline="311">
protected final MarkerFactory getMarkerFactory () throws CoreException {
    if (markerFactory == null) {
        markerFactory = MarkerFactory.createInstance ();
        markerFactory.startReport (objectsToIterate, timeStart);
    }
    return markerFactory;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/AbstractUCDetectorIterator.java" startline="316" endline="321">
protected static final void debugHandle (IMember member) {
    if (DEBUG) {
        Log.debug ("    Handle %s '%s'", JavaElementUtil.getMemberTypeString (member), JavaElementUtil.getElementName (member));
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/AbstractUCDetectorIterator.java" startline="327" endline="332">
protected static final void debugNotHandle (IMember member, String reason) {
    if (DEBUG) {
        Log.debug ("    Ignore %s '%s' because: %s", JavaElementUtil.getMemberTypeString (member), JavaElementUtil.getElementName (member), reason);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/AbstractUCDetectorIterator.java" startline="340" endline="342">
public void handleStartGlobal (IJavaElement [] javaElements) throws CoreException {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/AbstractUCDetectorIterator.java" startline="347" endline="349">
public void handleEndGlobal (IJavaElement [] javaElements) throws CoreException {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/AbstractUCDetectorIterator.java" startline="353" endline="355">
public void handleStartSelectedElement (IJavaElement javaElement) throws CoreException {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/AbstractUCDetectorIterator.java" startline="359" endline="361">
public void handleEndSelectedElement (IJavaElement javaElement) throws CoreException {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/AbstractUCDetectorIterator.java" startline="370" endline="374">
public void handleStartElement (IJavaElement javaElement) throws CoreException {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/AbstractUCDetectorIterator.java" startline="379" endline="381">
public void handleEndElement (IJavaElement javaElement) throws CoreException {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/AbstractUCDetectorIterator.java" startline="390" endline="392">
protected void handleJavaModel (IJavaModel javaModel) {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/AbstractUCDetectorIterator.java" startline="397" endline="400">
protected void handleJavaProject (IJavaProject javaProject) {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/AbstractUCDetectorIterator.java" startline="405" endline="407">
protected void handlePackageFragmentRoot (IPackageFragmentRoot packageFragmentRoot) {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/AbstractUCDetectorIterator.java" startline="412" endline="414">
protected void handlePackageFragment (IPackageFragment packageFragment) {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/AbstractUCDetectorIterator.java" startline="419" endline="422">
protected void handleClassFile (IClassFile classFile) throws CoreException {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/AbstractUCDetectorIterator.java" startline="426" endline="428">
protected void handleCompilationUnit (ICompilationUnit compilationUnit) throws CoreException {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/AbstractUCDetectorIterator.java" startline="434" endline="436">
protected boolean handleType (IType type) throws CoreException {
    return true;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/AbstractUCDetectorIterator.java" startline="441" endline="443">
protected void handlePackageDeclaration (IPackageDeclaration packageDeclaration) throws CoreException {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/AbstractUCDetectorIterator.java" startline="447" endline="450">
protected void handleImportContainer (IImportContainer importContainer) throws CoreException {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/AbstractUCDetectorIterator.java" startline="454" endline="457">
protected void handleImportDeclaration (IImportDeclaration importDeclaration) throws CoreException {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/AbstractUCDetectorIterator.java" startline="461" endline="463">
protected void handleField (IField field) throws CoreException {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/AbstractUCDetectorIterator.java" startline="467" endline="470">
protected void handleInitializer (IInitializer initializer) throws CoreException {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/AbstractUCDetectorIterator.java" startline="474" endline="476">
protected void handleMethod (IMethod method) throws CoreException {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/AbstractUCDetectorIterator.java" startline="483" endline="485">
protected void handleResourceFile (IFile file) throws CoreException {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/AbstractUCDetectorIterator.java" startline="489" endline="491">
protected void handleResourceFolder (IFolder folder) throws CoreException {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/AbstractUCDetectorIterator.java" startline="495" endline="497">
protected void handleResourceProject (IProject project) throws CoreException {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/AbstractUCDetectorIterator.java" startline="501" endline="503">
protected void handleResourceWorkspaceRoot (IWorkspaceRoot workspaceRoot) throws CoreException {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/AbstractUCDetectorIterator.java" startline="512" endline="514">
protected boolean doSelectedElement () {
    return true;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/AbstractUCDetectorIterator.java" startline="520" endline="522">
protected boolean doResources () {
    return false;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/AbstractUCDetectorIterator.java" startline="529" endline="531">
protected boolean doPackageFragmentRootChildren (IPackageFragmentRoot packageFragmentRoot) {
    return ! packageFragmentRoot.isArchive () && ! Prefs.isFilterPackageFragmentRoot (packageFragmentRoot);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/AbstractUCDetectorIterator.java" startline="537" endline="539">
protected boolean doPackageChildren (IPackageFragment packageFragment) {
    return ! Prefs.isFilterPackage (packageFragment);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/AbstractUCDetectorIterator.java" startline="546" endline="548">
protected boolean doImportContainerChildren (IImportContainer importContainer) {
    return false;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/AbstractUCDetectorIterator.java" startline="553" endline="555">
protected static final boolean isPrivate (IMember member) throws JavaModelException {
    return Flags.isPrivate (member.getFlags ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/AbstractUCDetectorIterator.java" startline="557" endline="559">
protected static final boolean isPublic (IMember member) throws JavaModelException {
    return Flags.isPublic (member.getFlags ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/HeadlessExtension.java" startline="42" endline="46">
private HeadlessExtension (AbstractUCDetectorIterator iterator, String id, Integer ordinal) {
    this.iterator = iterator;
    this.id = id;
    this.ordinal = ordinal;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/HeadlessExtension.java" startline="48" endline="50">
public String getId () {
    return id;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/HeadlessExtension.java" startline="53" endline="75">
private static void loadExtensions () {
    if (! isInitialized) {
        Log.info ("Load HeadlessExtensions");
        isInitialized = true;
        headlessExtensionList = new ArrayList < HeadlessExtension > ();
        IExtensionRegistry reg = Platform.getExtensionRegistry ();
        IConfigurationElement [] elements = reg.getConfigurationElementsFor (EXTENSION_POINT_ID);
        for (IConfigurationElement element : elements) {
            try {
                String id = element.getAttribute (ATTRIBUTE_ID);
                Integer ordinal = Integer.valueOf (element.getAttribute (ATTRIBUTE_ORDINAL));
                AbstractUCDetectorIterator iterator = (AbstractUCDetectorIterator) WorkbenchPlugin.createExtension (element, ATTRIBUTE_CLASS);
                Log.info ("Found HeadlessExtension: %s, %s", id, element.getAttribute (ATTRIBUTE_CLASS));
                headlessExtensionList.add (new HeadlessExtension (iterator, id, ordinal));
            } catch (Exception ex) {
                UCDetectorPlugin.logToEclipseLog ("Can't load ReportExtension", ex);
            }
        }
        Log.info ("Found HeadlessExtensions : " + headlessExtensionList.size ());
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/HeadlessExtension.java" startline="77" endline="85">
public static List < AbstractUCDetectorIterator > getPostIterators () {
    loadExtensions ();
    ArrayList < AbstractUCDetectorIterator > result = new ArrayList < AbstractUCDetectorIterator > ();
    Collections.sort (headlessExtensionList, new IteratorExtensionSorter ());
    for (HeadlessExtension headlessExtension : headlessExtensionList) {
        result.add (headlessExtension.getIterator ());
    }
    return result;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/HeadlessExtension.java" startline="87" endline="89">
public AbstractUCDetectorIterator getIterator () {
    return iterator;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/HeadlessExtension.java" startline="92" endline="94">
public String toString () {
    return String.format ("IteratorExtension [id=%s, iterator=%s,]", id, iterator);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/iterator/HeadlessExtension.java" startline="98" endline="100">
public int compare (HeadlessExtension o1, HeadlessExtension o2) {
    return o1.ordinal.compareTo (o2.ordinal);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/PreferenceInitializer.java" startline="39" endline="97">
public void initializeDefaultPreferences () {
    IPreferenceStore store = UCDetectorPlugin.getDefault ().getPreferenceStore ();
    store.setDefault (Prefs.FILTER_SOURCE_FOLDER, SOURCE_FOLDER_FILTER);
    store.setDefault (Prefs.FILTER_PACKAGE, PACKAGE_FILTER);
    store.setDefault (Prefs.FILTER_CLASS, CLASS_FILTER);
    store.setDefault (Prefs.FILTER_METHOD, METHOD_FILTER);
    store.setDefault (Prefs.FILTER_FIELD, FIELD_FILTER);
    store.setDefault (Prefs.FILTER_ANNOATIONS, ANNOATIONS_FILTER);
    store.setDefault (Prefs.FILTER_IMPLEMENTS, "");
    store.setDefault (Prefs.FILTER_CONTAIN_STRING, "");
    store.setDefault (Prefs.FILTER_CLASS_WITH_MAIN_METHOD, false);
    store.setDefault (Prefs.FILTER_BEAN_METHOD, true);
    store.setDefault (Prefs.IGNORE_DEPRECATED, false);
    store.setDefault (Prefs.IGNORE_NO_UCD, true);
    store.setDefault (Prefs.IGNORE_DERIVED, true);
    store.setDefault (Prefs.WARN_LIMIT, 0);
    store.setDefault (Prefs.ANALYZE_CLASSES, WARNING.name ());
    store.setDefault (Prefs.ANALYZE_MEHTODS, WARNING.name ());
    store.setDefault (Prefs.ANALYZE_FIELDS, WARNING.name ());
    store.setDefault (Prefs.DETECT_TEST_ONLY, true);
    store.setDefault (Prefs.ANALYZE_LITERALS_CHECK, true);
    store.setDefault (Prefs.ANALYZE_CHECK_FULL_CLASS_NAME, true);
    store.setDefault (Prefs.ANALYZE_CHECK_SIMPLE_CLASS_NAME, false);
    store.setDefault (Prefs.ANALYZE_LITERALS, FILE_PATTERN_LITERAL_SEARCH);
    store.setDefault (Prefs.CYCLE_DEPTH, Prefs.CYCLE_DEPTH_DEFAULT);
    store.setDefault (Prefs.REPORT_DIR, ReportNameManager.getReportDirDefault ());
    store.setDefault (Prefs.REPORT_FILE, "UCDetectorReport_${number}");
    store.setDefault (Prefs.REPORT_CREATE_XML, false);
    for (ReportExtension extension : ReportExtension.getAllExtensions ()) {
        store.setDefault (Prefs.getReportStoreKey (extension), true);
    }
    store.setDefault (Prefs.LOG_LEVEL, LogLevel.INFO.toString ());
    store.setDefault (Prefs.LOG_TO_ECLIPSE, false);
    store.setDefault (Prefs.ANALYZE_FINAL_METHOD, IGNORE.name ());
    store.setDefault (Prefs.ANALYZE_FINAL_FIELD, IGNORE.name ());
    store.setDefault (Prefs.ANALYZE_VISIBILITY_PROTECTED_CLASSES, WARNING.name ());
    store.setDefault (Prefs.ANALYZE_VISIBILITY_PRIVATE_CLASSES, WARNING.name ());
    store.setDefault (Prefs.ANALYZE_VISIBILITY_PROTECTED_METHODS, WARNING.name ());
    store.setDefault (Prefs.ANALYZE_VISIBILITY_PRIVATE_METHODS, WARNING.name ());
    store.setDefault (Prefs.ANALYZE_VISIBILITY_PROTECTED_FIELDS, WARNING.name ());
    store.setDefault (Prefs.ANALYZE_VISIBILITY_PRIVATE_FIELDS, WARNING.name ());
    store.setDefault (Prefs.IGNORE_SYNTHETIC_ACCESS_EMULATION, true);
    store.setDefault (Prefs.ANALYZE_VISIBILITY_PROTECTED_CONSTANTS, WARNING.name ());
    store.setDefault (Prefs.ANALYZE_VISIBILITY_PRIVATE_CONSTANTS, WARNING.name ());
    store.setDefault (Prefs.MODE_NAME, ModesPanel.Mode.Default.toStringLocalized ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/ModesWriter.java" startline="42" endline="44">
public ModesWriter (List < String > extendedPreferences) {
    this.extendedPreferences = extendedPreferences;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/ModesWriter.java" startline="47" endline="97">
void saveMode (String modeName) {
    Map < String, String > allPreferences = UCDetectorPlugin.getAllPreferences ();
    allPreferences.putAll (UCDetectorPlugin.getDeltaPreferences ());
    StringBuilder text = new StringBuilder ();
    text.append (String.format ("### -------------------------------------------------------------------------%n"));
    text.append (String.format ("###               UCDetector preference file for mode: '%s'%n", modeName));
    text.append (String.format ("### -------------------------------------------------------------------------%n"));
    text.append (String.format ("### Created by  : UCDetector %s%n", UCDetectorPlugin.getAboutUCDVersion ()));
    text.append (String.format ("### Created date: %s%n", UCDetectorPlugin.getNow ()));
    text.append (String.format ("### java.util.Properties.load() may fail to load this file%n"));
    text.append (String.format ("### -------------------------------------------------------------------------%n"));
    Map < String, String > groupPrefs = new LinkedHashMap < String, String > ();
    for (String extendedPreference : extendedPreferences) {
        if (extendedPreference.startsWith (TAB_START)) {
            flushGroupPrefs (groupPrefs, text);
            String tab = extendedPreference.substring (TAB_START.length ());
            text.append (String.format ("%n## --------------------------------------------------------------------------%n"));
            text.append (String.format ("## Tab: %s%n", tab.startsWith ("&") ? tab.substring (1) : tab));
            text.append (String.format ("## --------------------------------------------------------------------------%n"));
        } else if (extendedPreference.startsWith (GROUP_START)) {
            flushGroupPrefs (groupPrefs, text);
            text.append (String.format ("%n# Group: %s%n", extendedPreference.substring (GROUP_START.length ())));
        } else {
            groupPrefs.put (extendedPreference, allPreferences.get (extendedPreference));
            allPreferences.remove (extendedPreference);
        }

    }
    flushGroupPrefs (groupPrefs, text);
    appendHeadlessProperties (text);
    String fileText = text.toString ();
    if (Log.isDebug ()) {
        Log.debug (fileText);
        Log.debug ("Unhandled preferences :" + allPreferences);
    }
    File modesFile = getModesFile (modeName);
    OutputStreamWriter writer = null;
    try {
        writer = new OutputStreamWriter (new FileOutputStream (modesFile), UCDetectorPlugin.UTF_8);
        writer.write (fileText);
        Log.debug ("Saved mode to: %s", modesFile.getAbsolutePath ());
    } catch (IOException ex) {
        String message = NLS.bind (Messages.ModesPanel_ModeFileCantSave, modesFile.getAbsolutePath ());
        UCDetectorPlugin.logToEclipseLog (message, ex);
    } finally {
        UCDetectorPlugin.closeSave (writer);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/ModesWriter.java" startline="99" endline="111">
private static void appendHeadlessProperties (StringBuilder sb) {
    try {
        if (headlessPropertiesContent == null) {
            InputStream in = ModesWriter.class.getResourceAsStream (HEADLESS_PROPERTIES);
            headlessPropertiesContent = UCDetectorPlugin.readAll (new InputStreamReader (in, UCDetectorPlugin.UTF_8));
        }
    } catch (IOException ex) {
        headlessPropertiesContent = "";
        Log.error (ex, "Can't read %s", HEADLESS_PROPERTIES);
    }
    sb.append (headlessPropertiesContent);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/ModesWriter.java" startline="114" endline="124">
private static void flushGroupPrefs (Map < String, String > groupPrefs, StringBuilder sb) {
    int maxKeyLength = 0;
    for (String key : groupPrefs.keySet ()) {
        maxKeyLength = Math.max (maxKeyLength, key.length ());
    }
    String format = MessageFormat.format ("%-{0}s = %s%n", String.valueOf (maxKeyLength));
    for (Entry < String, String > entry : groupPrefs.entrySet ()) {
        sb.append (String.format (format, entry.getKey (), entry.getValue ()));
    }
    groupPrefs.clear ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/ModesWriter.java" startline="126" endline="128">
static File getModesFile (String modeName) {
    return new File (UCDetectorPlugin.getModesDir (), modeName + MODES_FILE_TYPE);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="39" endline="41">
private Prefs () {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="117" endline="120">
public static boolean isFilterPackageFragmentRoot (IPackageFragmentRoot root) {
    String sourceFolder = JavaElementUtil.getSourceFolderProjectRelativePath (root);
    return sourceFolder == null || isMatchFilter (FILTER_SOURCE_FOLDER, sourceFolder);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="127" endline="129">
public static boolean isFilterPackage (IPackageFragment packageFragment) {
    return isMatchFilter (FILTER_PACKAGE, packageFragment.getElementName ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="136" endline="138">
public static boolean isFilterType (IType type) {
    return isMatchFilter (FILTER_CLASS, type.getElementName ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="143" endline="145">
public static boolean isFilterBeanMethod () {
    return getStore ().getBoolean (FILTER_BEAN_METHOD);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="150" endline="152">
public static boolean isFilterDeprecated () {
    return getStore ().getBoolean (IGNORE_DEPRECATED);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="157" endline="159">
public static boolean isFilter_NO_UCD () {
    return getStore ().getBoolean (IGNORE_NO_UCD);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="164" endline="166">
public static boolean isIgnoreDerived () {
    return getStore ().getBoolean (IGNORE_DERIVED);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="172" endline="174">
public static boolean isIgnoreSyntheticAccessEmulationWarning () {
    return getStore ().getBoolean (IGNORE_SYNTHETIC_ACCESS_EMULATION);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="179" endline="181">
public static boolean isDetectTestOnly () {
    return getStore ().getBoolean (DETECT_TEST_ONLY);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="186" endline="188">
public static boolean isFilterClassWithMainMethod () {
    return getStore ().getBoolean (FILTER_CLASS_WITH_MAIN_METHOD);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="195" endline="197">
public static boolean isFilterMethod (IMethod method) {
    return isMatchFilter (FILTER_METHOD, method.getElementName ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="204" endline="206">
public static boolean isFilterField (IField field) {
    return isMatchFilter (FILTER_FIELD, field.getElementName ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="213" endline="215">
public static boolean isFilterAnnotation (String annotation) {
    return isMatchFilter (FILTER_ANNOATIONS, annotation);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="222" endline="224">
public static boolean isFilterImplements (String className) {
    return isMatchFilter (FILTER_IMPLEMENTS, className);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="226" endline="229">
public static boolean isFilterImplements () {
    String filter = getStore ().getString (FILTER_IMPLEMENTS);
    return filter.trim ().length () > 0;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="234" endline="242">
public static boolean isFilterClassContainingString () {
    String [] strings = getStrings (FILTER_CONTAIN_STRING, true);
    for (String string : strings) {
        if (string.length () > 0) {
            return true;
        }
    }
    return false;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="248" endline="258">
public static boolean isFilterClassContainingString (String classAsString) {
    String [] stringsToFindInFile = getStrings (FILTER_CONTAIN_STRING, false);
    for (String stringToFindInFile : stringsToFindInFile) {
        if (stringToFindInFile.trim ().length () > 0) {
            if (classAsString != null && classAsString.contains (stringToFindInFile)) {
                return true;
            }
        }
    }
    return false;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="265" endline="267">
public static WarnLevel getUCDetectionInClasses () {
    return WarnLevel.valueOf (getString (ANALYZE_CLASSES));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="274" endline="276">
public static boolean isUCDetectionInClasses () {
    return WarnLevel.IGNORE != getUCDetectionInClasses ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="282" endline="284">
public static WarnLevel getUCDetectionInMethods () {
    return WarnLevel.valueOf (getString (ANALYZE_MEHTODS));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="291" endline="293">
public static boolean isUCDetectionInMethods () {
    return WarnLevel.IGNORE != getUCDetectionInMethods ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="299" endline="301">
public static WarnLevel getUCDetectionInFields () {
    return WarnLevel.valueOf (getString (ANALYZE_FIELDS));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="308" endline="310">
public static boolean isUCDetectionInFields () {
    return WarnLevel.IGNORE != getUCDetectionInFields ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="316" endline="321">
public static String [] getFilePatternLiteralSearch () {
    if (isUCDetectionInLiterals ()) {
        return getStrings (ANALYZE_LITERALS, true);
    }
    return EMPTY_ARRAY;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="326" endline="328">
public static boolean isUCDetectionInLiterals () {
    return getStore ().getBoolean (ANALYZE_LITERALS_CHECK) && getString (ANALYZE_LITERALS).length () > 0;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="333" endline="335">
public static boolean isUCDetectionInLiteralsFullClassName () {
    return getStore ().getBoolean (ANALYZE_CHECK_FULL_CLASS_NAME) && getString (ANALYZE_LITERALS).length () > 0;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="340" endline="342">
public static boolean isUCDetectionInLiteralsSimpleClassName () {
    return getStore ().getBoolean (ANALYZE_CHECK_SIMPLE_CLASS_NAME) && getString (ANALYZE_LITERALS).length () > 0;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="348" endline="351">
public static int getWarnLimit () {
    int warnLimit = getStore ().getInt (WARN_LIMIT);
    return warnLimit < 0 ? 0 : warnLimit;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="359" endline="375">
public static WarnLevel getVisibilityProtectedCheck (IJavaElement javaElement) {
    if (javaElement instanceof IType) {
        return WarnLevel.valueOf (getString (ANALYZE_VISIBILITY_PROTECTED_CLASSES));
    }
    if (javaElement instanceof IMethod) {
        return WarnLevel.valueOf (getString (ANALYZE_VISIBILITY_PROTECTED_METHODS));
    }
    if (javaElement instanceof IField) {
        IField field = (IField) javaElement;
        if (isConstant (field)) {
            return WarnLevel.valueOf (getString (ANALYZE_VISIBILITY_PROTECTED_CONSTANTS));
        }
        return WarnLevel.valueOf (getString (ANALYZE_VISIBILITY_PROTECTED_FIELDS));
    }
    return WarnLevel.WARNING;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="381" endline="383">
public static boolean isVisibilityProtectedCheck (IJavaElement javaElement) {
    return WarnLevel.IGNORE != getVisibilityProtectedCheck (javaElement);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="390" endline="406">
public static WarnLevel getVisibilityPrivateCheck (IJavaElement javaElement) {
    if (javaElement instanceof IType) {
        return WarnLevel.valueOf (getString (ANALYZE_VISIBILITY_PRIVATE_CLASSES));
    }
    if (javaElement instanceof IMethod) {
        return WarnLevel.valueOf (getString (ANALYZE_VISIBILITY_PRIVATE_METHODS));
    }
    if (javaElement instanceof IField) {
        IField field = (IField) javaElement;
        if (isConstant (field)) {
            return WarnLevel.valueOf (getString (ANALYZE_VISIBILITY_PRIVATE_CONSTANTS));
        }
        return WarnLevel.valueOf (getString (ANALYZE_VISIBILITY_PRIVATE_FIELDS));
    }
    return WarnLevel.WARNING;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="412" endline="414">
public static boolean isVisibilityPrivateCheck (IJavaElement member) {
    return WarnLevel.IGNORE != getVisibilityPrivateCheck (member);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="421" endline="423">
public static boolean isVisibilityCheck (IJavaElement javaElement) {
    return isVisibilityProtectedCheck (javaElement) || isVisibilityPrivateCheck (javaElement);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="425" endline="433">
private static boolean isConstant (IMember member) {
    try {
        return Flags.isStatic (member.getFlags ()) && Flags.isFinal (member.getFlags ());
    } catch (JavaModelException e) {
        Log.error ("Can't get isConstant for: " + member, e);
        return false;
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="439" endline="441">
public static WarnLevel getCheckUseFinalField () {
    return WarnLevel.valueOf (getString (ANALYZE_FINAL_FIELD));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="446" endline="448">
public static boolean isCheckUseFinalField () {
    return WarnLevel.IGNORE != getCheckUseFinalField ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="454" endline="456">
public static WarnLevel getCheckUseFinalMethod () {
    return WarnLevel.valueOf (getString (ANALYZE_FINAL_METHOD));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="461" endline="463">
public static boolean isCheckUseFinalMethod () {
    return WarnLevel.IGNORE != getCheckUseFinalMethod ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="465" endline="467">
public static String getReportFile () {
    return getStore ().getString (REPORT_FILE);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="469" endline="471">
public static boolean isCreateReportXML () {
    return getStore ().getBoolean (REPORT_CREATE_XML);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="473" endline="475">
public static LogLevel getLogLevel () {
    return LogLevel.valueOf (getString (LOG_LEVEL));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="477" endline="479">
public static boolean isLogToEclipse () {
    return getStore ().getBoolean (LOG_TO_ECLIPSE);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="481" endline="483">
public static String getModeName () {
    return getStore ().getString (MODE_NAME);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="488" endline="495">
public static boolean isWriteReportFile () {
    for (ReportExtension extension : ReportExtension.getAllExtensions ()) {
        if (isCreateReport (extension)) {
            return true;
        }
    }
    return isCreateReportXML ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="501" endline="503">
protected static IPreferenceStore getStore () {
    return UCDetectorPlugin.getDefault ().getPreferenceStore ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="509" endline="511">
public static String getString (String name) {
    return getStore ().getString (name);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="516" endline="525">
private static String [] getStrings (String name, boolean trim) {
    String [] strings = getStore ().getString (name).split (LIST_SEPARATOR);
    if (trim) {
        for (int i = 0;
        i < strings.length; i ++) {
            strings [i] = strings [i].trim ();
        }
    }
    return strings;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="531" endline="533">
public static void setValue (String name, String value) {
    getStore ().setValue (name, value);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="539" endline="553">
private static boolean isMatchFilter (String filterName, String name) {
    String [] filters = parseFilters (filterName);
    for (String regex : filters) {
        try {
            if (regex.length () > 0 && Pattern.matches (regex, name)) {
                return true;
            }
        } catch (PatternSyntaxException e) {
            Log.warn (e.getMessage ());
        }
    }
    return false;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="558" endline="565">
private static String [] parseFilters (String filterName) {
    String [] strings = getStrings (filterName, true);
    String [] filters = new String [strings.length];
    for (int i = 0;
    i < strings.length; i ++) {
        filters [i] = simpleRegexToJavaRegex (strings [i]);
    }
    return filters;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="567" endline="570">
private static String simpleRegexToJavaRegex (String simpleRegex) {
    String regex = simpleRegex.replaceAll ("\\*", ".*");
    return regex.replace ("?", ".{1}");
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="575" endline="578">
public static int getCycleDepth () {
    int cycleDepth = getStore ().getInt (CYCLE_DEPTH);
    return cycleDepth < CYCLE_DEPTH_MIN ? CYCLE_DEPTH_MIN : cycleDepth > CYCLE_DEPTH_MAX ? CYCLE_DEPTH_MAX : cycleDepth;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="580" endline="582">
public static String getReportStoreKey (ReportExtension extension) {
    return REPORT_CREATE + "." + extension.getId ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/Prefs.java" startline="584" endline="586">
public static boolean isCreateReport (ReportExtension extension) {
    return getStore ().getBoolean (getReportStoreKey (extension));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/ModesReader.java" startline="43" endline="88">
public static Map < String, String > loadModeFile (boolean isFile, String modeFileName) {
    Map < String, String > result = new HashMap < String, String > ();
    BufferedReader reader = null;
    try {
        InputStream inStream = getInputStream (isFile, modeFileName);
        reader = new BufferedReader (new InputStreamReader (inStream, UCDetectorPlugin.UTF_8));
        String line = null;
        boolean isInsideMultiLine = false;
        String key = null;
        String value = "";
        while ((line = reader.readLine ()) != null) {
            line = line.trim ();
            int indexEquals = line.indexOf ('=');
            boolean isCommentLine = line.startsWith ("#");
            if (isCommentLine || line.length () == 0) {
                continue;
            }
            boolean isMultiLine = line.endsWith (MULTILINE_END);
            line = line.substring (0, line.length () - (isMultiLine ? 1 : 0));
            if (isInsideMultiLine) {
                value += line;
                if (! isMultiLine && key != null) {
                    result.put (key.trim (), value.trim ());
                }
            } else {
                key = (indexEquals == - 1) ? line : line.substring (0, indexEquals);
                value = (indexEquals == - 1) ? "" : line.substring (indexEquals + 1);
                result.put (key.trim (), value.trim ());
            }
            isInsideMultiLine = isMultiLine;
        }
    } catch (IOException ex) {
        String message = NLS.bind (Messages.ModesPanel_CantSetPreferences, modeFileName);
        UCDetectorPlugin.logToEclipseLog (message, ex);
    } finally {
        UCDetectorPlugin.closeSave (reader);
    }
    return result;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/ModesReader.java" startline="90" endline="95">
private static InputStream getInputStream (boolean isFile, String modeFileName) throws FileNotFoundException {
    if (isFile) {
        return new FileInputStream (modeFileName);
    }
    return ModesReader.class.getResourceAsStream ("modes/" + modeFileName);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/ModesPanel.java" startline="54" endline="57">
String toStringLocalized () {
    return Messages.getString ("ModesPanel_mode_" + name (), name ()) + " [built-in]";
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/ModesPanel.java" startline="70" endline="85">
ModesPanel (UCDetectorPreferencePage page, Composite parentGroups) {
    this.page = page;
    this.parent = parentGroups;
    this.modesWriter = new ModesWriter (page.extendedPreferences);
    MODES_DIR.mkdirs ();
    Log.info ("modesDir is '%s'", MODES_DIR.getAbsolutePath ());
    Composite modesPanelComposite = UCDetectorPreferencePage.createComposite (parent, 5, 1, GridData.FILL_HORIZONTAL);
    Label label = new Label (modesPanelComposite, SWT.LEFT);
    label.setText (Messages.ModesPanel_ModeLabel);
    this.modesCombo = new Combo (modesPanelComposite, SWT.READ_ONLY);
    this.newButton = new Button (modesPanelComposite, SWT.PUSH);
    this.removeButton = new Button (modesPanelComposite, SWT.PUSH);
    this.renameButton = new Button (modesPanelComposite, SWT.PUSH);
    createButtonsDetails ();
    createModeComboDetails ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/ModesPanel.java" startline="87" endline="108">
private void createButtonsDetails () {
    newButton.setText (Messages.ModesPanel_ModeNew);
    removeButton.setText (Messages.ModesPanel_ModeRemove);
    renameButton.setText (Messages.ModesPanel_ModeRename);
    SelectionListener selectionListener = new SelectionAdapter () {
        @Override
        public void widgetSelected (SelectionEvent event) {
            if (event.widget == newButton) {
                addMode ();
            } else if (event.widget == removeButton) {
                removeMode ();
            } else if (event.widget == renameButton) {
                remameMode ();
            }

        }}

    ;
    newButton.addSelectionListener (selectionListener);
    removeButton.addSelectionListener (selectionListener);
    renameButton.addSelectionListener (selectionListener);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/ModesPanel.java" startline="93" endline="103">
public void widgetSelected (SelectionEvent event) {
    if (event.widget == newButton) {
        addMode ();
    } else if (event.widget == removeButton) {
        removeMode ();
    } else if (event.widget == renameButton) {
        remameMode ();
    }

}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/ModesPanel.java" startline="110" endline="142">
private void createModeComboDetails () {
    String [] modes = getModes ();
    getCombo ().setItems (modes);
    getCombo ().setText (Mode.Default.toStringLocalized ());
    getCombo ().setText (Prefs.getModeName ());
    getCombo ().setToolTipText (MODES_DIR.getAbsolutePath ());
    getCombo ().addSelectionListener (new SelectionAdapter () {
        @Override
        public void widgetSelected (SelectionEvent evt) {
            updateModeButtons ();
            int index = getCombo ().getSelectionIndex ();
            if (index == - 1) {
            } else if (index == Mode.Default.ordinal ()) {
                page.performDefaults ();
            } else if (index < Mode.values ().length) {
                Mode builtInMode = Mode.values () [index];
                String modesFileName = builtInMode + ModesWriter.MODES_FILE_TYPE;
                setPreferences (false, modesFileName);
            } else {
                setCustomPreferences ();
            }

        }}

    );
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/ModesPanel.java" startline="120" endline="140">
public void widgetSelected (SelectionEvent evt) {
    updateModeButtons ();
    int index = getCombo ().getSelectionIndex ();
    if (index == - 1) {
    } else if (index == Mode.Default.ordinal ()) {
        page.performDefaults ();
    } else if (index < Mode.values ().length) {
        Mode builtInMode = Mode.values () [index];
        String modesFileName = builtInMode + ModesWriter.MODES_FILE_TYPE;
        setPreferences (false, modesFileName);
    } else {
        setCustomPreferences ();
    }

}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/ModesPanel.java" startline="144" endline="149">
private String setCustomPreferences () {
    String customMode = getCombo ().getText ();
    String modesFileName = ModesWriter.getModesFile (customMode).getAbsolutePath ();
    setPreferences (true, modesFileName);
    return modesFileName;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/ModesPanel.java" startline="152" endline="168">
private static String [] getModes () {
    Set < String > result = new LinkedHashSet < String > ();
    for (Mode mode : Mode.values ()) {
        result.add (mode.toStringLocalized ());
    }
    List < String > modesFiles = new ArrayList < String > (Arrays.asList (MODES_DIR.list ()));
    Collections.sort (modesFiles, String.CASE_INSENSITIVE_ORDER);
    for (String modesFile : modesFiles) {
        if (modesFile.endsWith (ModesWriter.MODES_FILE_TYPE)) {
            result.add (modesFile.substring (0, modesFile.length () - ModesWriter.MODES_FILE_TYPE.length ()));
        }
    }
    if (Log.isDebug ()) {
        Log.debug ("Available modes are: %s", result);
    }
    return result.toArray (new String [result.size ()]);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/ModesPanel.java" startline="171" endline="178">
private void addMode () {
    String newName = "CopyOf_" + getActiveModeName ();
    InputDialog input = new InputDialog (parent.getShell (), Messages.ModesPanel_NewMode, Messages.ModesPanel_ModeName, newName, new ValidFileNameValidator ());
    if (input.open () == Window.OK) {
        addMode (input.getValue ());
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/ModesPanel.java" startline="181" endline="185">
private String getActiveModeName () {
    int index = getCombo ().getSelectionIndex ();
    boolean isBuiltIn = index != - 1 && index < Mode.values ().length;
    return (isBuiltIn ? Mode.values () [index].name () : getCombo ().getText ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/ModesPanel.java" startline="187" endline="199">
private void addMode (String newModeName) {
    page.performOk ();
    if (newModeName != null && newModeName.trim ().length () > 0) {
        Prefs.getStore ().setValue (Prefs.REPORT_DIR, ReportNameManager.getReportDir (false));
        modesWriter.saveMode (newModeName);
        Log.info ("Added new mode: %s", newModeName);
        getCombo ().setItems (getModes ());
        getCombo ().setText (newModeName);
        updateModeButtons ();
        setCustomPreferences ();
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/ModesPanel.java" startline="202" endline="209">
protected void createMyMode () {
    String version = Prefs.getStore ().getString (Prefs.PREFS_VERSION);
    if (version.length () == 0) {
        Log.info ("Adding mode: MyMode");
        addMode ("MyMode");
        Prefs.getStore ().setValue (Prefs.PREFS_VERSION, UCDetectorPlugin.getAboutUCDVersion ());
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/ModesPanel.java" startline="211" endline="215">
void saveMode () {
    if (getCombo ().getSelectionIndex () >= Mode.values ().length) {
        modesWriter.saveMode (getCombo ().getText ());
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/ModesPanel.java" startline="217" endline="231">
private void removeMode () {
    String modeToRemove = getCombo ().getText ();
    boolean doRemove = MessageDialog.openQuestion (parent.getShell (), Messages.ModesPanel_ModeRemove, Messages.ModesPanel_ModeRemoveQuestion + modeToRemove);
    if (! doRemove) {
        return;
    }
    File file = ModesWriter.getModesFile (modeToRemove);
    boolean deleteOk = file.delete ();
    Log.success (deleteOk, String.format ("Delete mode '%s' - file is %s", modeToRemove, file.getAbsolutePath ()));
    getCombo ().setItems (getModes ());
    getCombo ().setText (Mode.Default.toStringLocalized ());
    page.performDefaults ();
    updateModeButtons ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/ModesPanel.java" startline="233" endline="248">
private void remameMode () {
    String oldName = getActiveModeName ();
    InputDialog input = new InputDialog (parent.getShell (), Messages.ModesPanel_ModeRename, Messages.ModesPanel_ModeName, oldName, new ValidFileNameValidator ());
    if (input.open () == Window.CANCEL) {
        return;
    }
    String newName = input.getValue ();
    File oldModesFile = ModesWriter.getModesFile (oldName);
    File newModesFile = ModesWriter.getModesFile (newName);
    boolean renameOK = oldModesFile.renameTo (newModesFile);
    Log.success (renameOK, String.format ("Rename mode '%s' to '%s' - new file: %s", oldName, newName, newModesFile.getAbsolutePath ()));
    getCombo ().setItems (getModes ());
    getCombo ().setText (newName);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/ModesPanel.java" startline="251" endline="264">
protected void updateModeButtons () {
    int index = getCombo ().getSelectionIndex ();
    boolean isCustom = (index < 0 || index >= Mode.values ().length);
    removeButton.setEnabled (isCustom);
    renameButton.setEnabled (isCustom);
    for (Composite group : page.groups) {
        Control [] controls = group.getChildren ();
        for (Control control : controls) {
            control.setEnabled (isCustom);
        }
    }
    page.setMessage (isCustom ? null : Messages.ModesPanel_ModePressNewHint, IMessageProvider.WARNING);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/ModesPanel.java" startline="269" endline="282">
private void setPreferences (boolean isFile, String modesFilename) {
    PreferenceStore tempReplaceStore = new PreferenceStore ();
    Map < String, String > allPreferences = UCDetectorPlugin.getAllPreferences ();
    addAll (tempReplaceStore, allPreferences);
    Map < String, String > savedMode = ModesReader.loadModeFile (isFile, modesFilename);
    addAll (tempReplaceStore, savedMode);
    for (FieldEditor field : page.fields) {
        IPreferenceStore originalStore = field.getPreferenceStore ();
        field.setPreferenceStore (tempReplaceStore);
        field.load ();
        field.setPreferenceStore (originalStore);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/ModesPanel.java" startline="284" endline="289">
private static void addAll (PreferenceStore tempReplaceStore, Map < String, String > allPreferences) {
    Set < Entry < String, String > > entrySet = allPreferences.entrySet ();
    for (Entry < String, String > entry : entrySet) {
        tempReplaceStore.putValue (entry.getKey (), entry.getValue ());
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/ModesPanel.java" startline="291" endline="293">
Combo getCombo () {
    return modesCombo;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/ModesPanel.java" startline="296" endline="305">
public String isValid (String fileName) {
    String [] modes = getModes ();
    for (String mode : modes) {
        if (mode.equals (fileName)) {
            return Messages.ModesPanel_ModeAlreadyExists;
        }
    }
    boolean isValidFileName = ! fileName.matches (".*[\\\\/:*?|<>\"].*");
    return isValidFileName ? null : NLS.bind (Messages.ModesPanel_invalid_mode_name, fileName);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/UCDetectorPreferencePage.java" startline="83" endline="86">
public UCDetectorPreferencePage () {
    super (FieldEditorPreferencePage.GRID);
    this.setPreferenceStore (Prefs.getStore ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/UCDetectorPreferencePage.java" startline="88" endline="90">
public void init (IWorkbench workbench) {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/UCDetectorPreferencePage.java" startline="93" endline="106">
public void createFieldEditors () {
    Composite parentGroups = createComposite (getFieldEditorParent (), 1, 1, GridData.FILL_BOTH);
    setTitle ("UCDetector " + UCDetectorPlugin.getAboutUCDVersion ());
    modesPanel = new ModesPanel (this, parentGroups);
    tabFolder = new TabFolder (parentGroups, SWT.NONE);
    tabFolder.setLayoutData (createGridData (500, SWT.DEFAULT, SWT.FILL, SWT.CENTER, true, false));
    createTabIgnore ();
    createTabDetect ();
    createTabKeyworts ();
    createTabReport ();
    createTabOther ();
    modesPanel.updateModeButtons ();
    modesPanel.createMyMode ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/UCDetectorPreferencePage.java" startline="108" endline="114">
private void createTabIgnore () {
    Composite tab = createTab (Messages.PreferencePage_TabIgnore);
    createIgnoreResourcesGroup (tab);
    createIgnoreClassesGroup (tab);
    createIgnoreMarkedCode (tab);
    createIgnoreOthers (tab);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/UCDetectorPreferencePage.java" startline="116" endline="121">
private void createTabDetect () {
    Composite composite = createTab (Messages.PreferencePage_TabDetect);
    createDetectGroup (composite);
    createFileSearchGroup (composite);
    createCycleGroup (composite);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/UCDetectorPreferencePage.java" startline="123" endline="127">
private void createTabKeyworts () {
    Composite composite = createTab (Messages.PreferencePage_TabKeywords);
    createFinalGroup (composite);
    createVisibilityGroup (composite);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/UCDetectorPreferencePage.java" startline="129" endline="132">
private void createTabReport () {
    Composite composite = createTab (Messages.PreferencePage_TabReport);
    createReportGroup (composite);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/UCDetectorPreferencePage.java" startline="134" endline="137">
private void createTabOther () {
    Composite composite = createTab (Messages.PreferencePage_TabOther);
    createOtherGroup (composite);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/UCDetectorPreferencePage.java" startline="139" endline="145">
private void createIgnoreResourcesGroup (Composite parentGroups) {
    Composite spacer = createGroup (parentGroups, Messages.PreferencePage_IgnoreResourcesGroup);
    appendText (Prefs.FILTER_SOURCE_FOLDER, Messages.PreferencePage_IgnoreSourceFolderFilter, Messages.PreferencePage_IgnoreSourceFolderFilterToolTip, spacer);
    appendText (Prefs.FILTER_PACKAGE, Messages.PreferencePage_IgnorePackageFilter, Messages.PreferencePage_IgnorePackageFilterToolTip, spacer);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/UCDetectorPreferencePage.java" startline="147" endline="159">
private void createIgnoreClassesGroup (Composite parentGroups) {
    Composite spacer = createGroup (parentGroups, Messages.PreferencePage_IgnoreClassesGroup);
    appendText (Prefs.FILTER_CLASS, Messages.PreferencePage_IgnoreClassFilter, Messages.PreferencePage_IgnoreClassFilterToolTip, spacer);
    appendText (Prefs.FILTER_IMPLEMENTS, Messages.PreferencePage_IgnoreImplements, Messages.PreferencePage_IgnoreImplementsToolTip, spacer);
    appendText (Prefs.FILTER_CONTAIN_STRING, Messages.PreferencePage_IgnoreContainString, Messages.PreferencePage_IgnoreContainStringToolTip, spacer);
    appendBool (Prefs.FILTER_CLASS_WITH_MAIN_METHOD, Messages.PreferencePage_FilterClassWithMainMethod, Messages.PreferencePage_FilterClassWithMainMethodToolTip, spacer, 2);
    appendBool (Prefs.IGNORE_DERIVED, Messages.PreferencePage_IgnoreDerived, Messages.PreferencePage_IgnoreDerivedToolTip, spacer, 2);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/UCDetectorPreferencePage.java" startline="161" endline="169">
private void createIgnoreMarkedCode (Composite parentGroups) {
    Composite spacer = createGroup (parentGroups, Messages.PreferencePage_IgnoreMarkedCodeGroup);
    appendText (Prefs.FILTER_ANNOATIONS, Messages.PreferencePage_IgnoreAnnotationsFilter, Messages.PreferencePage_IgnoreAnnotationsFilterToolTip, spacer);
    appendBool (Prefs.IGNORE_DEPRECATED, Messages.PreferencePage_IgnoreDeprecated, Messages.PreferencePage_IgnoreDeprecatedToolTip, spacer, 2);
    appendBool (Prefs.IGNORE_NO_UCD, Messages.PreferencePage_IgnoreNoUcd, Messages.PreferencePage_IgnoreNoUcdToolTip, spacer, 2);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/UCDetectorPreferencePage.java" startline="171" endline="179">
private void createIgnoreOthers (Composite parentGroups) {
    Composite spacer = createGroup (parentGroups, Messages.PreferencePage_IgnoreOthersGroup);
    appendText (Prefs.FILTER_FIELD, Messages.PreferencePage_IgnoreFieldFilter, Messages.PreferencePage_IgnoreFieldFilterToolTip, spacer);
    appendText (Prefs.FILTER_METHOD, Messages.PreferencePage_IgnoreMethodFilter, Messages.PreferencePage_IgnoreMethodFilterToolTip, spacer);
    appendBool (Prefs.FILTER_BEAN_METHOD, Messages.PreferencePage_IgnoreBeanMethods, Messages.PreferencePage_IgnoreBeanMethodsToolTip, spacer, 2);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/UCDetectorPreferencePage.java" startline="185" endline="195">
private void createDetectGroup (Composite parentGroups) {
    Composite spacer = createGroup (parentGroups, Messages.PreferencePage_GroupDetect);
    IntegerFieldEditor warnLimit = new IntegerFieldEditor (Prefs.WARN_LIMIT, Messages.PreferencePage_WarnLimit, spacer);
    warnLimit.getLabelControl (spacer).setToolTipText (Messages.PreferencePage_WarnLimitToolTip);
    this.addField (warnLimit);
    appendCombo (Prefs.ANALYZE_CLASSES, Messages.PreferencePage_Classes, spacer);
    appendCombo (Prefs.ANALYZE_MEHTODS, Messages.PreferencePage_Methods, spacer);
    appendCombo (Prefs.ANALYZE_FIELDS, Messages.PreferencePage_Fields, spacer);
    appendBool (Prefs.DETECT_TEST_ONLY, Messages.PreferencePage_DetectTestOnly, Messages.PreferencePage_DetectTestOnlyToolTip, spacer, 2);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/UCDetectorPreferencePage.java" startline="201" endline="222">
private void createFileSearchGroup (Composite parentGroups) {
    Composite spacer = createGroup (parentGroups, Messages.PreferencePage_GroupFileSearch);
    SynchBooleanFieldEditor analyzeLiteralsCheck = new SynchBooleanFieldEditor (spacer);
    this.addField (analyzeLiteralsCheck);
    BooleanFieldEditor checkFullClassName = new BooleanFieldEditor (Prefs.ANALYZE_CHECK_FULL_CLASS_NAME, Messages.PreferencePage_CheckFullClassName, BooleanFieldEditor.SEPARATE_LABEL, spacer);
    Label label = checkFullClassName.getLabelControl (spacer);
    label.setToolTipText (Messages.PreferencePage_CheckFullClassNameToolTip);
    this.addField (checkFullClassName);
    BooleanFieldEditor checkSimpleClassName = new BooleanFieldEditor (Prefs.ANALYZE_CHECK_SIMPLE_CLASS_NAME, Messages.PreferencePage_CheckSimleClassName, BooleanFieldEditor.SEPARATE_LABEL, spacer);
    label = checkSimpleClassName.getLabelControl (spacer);
    label.setToolTipText (Messages.PreferencePage_CheckSimpleClassNameToolTip);
    this.addField (checkSimpleClassName);
    StringFieldEditor analyzeLiterals = appendText (Prefs.ANALYZE_LITERALS, Messages.PreferencePage_Literals, Messages.PreferencePage_LiteralsToolTip, spacer);
    analyzeLiteralsCheck.setAnalyzeLiterals (analyzeLiterals);
    analyzeLiteralsCheck.setCheckFullClassName (checkFullClassName, checkSimpleClassName);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/UCDetectorPreferencePage.java" startline="224" endline="232">
private void createCycleGroup (Composite parentGroups) {
    Composite spacer = createGroup (parentGroups, Messages.PreferencePage_GroupCycles);
    IntegerFieldEditor cycleDepth = new IntegerFieldEditor (Prefs.CYCLE_DEPTH, Messages.PreferencePage_MaxCycleSize, spacer, 1);
    cycleDepth.setValidRange (Prefs.CYCLE_DEPTH_MIN, Prefs.CYCLE_DEPTH_MAX);
    cycleDepth.setEmptyStringAllowed (false);
    cycleDepth.getLabelControl (spacer).setToolTipText (Messages.PreferencePage_MaxCycleSizeToolTip);
    this.addField (cycleDepth);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/UCDetectorPreferencePage.java" startline="234" endline="238">
private void createFinalGroup (Composite parentGroups) {
    Composite spacer = createGroup (parentGroups, Messages.PreferencePage_GroupFinal);
    appendCombo (Prefs.ANALYZE_FINAL_METHOD, Messages.PreferencePage_CheckFinalMethod, spacer);
    appendCombo (Prefs.ANALYZE_FINAL_FIELD, Messages.PreferencePage_CheckFinalField, spacer);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/UCDetectorPreferencePage.java" startline="240" endline="267">
private void createVisibilityGroup (Composite parentGroups) {
    Composite spacer = createGroup (parentGroups, Messages.PreferencePage_GroupVisibility);
    addChangeAllVisibiliyCombo (spacer);
    addLineHack (spacer);
    Label visibilityWarnLabel = new Label (spacer, SWT.LEFT);
    visibilityWarnLabel.setFont (new Font (spacer.getDisplay (), "Arial", 10, SWT.BOLD));
    visibilityWarnLabel.setText (Messages.PreferencePage_ReduceVisibiltyWarning);
    GridData gd = new GridData (GridData.FILL_HORIZONTAL);
    gd.horizontalSpan = 2;
    visibilityWarnLabel.setLayoutData (gd);
    appendCombo (Prefs.ANALYZE_VISIBILITY_PROTECTED_CLASSES, Messages.PreferencePage_CheckProtectedClasses, spacer);
    appendCombo (Prefs.ANALYZE_VISIBILITY_PRIVATE_CLASSES, Messages.PreferencePage_CheckPrivateClasses, spacer);
    addLineHack (spacer);
    appendCombo (Prefs.ANALYZE_VISIBILITY_PROTECTED_METHODS, Messages.PreferencePage_CheckProtectedMethods, spacer);
    appendCombo (Prefs.ANALYZE_VISIBILITY_PRIVATE_METHODS, Messages.PreferencePage_CheckPrivateMethods, spacer);
    addLineHack (spacer);
    appendCombo (Prefs.ANALYZE_VISIBILITY_PROTECTED_FIELDS, Messages.PreferencePage_CheckProtectedFields, spacer);
    appendCombo (Prefs.ANALYZE_VISIBILITY_PRIVATE_FIELDS, Messages.PreferencePage_CheckPrivateFields, spacer);
    appendBool (Prefs.IGNORE_SYNTHETIC_ACCESS_EMULATION, Messages.PreferencePage_ignoreSyntheticAccessEmulation, Messages.PreferencePage_ignoreSyntheticAccessEmulationTooltip, spacer, 2);
    addLineHack (spacer);
    appendCombo (Prefs.ANALYZE_VISIBILITY_PROTECTED_CONSTANTS, Messages.PreferencePage_CheckProtectedConstants, spacer);
    appendCombo (Prefs.ANALYZE_VISIBILITY_PRIVATE_CONSTANTS, Messages.PreferencePage_CheckPrivateConstants, spacer);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/UCDetectorPreferencePage.java" startline="269" endline="299">
private void createReportGroup (Composite parentGroups) {
    Composite spacer = createGroup (parentGroups, Messages.PreferencePage_GroupReports);
    appendBool (Prefs.REPORT_CREATE_XML, Messages.PreferencePage_CreateXmlReport, null, spacer, 3);
    for (ReportExtension extension : ReportExtension.getAllExtensions ()) {
        String text = String.format ("Create %s report", extension.getDescription ());
        appendBool (Prefs.getReportStoreKey (extension), text, null, spacer, 3);
    }
    appendText (Prefs.REPORT_FILE, Messages.PreferencePage_ReportFile, Messages.PreferencePage_ReportFileToolTip, spacer, 3);
    DirectoryFieldEditor path = new DirectoryFieldEditor (Prefs.REPORT_DIR, Messages.PreferencePage_ReportDir, spacer);
    path.getLabelControl (spacer).setToolTipText (Messages.PreferencePage_ReportDirToolTip);
    this.addField (path);
    addLineHack (spacer);
    Button ok = new Button (spacer, SWT.PUSH);
    ok.setText (Messages.PreferencePage_BrowseReportsDir);
    ok.setToolTipText (Messages.PreferencePage_BrowseReportsDirToolTip);
    ok.addSelectionListener (new SelectionAdapter () {
        @Override
        public void widgetSelected (SelectionEvent e) {
            Program p = Program.findProgram ("html");
            p = (p == null ? Program.findProgram ("htm") : p);
            if (p != null) {
                p.execute (ReportNameManager.getReportDir (true));
            }
        }}

    );
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/UCDetectorPreferencePage.java" startline="290" endline="297">
public void widgetSelected (SelectionEvent e) {
    Program p = Program.findProgram ("html");
    p = (p == null ? Program.findProgram ("htm") : p);
    if (p != null) {
        p.execute (ReportNameManager.getReportDir (true));
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/UCDetectorPreferencePage.java" startline="301" endline="306">
private void createOtherGroup (Composite parentGroups) {
    Composite spacer = createGroup (parentGroups, Messages.PreferencePage_GroupLogging);
    ComboFieldEditor combo = new ComboFieldEditor (Prefs.LOG_LEVEL, Messages.PreferencePage_LogLevel, LOG_LEVELS, spacer);
    addField (combo);
    appendBool (Prefs.LOG_TO_ECLIPSE, Messages.PreferencePage_LogToEclipse, null, spacer, 2);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/UCDetectorPreferencePage.java" startline="312" endline="335">
private void addChangeAllVisibiliyCombo (Composite parent) {
    Label label = new Label (parent, SWT.LEFT);
    label.setText (Messages.PreferencePage_ChangeVisibilityCombos);
    changeVisibiliyCombo = new Combo (parent, SWT.READ_ONLY);
    changeVisibiliyCombo.setItems (new String [] {WarnLevel.ERROR.toStringLocalized (), WarnLevel.WARNING.toStringLocalized (), WarnLevel.IGNORE.toStringLocalized ()});
    changeVisibiliyCombo.setText (WarnLevel.WARNING.toStringLocalized ());
    changeVisibiliyCombo.addSelectionListener (new SelectionAdapter () {
        @Override
        public void widgetSelected (SelectionEvent evt) {
            int selectionIndex = changeVisibiliyCombo.getSelectionIndex ();
            if (selectionIndex != - 1) {
                for (FieldEditor field : fields) {
                    if (field.getPreferenceName ().startsWith (Prefs.ANALYZE_VISIBILITY_PREFIX)) {
                        String comboValue = WarnLevel.values () [selectionIndex].name ();
                        field.getPreferenceStore ().setValue (field.getPreferenceName (), comboValue);
                        field.load ();
                    }
                }
            }
        }}

    );
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/UCDetectorPreferencePage.java" startline="321" endline="333">
public void widgetSelected (SelectionEvent evt) {
    int selectionIndex = changeVisibiliyCombo.getSelectionIndex ();
    if (selectionIndex != - 1) {
        for (FieldEditor field : fields) {
            if (field.getPreferenceName ().startsWith (Prefs.ANALYZE_VISIBILITY_PREFIX)) {
                String comboValue = WarnLevel.values () [selectionIndex].name ();
                field.getPreferenceStore ().setValue (field.getPreferenceName (), comboValue);
                field.load ();
            }
        }
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/UCDetectorPreferencePage.java" startline="337" endline="344">
private Composite createTab (String tabText) {
    addTab (tabText);
    Composite composite = createComposite (tabFolder, 1, 1, GridData.FILL_HORIZONTAL);
    TabItem tabMain = new TabItem (tabFolder, SWT.NONE);
    tabMain.setText (tabText);
    tabMain.setControl (composite);
    return composite;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/UCDetectorPreferencePage.java" startline="346" endline="351">
private static void addLineHack (Composite spacer) {
    Label label = new Label (spacer, SWT.NONE);
    GridData gd = new GridData (GridData.HORIZONTAL_ALIGN_FILL);
    gd.horizontalSpan = 3;
    label.setLayoutData (gd);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/UCDetectorPreferencePage.java" startline="355" endline="357">
protected void adjustGridLayout () {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/UCDetectorPreferencePage.java" startline="359" endline="361">
private void addTab (String tab) {
    extendedPreferences.add (TAB_START + tab);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/UCDetectorPreferencePage.java" startline="363" endline="365">
private void addGroup (String group) {
    extendedPreferences.add (GROUP_START + group.replace ("&", ""));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/UCDetectorPreferencePage.java" startline="368" endline="372">
protected void addField (FieldEditor editor) {
    fields.add (editor);
    extendedPreferences.add (editor.getPreferenceName ());
    super.addField (editor);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/UCDetectorPreferencePage.java" startline="383" endline="388">
SynchBooleanFieldEditor (Composite parent) {
    super (Prefs.ANALYZE_LITERALS_CHECK, Messages.PreferencePage_LiteralsCheck, parent);
    this.parent = parent;
    check = getChangeControl (parent);
    check.setToolTipText (Messages.PreferencePage_LiteralsCheckToolTip);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/UCDetectorPreferencePage.java" startline="391" endline="393">
void setAnalyzeLiterals (StringFieldEditor analyzeLiterals) {
    this.analyzeLiterals = analyzeLiterals;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/UCDetectorPreferencePage.java" startline="395" endline="397">
void setCheckFullClassName (BooleanFieldEditor...checkXClassNames) {
    this.checkXClassNames = checkXClassNames;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/UCDetectorPreferencePage.java" startline="401" endline="403">
public int getNumberOfControls () {
    return 2;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/UCDetectorPreferencePage.java" startline="406" endline="409">
protected void fireStateChanged (String property, boolean oldValue, boolean newValue) {
    super.fireStateChanged (property, oldValue, newValue);
    synchronizeAnalyzeLiteralsCheck ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/UCDetectorPreferencePage.java" startline="412" endline="414">
protected void refreshValidState () {
    synchronizeAnalyzeLiteralsCheck ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/UCDetectorPreferencePage.java" startline="416" endline="423">
private void synchronizeAnalyzeLiteralsCheck () {
    if (check.isEnabled ()) {
        analyzeLiterals.setEnabled (getBooleanValue (), parent);
        for (BooleanFieldEditor checkXClassName : checkXClassNames) {
            checkXClassName.setEnabled (getBooleanValue (), parent);
        }
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/UCDetectorPreferencePage.java" startline="426" endline="434">
private void appendCombo (String name, String label, Composite parent) {
    ComboFieldEditor combo = new ComboFieldEditor (name, label, WARN_LEVELS, parent);
    combo.fillIntoGrid (parent, 2);
    combo.getLabelControl (parent).setToolTipText (Messages.PreferencePage_ComboToolTip);
    Label labelControl = combo.getLabelControl (parent);
    GridData gd = new GridData (GridData.FILL_HORIZONTAL);
    labelControl.setLayoutData (gd);
    addField (combo);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/UCDetectorPreferencePage.java" startline="436" endline="438">
private StringFieldEditor appendText (String name, String label, String toolTip, Composite parent) {
    return appendText (name, label, toolTip, parent, 2);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/UCDetectorPreferencePage.java" startline="440" endline="446">
private StringFieldEditor appendText (String name, String label, String toolTip, Composite parent, int columns) {
    StringFieldEditor text = new StringFieldEditor (name, label, parent);
    text.fillIntoGrid (parent, columns);
    text.getLabelControl (parent).setToolTipText (toolTip);
    addField (text);
    return text;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/UCDetectorPreferencePage.java" startline="448" endline="453">
private void appendBool (String name, String text, String tooltip, Composite parent, int columns) {
    BooleanFieldEditor bool = new BooleanFieldEditor (name, text, BooleanFieldEditor.SEPARATE_LABEL, parent);
    bool.fillIntoGrid (parent, columns);
    bool.getLabelControl (parent).setToolTipText (tooltip);
    this.addField (bool);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/UCDetectorPreferencePage.java" startline="460" endline="463">
protected Control createContents (Composite parent) {
    PlatformUI.getWorkbench ().getHelpSystem ().setHelp (parent, UCDetectorPlugin.HELP_ID_PREFERENCES);
    return super.createContents (parent);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/UCDetectorPreferencePage.java" startline="466" endline="478">
private Composite createGroup (Composite parent, String text) {
    addGroup (text);
    int columns = 1, hspan = 1, fill = GridData.FILL_HORIZONTAL;
    Group g = new Group (parent, SWT.NONE);
    g.setLayout (new GridLayout (3, false));
    g.setText (text);
    GridData gd = new GridData (fill);
    gd.horizontalSpan = hspan;
    g.setLayoutData (gd);
    Composite group = createComposite (g, columns, 1, fill);
    groups.add (group);
    return group;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/UCDetectorPreferencePage.java" startline="481" endline="489">
protected static Composite createComposite (Composite parent, int columns, int hspan, int fill) {
    Composite g = new Composite (parent, SWT.NONE);
    g.setLayout (new GridLayout (columns, false));
    g.setFont (parent.getFont ());
    GridData gd = new GridData (fill);
    gd.horizontalSpan = hspan;
    g.setLayoutData (gd);
    return g;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/UCDetectorPreferencePage.java" startline="491" endline="496">
private static GridData createGridData (int width, int height, int hAlign, int vAlign, boolean hGrab, boolean vGrab) {
    final GridData gd = new GridData (hAlign, vAlign, hGrab, vGrab);
    gd.widthHint = width;
    gd.heightHint = height;
    return gd;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/UCDetectorPreferencePage.java" startline="503" endline="511">
public boolean performOk () {
    boolean result = super.performOk ();
    modesPanel.saveMode ();
    getPreferenceStore ().setValue (Prefs.MODE_NAME, modesPanel.getCombo ().getText ());
    if (Log.isDebug ()) {
        Log.debug ("New preferences: " + UCDetectorPlugin.getPreferencesAsString ());
    }
    return result;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/UCDetectorPreferencePage.java" startline="514" endline="519">
protected void performDefaults () {
    super.performDefaults ();
    modesPanel.getCombo ().setText (ModesPanel.Mode.Default.toStringLocalized ());
    modesPanel.updateModeButtons ();
    super.performOk ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/WarnLevel.java" startline="34" endline="36">
private WarnLevel () {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/preferences/WarnLevel.java" startline="38" endline="47">
String toStringLocalized () {
    switch (this) {
        case ERROR :
            return Messages.WarnLevel_Error;
        case WARNING :
            return Messages.WarnLevel_Warning;
        default :
            return Messages.WarnLevel_Ignore;
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/Messages.java" startline="35" endline="44">
public static String getString (String name, String defaultString) {
    try {
        Field field = Messages.class.getDeclaredField (name);
        return (String) field.get (null);
    } catch (Exception ex) {
        return defaultString;
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/Messages.java" startline="46" endline="48">
private Messages () {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDApplication.java" startline="34" endline="47">
public Object start (IApplicationContext context) throws Exception {
    Log.info ("Starting UCDHeadless as an application");
    try {
        startImpl ();
    } catch (Throwable ex) {
        Log.error ("Error running UCDApplication: " + ex, ex);
    } finally {
        Log.info ("Finished UCDHeadless as an application");
    }
    return IApplication.EXIT_OK;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDApplication.java" startline="49" endline="54">
private void startImpl () throws FileNotFoundException, CoreException {
    UCDHeadless ucdHeadless = new UCDHeadless (getOptionsFileName ());
    systemInReader = new SystemInReader (ucdHeadless);
    systemInReader.start ();
    ucdHeadless.iterate ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDApplication.java" startline="56" endline="64">
private static String getOptionsFileName () {
    String [] args = Platform.getCommandLineArgs ();
    for (int i = 0;
    i < args.length; i ++) {
        if ("-ucd.options".equals (args [i]) && i < args.length - 1) {
            return args [i + 1];
        }
    }
    return null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDApplication.java" startline="66" endline="71">
public void stop () {
    Log.info ("Stopping UCDHeadless as an application");
    if (systemInReader != null) {
        systemInReader.interrupt ();
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDApplication.java" startline="78" endline="80">
public SystemInReader (UCDHeadless ucdHeadless) {
    this.ucdHeadless = ucdHeadless;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/UCDApplication.java" startline="83" endline="110">
public void run () {
    System.out.println ("SystemInReader: Start");
    Log.info ("------------------------------------");
    Log.info ("Type 'exit' to to cancel UCDHeadless");
    Log.info ("------------------------------------");
    BufferedReader reader = new BufferedReader (new InputStreamReader (System.in));
    String line;
    try {
        while ((line = reader.readLine ()) != null) {
            Log.debug ("SystemInReader LINE: " + line);
            if ("exit".equals (line)) {
                Log.debug ("SystemInReader: exit called!");
                if (ucdHeadless.ucdMonitor != null) {
                    ucdHeadless.ucdMonitor.setCanceled (true);
                }
                break;
            }
            if (isInterrupted ()) {
                Log.debug ("SystemInReader: Interrupted");
                break;
            }
        }
    } catch (Exception ex) {
        Log.error ("Exception reading System.in", ex);
    }
    Log.debug ("SystemInReader: End");
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/Log.java" startline="43" endline="54">
private static void initLog () {
    if (isLogInited) {
        return;
    }
    isLogInited = true;
    setActiveLogLevel (Prefs.getLogLevel ());
    setLogToEclipse (Prefs.isLogToEclipse ());
    logLevelOptionsFile = getLogLevelOption ("org.ucdetector/logLevel");
    if (logLevelOptionsFile != null) {
        warn ("Eclipse .options file overrides preferences log level. Log level is: " + logLevelOptionsFile);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/Log.java" startline="57" endline="61">
public static void debug (String format, Object...args) {
    if (isDebug ()) {
        log (LogLevel.DEBUG, args.length == 0 ? format : String.format (format, args));
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/Log.java" startline="64" endline="68">
public static void info (String format, Object...args) {
    if (isInfo ()) {
        log (LogLevel.INFO, args.length == 0 ? format : String.format (format, args));
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/Log.java" startline="71" endline="73">
public static void warn (String format, Object...args) {
    log (LogLevel.WARN, args.length == 0 ? format : String.format (format, args));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/Log.java" startline="76" endline="78">
public static void error (String message) {
    logImpl (LogLevel.ERROR, message, null);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/Log.java" startline="80" endline="82">
public static void error (String message, Throwable ex) {
    logImpl (LogLevel.ERROR, message, ex);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/Log.java" startline="84" endline="86">
public static void error (Throwable ex, String format, Object...args) {
    logImpl (LogLevel.ERROR, args.length == 0 ? format : String.format (format, args), ex);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/Log.java" startline="89" endline="91">
public static void success (boolean success, String message) {
    log (success ? LogLevel.INFO : LogLevel.WARN, success ? "OK: " : "FAIL: " + message);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/Log.java" startline="94" endline="96">
public static void log (LogLevel level, String message) {
    logImpl (level, message, null);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/Log.java" startline="99" endline="109">
public static void status (IStatus status) {
    if (status.getSeverity () == IStatus.ERROR) {
        error (status.getMessage (), status.getException ());
    } else if (status.getSeverity () == IStatus.WARNING) {
        warn (status.getMessage ());
    } else {
        info (status.getMessage ());
    }

}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/Log.java" startline="115" endline="126">
private static void logImpl (LogLevel level, String message, Throwable ex) {
    initLog ();
    if (level.ordinal () < getActiveLogLevel ().ordinal ()) {
        return;
    }
    boolean isWarn = level.ordinal () > LogLevel.INFO.ordinal ();
    String formattedMessage = String.format ("%-5s: %s", level, message);
    logImplStream (formattedMessage, ex, isWarn);
    if (! UCDetectorPlugin.isHeadlessMode () && logToEclipse) {
        UCDetectorConsole.log (isWarn, formattedMessage, ex);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/Log.java" startline="128" endline="136">
private static void logImplStream (String message, Throwable ex, boolean isWarn) {
    PrintStream stream = isWarn ? System.err : System.out;
    if (message != null) {
        stream.println (message);
    }
    if (ex != null) {
        ex.printStackTrace (stream);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/Log.java" startline="142" endline="145">
public static boolean isDebugOption (String key) {
    String option = Platform.getDebugOption (key);
    return "true".equalsIgnoreCase (option);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/Log.java" startline="147" endline="155">
private static LogLevel getLogLevelOption (String key) {
    String option = Platform.getDebugOption (key);
    for (LogLevel logLevel : LogLevel.values ()) {
        if (logLevel.toString ().equals (option)) {
            return logLevel;
        }
    }
    return null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/Log.java" startline="157" endline="159">
public static boolean isDebug () {
    return (getActiveLogLevel () == LogLevel.DEBUG);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/Log.java" startline="161" endline="163">
public static boolean isInfo () {
    return getActiveLogLevel () == LogLevel.DEBUG || getActiveLogLevel () == LogLevel.INFO;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/Log.java" startline="167" endline="170">
protected static void setActiveLogLevel (LogLevel logLevel) {
    Log.activeLogLevel = logLevel;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/Log.java" startline="172" endline="174">
protected static LogLevel getActiveLogLevel () {
    return logLevelOptionsFile == null ? activeLogLevel : logLevelOptionsFile;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/main/org/ucdetector/Log.java" startline="178" endline="181">
static void setLogToEclipse (boolean log) {
    Log.logToEclipse = log;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/TypeAndMatches.java" startline="46" endline="51">
TypeAndMatches (IType root) {
    if (root == null) {
        throw new IllegalArgumentException ("root may not be null");
    }
    this.root = root;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/TypeAndMatches.java" startline="53" endline="78">
void addMatch (SearchMatch match) {
    IJavaElement matchElement = (IJavaElement) match.getElement ();
    IType matchtedType = JavaElementUtil.getTypeFor (matchElement, false);
    if (matchtedType.equals (this.root)) {
        return;
    }
    List < CycleMember > cycleElementList = getOrCreateCycleElementList (matchtedType);
    CycleMember cycleMember = getOrCreateCycleElement (matchElement, cycleElementList);
    int lineNr;
    try {
        lineNr = lineManger.getLine (matchtedType, match.getOffset ());
    } catch (CoreException e) {
        Log.error ("Can't get line for matchtedType: " + JavaElementUtil.getElementName (matchtedType), e);
        return;
    }
    int offset = match.getOffset ();
    int length = match.getLength ();
    String codeLine = lineManger.getPieceOfCode (matchElement, offset);
    List < CycleRegion > cycleRegions = cycleMember.getChildren ();
    CycleRegion cycleRegion = new CycleRegion (cycleMember, offset, length, lineNr, codeLine);
    cycleRegions.add (cycleRegion);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/TypeAndMatches.java" startline="80" endline="87">
private List < CycleMember > getOrCreateCycleElementList (IType matchtedType) {
    List < CycleMember > cycleElementList = referencesMap.get (matchtedType);
    if (cycleElementList == null) {
        cycleElementList = new ArrayList < CycleMember > ();
        this.referencesMap.put (matchtedType, cycleElementList);
    }
    return cycleElementList;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/TypeAndMatches.java" startline="89" endline="102">
private static CycleMember getOrCreateCycleElement (IJavaElement matchElement, List < CycleMember > cycleElementList) {
    CycleMember cycleMember = null;
    for (CycleMember searchCycleElement : cycleElementList) {
        if (searchCycleElement.getMatch ().equals (matchElement)) {
            cycleMember = searchCycleElement;
            break;
        }
    }
    if (cycleMember == null) {
        cycleMember = new CycleMember (matchElement);
        cycleElementList.add (cycleMember);
    }
    return cycleMember;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/TypeAndMatches.java" startline="104" endline="108">
CycleType createCycleClass (IType forMatchTarget) {
    List < CycleMember > cycleMembers = this.referencesMap.get (forMatchTarget);
    CycleType cycleType = new CycleType (root, cycleMembers);
    return cycleType;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/TypeAndMatches.java" startline="110" endline="112">
IType getRoot () {
    return root;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/TypeAndMatches.java" startline="114" endline="116">
Set < IType > getTypeSearchMatches () {
    return this.referencesMap.keySet ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/TypeAndMatches.java" startline="119" endline="133">
public String toString () {
    StringBuilder sb = new StringBuilder ();
    sb.append (root.getElementName ()).append (" (root)").append ('\n');
    Set < Entry < IType, List < CycleMember > > > entrySet = referencesMap.entrySet ();
    for (Entry < IType, List < CycleMember > > entry : entrySet) {
        sb.append ("  |-").append (entry.getKey ().getElementName ());
        sb.append (" (ref found)").append ('\n');
        List < CycleMember > value = entry.getValue ();
        for (CycleMember cycleMember : value) {
            sb.append ("    |-").append (cycleMember).append ('\n');
        }
    }
    return sb.toString ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleView.java" startline="97" endline="99">
public CycleView () {
    INSTANCE = this;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleView.java" startline="106" endline="131">
public void createPartControl (Composite parent) {
    Composite composite = new Composite (parent, SWT.NONE);
    composite.setLayoutData (new GridData (GridData.FILL_BOTH));
    GridLayout gridLayout = new GridLayout (1, false);
    composite.setLayout (gridLayout);
    label = new Label (composite, SWT.NONE);
    label.setText (Messages.CycleView_run_ucd_for_results);
    label.setLayoutData (new GridData (GridData.FILL_HORIZONTAL));
    viewer = new TreeViewer (composite, SWT.MULTI | SWT.H_SCROLL | SWT.V_SCROLL | SWT.BORDER);
    tree = viewer.getTree ();
    tree.setLayoutData (new GridData (GridData.FILL_BOTH));
    clipboard = new Clipboard (tree.getDisplay ());
    viewer.setContentProvider (new ViewContentProvider ());
    viewer.setLabelProvider (new ViewLabelProvider ());
    viewer.setInput (getViewSite ());
    PlatformUI.getWorkbench ().getHelpSystem ().setHelp (viewer.getControl (), UCDetectorPlugin.HELP_ID);
    makeActions ();
    hookContextMenu ();
    hookDoubleClickAction ();
    contributeToActionBars ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleView.java" startline="133" endline="137">
private void contributeToActionBars () {
    IActionBars bars = getViewSite ().getActionBars ();
    fillLocalToolBar (bars.getToolBarManager ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleView.java" startline="139" endline="149">
private void fillLocalToolBar (IToolBarManager manager) {
    manager.add (showNextResultAction);
    manager.add (showPreviousResultAction);
    manager.add (new Separator ());
    manager.add (removeSelectedMatches);
    manager.add (removeAllMatches);
    manager.add (new Separator ());
    manager.add (expandAllAction);
    manager.add (collapseAllAction);
    manager.add (new Separator ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleView.java" startline="151" endline="174">
private void fillContextMenu (IMenuManager manager) {
    Object first = getFirstSelectedElement ();
    if (first != null) {
        if (! (first instanceof SearchResult)) {
            manager.add (openAction);
        }
        if (first instanceof Cycle) {
            manager.add (rotateAction);
        }
        manager.add (copyAction);
        if (first instanceof Cycle || first instanceof SearchResult) {
            manager.add (removeSelectedMatches);
        }
        manager.add (refreshAction);
        manager.add (expandAllAction);
        manager.add (collapseAllAction);
        manager.add (new Separator ());
    }
    manager.add (new Separator (IWorkbenchActionConstants.MB_ADDITIONS));
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleView.java" startline="176" endline="187">
private void hookContextMenu () {
    MenuManager menuMgr = new MenuManager ("#PopupMenu");
    menuMgr.setRemoveAllWhenShown (true);
    menuMgr.addMenuListener (new IMenuListener () {
        public void menuAboutToShow (IMenuManager manager) {
            CycleView.this.fillContextMenu (manager);
        }}

    );
    Menu menu = menuMgr.createContextMenu (viewer.getControl ());
    viewer.getControl ().setMenu (menu);
    getSite ().registerContextMenu (menuMgr, viewer);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleView.java" startline="180" endline="182">
public void menuAboutToShow (IMenuManager manager) {
    CycleView.this.fillContextMenu (manager);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleView.java" startline="189" endline="195">
private void hookDoubleClickAction () {
    viewer.addDoubleClickListener (new IDoubleClickListener () {
        public void doubleClick (DoubleClickEvent event) {
            openAction.run ();
        }}

    );
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleView.java" startline="191" endline="193">
public void doubleClick (DoubleClickEvent event) {
    openAction.run ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleView.java" startline="197" endline="363">
private void makeActions () {
    refreshAction = new Action () {
        @Override
        public void run () {
            refresh ();
        }}

    ;
    refreshAction.setText (Messages.CycleView_popup_refresh);
    ISharedImages sharedImages = PlatformUI.getWorkbench ().getSharedImages ();
    refreshAction.setImageDescriptor (sharedImages.getImageDescriptor (ISharedImages.IMG_OBJS_INFO_TSK));
    rotateAction = new Action () {
        @Override
        public void run () {
            Cycle cycle = (Cycle) getFirstSelectedElement ();
            if (cycle != null) {
                cycle.rotate ();
                refresh ();
            }
        }}

    ;
    rotateAction.setText (Messages.CycleView_popup_rotate);
    showNextResultAction = new ShowResultAction (true);
    showNextResultAction.setText (SearchMessages.ShowNextResultAction_label);
    SearchPluginImages.setImageDescriptors (showNextResultAction, SearchPluginImages.T_LCL, SearchPluginImages.IMG_LCL_SEARCH_NEXT);
    showNextResultAction.setToolTipText (SearchMessages.ShowNextResultAction_tooltip);
    showPreviousResultAction = new ShowResultAction (false);
    showPreviousResultAction.setText (SearchMessages.ShowPreviousResultAction_label);
    SearchPluginImages.setImageDescriptors (showPreviousResultAction, SearchPluginImages.T_LCL, SearchPluginImages.IMG_LCL_SEARCH_PREV);
    showPreviousResultAction.setToolTipText (SearchMessages.ShowPreviousResultAction_tooltip);
    removeSelectedMatches = new Action () {
        @Override
        public void run () {
            TreePath [] paths = getTreeSelection ().getPaths ();
            for (TreePath treePath : paths) {
                Object last = treePath.getLastSegment ();
                if (last instanceof SearchResult || last instanceof Cycle) {
                    ((CycleBaseElement) last).getParent ().getChildren ().remove (last);
                }
            }
            refresh ();
        }}

    ;
    removeSelectedMatches.setText (SearchMessages.RemoveSelectedMatchesAction_label);
    removeSelectedMatches.setToolTipText (SearchMessages.RemoveSelectedMatchesAction_tooltip);
    SearchPluginImages.setImageDescriptors (removeSelectedMatches, SearchPluginImages.T_LCL, SearchPluginImages.IMG_LCL_SEARCH_REM);
    removeAllMatches = new Action () {
        @Override
        public void run () {
            SearchResultRoot.getInstance ().getChildren ().clear ();
            refresh ();
        }}

    ;
    removeAllMatches.setText (SearchMessages.RemoveAllMatchesAction_label);
    SearchPluginImages.setImageDescriptors (removeAllMatches, SearchPluginImages.T_LCL, SearchPluginImages.IMG_LCL_SEARCH_REM_ALL);
    removeAllMatches.setToolTipText (SearchMessages.RemoveAllMatchesAction_tooltip);
    openAction = new Action () {
        @Override
        public void run () {
            Object obj = getFirstSelectedElement ();
            if (obj == null) {
                return;
            }
            if (obj instanceof Cycle) {
                Cycle cycle = (Cycle) obj;
                List < CycleType > types = cycle.getChildren ();
                for (CycleType cycleType : types) {
                    openInEditor (cycleType.getJavaElement (), - 1, - 1);
                }
                return;
            }
            IJavaElement element = null;
            int offset = - 1;
            int length = - 1;
            if (obj instanceof CycleRegion) {
                CycleRegion cycleRegion = (CycleRegion) obj;
                offset = cycleRegion.getOffset ();
                length = cycleRegion.getLength ();
                element = cycleRegion.getParent ().getJavaElement ();
            }
            if (obj instanceof CycleJavaElement) {
                element = ((CycleJavaElement) obj).getJavaElement ();
            }
            openInEditor (element, offset, length);
        } private void openInEditor (IJavaElement element, int offset, int length) {
            if (element == null) {
                return;
            }
            try {
                IEditorPart part = JavaUI.openInEditor (element, true, false);
                if (part == null) {
                    return;
                }
                if (offset != - 1 && length != - 1) {
                    EditorUtility.revealInEditor (part, offset, length);
                } else {
                    JavaUI.revealInEditor (part, element);
                }
            } catch (Exception e) {
                Log.error ("Can't open javalement in editor: " + JavaElementUtil.getElementName (element), e);
            }
        }}

    ;
    openAction.setText (Messages.CycleView_popup_open);
    copyAction = new Action () {
        @Override
        public void run () {
            List < ? > elements = getSelectedElements ();
            StringBuilder sb = new StringBuilder ();
            for (Object obj : elements) {
                sb.append (obj).append ('\n').append ('\n');
            }
            Transfer [] types = new Transfer [] {TextTransfer.getInstance ()};
            clipboard.setContents (new Object [] {sb.toString ()}, types);
        }}

    ;
    copyAction.setEnabled (true);
    copyAction.setText (Messages.CycleView_popup_copy_clipboard);
    copyAction.setImageDescriptor (sharedImages.getImageDescriptor (ISharedImages.IMG_TOOL_COPY));
    expandAllAction = new ExpandAllAction ();
    expandAllAction.setViewer (viewer);
    collapseAllAction = new CollapseAllAction ();
    collapseAllAction.setViewer (viewer);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleView.java" startline="203" endline="205">
public void run () {
    refresh ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleView.java" startline="216" endline="222">
public void run () {
    Cycle cycle = (Cycle) getFirstSelectedElement ();
    if (cycle != null) {
        cycle.rotate ();
        refresh ();
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleView.java" startline="246" endline="255">
public void run () {
    TreePath [] paths = getTreeSelection ().getPaths ();
    for (TreePath treePath : paths) {
        Object last = treePath.getLastSegment ();
        if (last instanceof SearchResult || last instanceof Cycle) {
            ((CycleBaseElement) last).getParent ().getChildren ().remove (last);
        }
    }
    refresh ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleView.java" startline="268" endline="271">
public void run () {
    SearchResultRoot.getInstance ().getChildren ().clear ();
    refresh ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleView.java" startline="283" endline="310">
public void run () {
    Object obj = getFirstSelectedElement ();
    if (obj == null) {
        return;
    }
    if (obj instanceof Cycle) {
        Cycle cycle = (Cycle) obj;
        List < CycleType > types = cycle.getChildren ();
        for (CycleType cycleType : types) {
            openInEditor (cycleType.getJavaElement (), - 1, - 1);
        }
        return;
    }
    IJavaElement element = null;
    int offset = - 1;
    int length = - 1;
    if (obj instanceof CycleRegion) {
        CycleRegion cycleRegion = (CycleRegion) obj;
        offset = cycleRegion.getOffset ();
        length = cycleRegion.getLength ();
        element = cycleRegion.getParent ().getJavaElement ();
    }
    if (obj instanceof CycleJavaElement) {
        element = ((CycleJavaElement) obj).getJavaElement ();
    }
    openInEditor (element, offset, length);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleView.java" startline="312" endline="332">
private void openInEditor (IJavaElement element, int offset, int length) {
    if (element == null) {
        return;
    }
    try {
        IEditorPart part = JavaUI.openInEditor (element, true, false);
        if (part == null) {
            return;
        }
        if (offset != - 1 && length != - 1) {
            EditorUtility.revealInEditor (part, offset, length);
        } else {
            JavaUI.revealInEditor (part, element);
        }
    } catch (Exception e) {
        Log.error ("Can't open javalement in editor: " + JavaElementUtil.getElementName (element), e);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleView.java" startline="341" endline="349">
public void run () {
    List < ? > elements = getSelectedElements ();
    StringBuilder sb = new StringBuilder ();
    for (Object obj : elements) {
        sb.append (obj).append ('\n').append ('\n');
    }
    Transfer [] types = new Transfer [] {TextTransfer.getInstance ()};
    clipboard.setContents (new Object [] {sb.toString ()}, types);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleView.java" startline="365" endline="380">
public void refresh () {
    viewer.refresh ();
    boolean hasInput = tree != null && tree.getItemCount () > 0;
    label.setText (hasInput ? "" : Messages.CycleView_run_ucd_for_results);
    if (hasInput) {
        tree.select (tree.getItem (0));
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleView.java" startline="386" endline="388">
public void setFocus () {
    viewer.getControl ().setFocus ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleView.java" startline="390" endline="393">
private List < ? > getSelectedElements () {
    ISelection selection = this.viewer.getSelection ();
    return ((IStructuredSelection) selection).toList ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleView.java" startline="395" endline="398">
private Object getFirstSelectedElement () {
    ISelection selection = this.viewer.getSelection ();
    return ((IStructuredSelection) selection).getFirstElement ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleView.java" startline="400" endline="403">
private ITreeSelection getTreeSelection () {
    ITreeSelection treeSelection = (ITreeSelection) CycleView.this.viewer.getSelection ();
    return treeSelection;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleView.java" startline="405" endline="407">
public static CycleView getInstance () {
    return INSTANCE;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleView.java" startline="414" endline="416">
public Image getImage (Object obj) {
    return ((CycleBaseElement) obj).getImage ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleView.java" startline="419" endline="421">
public String getText (Object obj) {
    return ((CycleBaseElement) obj).getText ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleView.java" startline="429" endline="431">
public void dispose () {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleView.java" startline="433" endline="435">
public Object [] getElements (Object parent) {
    return SearchResultRoot.getInstance ().getChildren ().toArray ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleView.java" startline="437" endline="439">
public Object [] getChildren (Object parent) {
    return ((CycleBaseElement) parent).getChildren ().toArray ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleView.java" startline="441" endline="443">
public Object getParent (Object child) {
    return ((CycleBaseElement) child).getParent ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleView.java" startline="445" endline="447">
public boolean hasChildren (Object parent) {
    return ((CycleBaseElement) parent).hasChildren ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleView.java" startline="449" endline="451">
public void inputChanged (Viewer v, Object oldInput, Object newInput) {
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleView.java" startline="457" endline="459">
public ShowResultAction (boolean next) {
    this.next = next;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleView.java" startline="462" endline="471">
public void run () {
    Object selected = getFirstSelectedElement ();
    if (selected != null) {
        CycleBaseElement first = (CycleBaseElement) selected;
        CycleRegionIterator iterator = new CycleRegionIterator ();
        CycleBaseElement nextMatch = iterator.getNext (first, next);
        TreeItem [] roots = tree.getItems ();
        iterateTreeItems (roots, nextMatch);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleView.java" startline="473" endline="482">
private void iterateTreeItems (TreeItem [] treeItems, CycleBaseElement nextMatch) {
    for (TreeItem treeItem : treeItems) {
        Object data = treeItem.getData ();
        if (nextMatch == data) {
            internalSetSelection (treeItem);
            return;
        }
        iterateTreeItems (getChildren (treeItem), nextMatch);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleView.java" startline="484" endline="493">
private void internalSetSelection (TreeItem treeItem) {
    if (treeItem != null) {
        Object data = treeItem.getData ();
        if (data != null) {
            viewer.setSelection (new StructuredSelection (data), true);
            openAction.run ();
        }
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleView.java" startline="495" endline="501">
private TreeItem [] getChildren (TreeItem item) {
    Object data = item.getData ();
    if (data != null) {
        viewer.setExpandedState (data, true);
    }
    return item.getItems ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleCalculator.java" startline="36" endline="40">
CycleCalculator (SearchResult searchResult, List < TypeAndMatches > typeAndRefsList, IProgressMonitor monitor) {
    this.searchResult = searchResult;
    this.typeAndMatchesList = typeAndRefsList;
    this.monitor = monitor;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleCalculator.java" startline="45" endline="49">
List < Cycle > calculate () {
    List < Cycle > allCycles = getAllCycles ();
    List < Cycle > cycleList = removeDoubleCycles (allCycles);
    return cycleList;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleCalculator.java" startline="54" endline="77">
private List < Cycle > getAllCycles () {
    List < Cycle > allCycles = new ArrayList < Cycle > ();
    int count = 0;
    int prevSize = 0;
    for (TypeAndMatches typeAndMatches : typeAndMatchesList) {
        Object [] bindings = new Object [] {Integer.valueOf (count ++), Integer.valueOf (typeAndMatchesList.size ()), typeAndMatches.getRoot ().getElementName ()};
        String mes = NLS.bind (Messages.CycleCalculator_Monitor, bindings);
        monitor.subTask (mes);
        monitor.worked (1);
        Stack < TypeAndMatches > path = new Stack < TypeAndMatches > ();
        IType startType = typeAndMatches.getRoot ();
        searchCycles (startType, path, allCycles);
        if (Log.isDebug ()) {
            int found = allCycles.size () - prevSize;
            Log.debug (found + " cycles found for " + typeAndMatches.getRoot ().getElementName () + " (including double cycles)");
        }
        prevSize = allCycles.size ();
    }
    return allCycles;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleCalculator.java" startline="82" endline="89">
private TypeAndMatches getTypeAndMatchesFor (IType startType) {
    for (TypeAndMatches typeAndMatches : typeAndMatchesList) {
        if (startType.equals (typeAndMatches.getRoot ())) {
            return typeAndMatches;
        }
    }
    return null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleCalculator.java" startline="95" endline="128">
private List < Cycle > removeDoubleCycles (List < Cycle > cyclesFound) {
    monitor.subTask (Messages.CycleCalculator_removeDoubleCycles);
    monitor.worked (1);
    List < Cycle > result = new ArrayList < Cycle > ();
    if (cyclesFound.isEmpty ()) {
        return result;
    }
    Collections.sort (cyclesFound, new Comparator < Cycle > () {
        public int compare (Cycle o1, Cycle o2) {
            return o1.getChildrenSize () - o2.getChildrenSize ();
        }}

    );
    result.add (cyclesFound.get (0));
    for (Cycle cycleToAdd : cyclesFound) {
        boolean isContained = false;
        for (int i = 0;
        i < result.size (); i ++) {
            Cycle cycleAlreadyAdded = result.get (i);
            if (cycleToAdd.contains (cycleAlreadyAdded)) {
                isContained = true;
                break;
            }
        }
        if (! isContained) {
            result.add (cycleToAdd);
        }
    }
    if (Log.isDebug ()) {
        int removed = cyclesFound.size () - result.size ();
        Log.debug ("Removed double cycle: " + removed);
    }
    return result;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleCalculator.java" startline="104" endline="106">
public int compare (Cycle o1, Cycle o2) {
    return o1.getChildrenSize () - o2.getChildrenSize ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleCalculator.java" startline="136" endline="162">
private void searchCycles (IType startType, Stack < TypeAndMatches > path, List < Cycle > result) {
    TypeAndMatches typeAndMatches = getTypeAndMatchesFor (startType);
    if (typeAndMatches == null) {
        return;
    }
    if (monitor.isCanceled ()) {
        return;
    }
    path.push (typeAndMatches);
    Set < IType > references = typeAndMatches.getTypeSearchMatches ();
    for (IType reference : references) {
        if (path.size () > Prefs.getCycleDepth ()) {
            continue;
        }
        TypeAndMatches first = path.firstElement ();
        if (first.getRoot ().equals (reference)) {
            LinkedList < CycleType > cycleTypeList = createCycleList (path);
            Cycle cycle = new Cycle (searchResult, cycleTypeList);
            result.add (cycle);
            continue;
        }
        searchCycles (reference, path, result);
    }
    path.pop ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleCalculator.java" startline="164" endline="173">
private static LinkedList < CycleType > createCycleList (List < TypeAndMatches > matches) {
    LinkedList < CycleType > result = new LinkedList < CycleType > ();
    for (int i = 0;
    i < matches.size (); i ++) {
        int next = (i + 1) % matches.size ();
        IType matchTarget = matches.get (next).getRoot ();
        CycleType cycleClass = matches.get (i).createCycleClass (matchTarget);
        result.add (cycleClass);
    }
    return result;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleIterator.java" startline="28" endline="48">
protected boolean handleType (IType type) throws CoreException {
    if (isPrivate (type) || type.isLocal () || type.isAnonymous ()) {
        debugNotHandle (type, "isPrivate || isLocal || isAnonymous");
        return false;
    }
    if (Prefs.isFilterType (type)) {
        debugNotHandle (type, "isFilterType");
        return false;
    }
    ICompilationUnit compilationUnit = type.getCompilationUnit ();
    IType primaryType = compilationUnit.findPrimaryType ();
    if (! primaryType.equals (type)) {
        debugNotHandle (type, "!primary type");
        return false;
    }
    debugHandle (type);
    this.types.add (type);
    return false;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleIterator.java" startline="51" endline="55">
public void handleEndGlobal (IJavaElement [] objects) throws CoreException {
    getMonitor ().beginTask (Messages.CycleIterator_MONITOR_INFO, types.size () * 2);
    CycleSearchManager cycleSearchManager = new CycleSearchManager (getMonitor (), types, objectsToIterate);
    cycleSearchManager.search ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleIterator.java" startline="58" endline="60">
public int getElelementsToDetectCount () {
    return types.size ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleIterator.java" startline="63" endline="65">
public String getJobName () {
    return Messages.CycleIterator_JobName;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleAction.java" startline="28" endline="30">
protected AbstractUCDetectorIterator createIterator () {
    return new CycleIterator ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleAction.java" startline="35" endline="51">
protected IStatus postIteration () {
    Display.getDefault ().asyncExec (new Runnable () {
        public void run () {
            try {
                UCDetectorPlugin.getActivePage ().showView (CycleView.ID);
                CycleView view = CycleView.getInstance ();
                if (view != null) {
                    view.refresh ();
                }
            } catch (PartInitException e) {
                status = UCDetectorPlugin.logToEclipseLog (Messages.CycleAction_cant_open_editor, e);
            }
        }}

    );
    return status;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleAction.java" startline="37" endline="48">
public void run () {
    try {
        UCDetectorPlugin.getActivePage ().showView (CycleView.ID);
        CycleView view = CycleView.getInstance ();
        if (view != null) {
            view.refresh ();
        }
    } catch (PartInitException e) {
        status = UCDetectorPlugin.logToEclipseLog (Messages.CycleAction_cant_open_editor, e);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleAction.java" startline="57" endline="64">
protected void handleJavaElementSelections (IAction action) {
    super.handleJavaElementSelections (action);
    for (IJavaElement javaElement : getSelections ()) {
        if (javaElement.getElementType () > IJavaElement.TYPE) {
            action.setEnabled (false);
        }
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/CycleRegionIterator.java" startline="17" endline="29">
public CycleRegion getNext (CycleBaseElement startElement, boolean isNext) {
    this.start = startElement;
    List < CycleRegion > results = new LinkedList < CycleRegion > ();
    getNext (SearchResultRoot.getInstance ().getChildren (), results);
    int index = results.indexOf (first);
    if (! isNext) {
        index --;
    } else if (isNext && startElement instanceof CycleRegion) {
        index ++;
    }

    return results.get (index < 0 ? results.size () - 1 : index >= results.size () ? 0 : index);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/CycleRegionIterator.java" startline="31" endline="45">
private void getNext (List < ? extends CycleBaseElement > elements, List < CycleRegion > results) {
    for (CycleBaseElement baseElement : elements) {
        if (baseElement == start) {
            startFound = true;
        }
        if (baseElement instanceof CycleRegion) {
            CycleRegion region = (CycleRegion) baseElement;
            results.add (region);
            if (startFound && first == null) {
                first = region;
            }
        }
        getNext (baseElement.getChildren (), results);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/SearchResultRoot.java" startline="34" endline="36">
public static final SearchResultRoot getInstance () {
    return INSTANCE;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/SearchResultRoot.java" startline="39" endline="41">
public List < SearchResult > getChildren () {
    return searchResults;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/SearchResultRoot.java" startline="44" endline="46">
public Image getImage () {
    return getImage (ISharedImages.IMG_TOOL_BACK);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/SearchResultRoot.java" startline="52" endline="54">
public CycleBaseElement getParent () {
    return null;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/SearchResultRoot.java" startline="57" endline="59">
public String getText () {
    return Messages.SearchResultRoot_Name;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/CycleBaseElement.java" startline="24" endline="26">
protected static final Image getImage (String id) {
    return PlatformUI.getWorkbench ().getSharedImages ().getImage (id);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/CycleBaseElement.java" startline="40" endline="42">
public final boolean hasChildren () {
    return ! getChildren ().isEmpty ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/CycleBaseElement.java" startline="44" endline="46">
public final int getChildrenSize () {
    return getChildren () == null ? 0 : getChildren ().size ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/CycleBaseElement.java" startline="49" endline="53">
public final String toString () {
    StringBuilder sb = new StringBuilder ();
    appendToString (this, sb, 0);
    return sb.toString ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/CycleBaseElement.java" startline="55" endline="65">
private final void appendToString (CycleBaseElement cycleBaseElement, StringBuilder sb, int level) {
    int nextLevel = level + 1;
    for (int i = 0;
    i < level; i ++) {
        sb.append ("  ");
    }
    sb.append ("|-").append (cycleBaseElement.getText ()).append ('\n');
    List < ? extends CycleBaseElement > children = cycleBaseElement.getChildren ();
    for (CycleBaseElement child : children) {
        appendToString (child, sb, nextLevel);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/CycleType.java" startline="31" endline="43">
public CycleType (IType type, List < CycleMember > cycleMembers) {
    if (type == null) {
        throw new IllegalArgumentException ("root may not be null");
    }
    if (cycleMembers == null || cycleMembers.size () == 0) {
        throw new IllegalArgumentException ("cycleMembers must exist");
    }
    this.type = type;
    this.cycleMembers = cycleMembers;
    for (CycleMember cycleMember : cycleMembers) {
        cycleMember.setParent (this);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/CycleType.java" startline="46" endline="48">
public List < CycleMember > getChildren () {
    return cycleMembers;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/CycleType.java" startline="51" endline="53">
public IType getJavaElement () {
    return type;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/CycleType.java" startline="56" endline="58">
public Cycle getParent () {
    return parent;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/CycleType.java" startline="60" endline="66">
int getMatchCount () {
    int result = 0;
    for (CycleMember cycleMember : cycleMembers) {
        result += cycleMember.getChildrenSize ();
    }
    return result;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/CycleType.java" startline="69" endline="77">
public String getText () {
    StringBuilder sb = new StringBuilder ();
    sb.append (super.getDefaultText (type)).append (' ');
    int size = getMatchCount ();
    sb.append ('(').append (size);
    sb.append (size < 2 ? Messages.CycleType_match : Messages.CycleType_matches);
    sb.append (')');
    return sb.toString ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/CycleType.java" startline="79" endline="81">
void setParent (Cycle parent) {
    this.parent = parent;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/Cycle.java" startline="33" endline="42">
public Cycle (SearchResult parent, LinkedList < CycleType > cycleList) {
    if (cycleList.size () < 2) {
        throw new IllegalArgumentException ("Cycle must have 2 Elements");
    }
    this.parent = parent;
    this.cycleList = cycleList;
    for (CycleType cycleType : cycleList) {
        cycleType.setParent (this);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/Cycle.java" startline="48" endline="67">
public boolean contains (Cycle other) {
    if (other.cycleList.size () > cycleList.size ()) {
        return false;
    }
    for (int iThis = 0;
    iThis < cycleList.size () * 2; iThis ++) {
        boolean same = true;
        for (int iOther = 0;
        iOther < other.cycleList.size (); iOther ++) {
            int offset = (iThis + iOther) % cycleList.size ();
            CycleType type = cycleList.get (offset);
            CycleType ohter = other.cycleList.get (iOther);
            if (! type.getJavaElement ().equals (ohter.getJavaElement ())) {
                same = false;
            }
        }
        if (same) {
            return true;
        }
    }
    return false;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/Cycle.java" startline="73" endline="85">
public boolean equals (Object obj) {
    if (this == obj) {
        return true;
    }
    if (! (obj instanceof Cycle)) {
        return false;
    }
    Cycle other = (Cycle) obj;
    if (cycleList.size () != other.cycleList.size ()) {
        return false;
    }
    return contains (other);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/Cycle.java" startline="88" endline="90">
public int hashCode () {
    return cycleList.hashCode ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/Cycle.java" startline="95" endline="97">
public void rotate () {
    cycleList.addLast (cycleList.removeFirst ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/Cycle.java" startline="100" endline="102">
public List < CycleType > getChildren () {
    return cycleList;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/Cycle.java" startline="105" endline="107">
public Image getImage () {
    return UCDetectorPlugin.getImage (UCDetectorPlugin.IMAGE_CYCLE);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/Cycle.java" startline="110" endline="112">
public SearchResult getParent () {
    return parent;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/Cycle.java" startline="114" endline="120">
private int getMatchCount () {
    int result = 0;
    for (CycleType cycleType : cycleList) {
        result += cycleType.getMatchCount ();
    }
    return result;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/Cycle.java" startline="123" endline="133">
public String getText () {
    StringBuilder sb = new StringBuilder ();
    sb.append (Messages.Cycle_Name).append (": ");
    for (CycleType cycleType : cycleList) {
        sb.append (cycleType.getJavaElement ().getElementName ()).append ('-');
    }
    sb.append (cycleList.getFirst ().getJavaElement ().getElementName ());
    sb.append (" - ").append (getChildrenSize ()).append (" classes");
    sb.append (" - ").append (getMatchCount ()).append (" matches");
    return sb.toString ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/CycleJavaElement.java" startline="29" endline="31">
public Image getImage () {
    return LABEL_PROVIDER_DELEGAT.getImage (getJavaElement ());
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/CycleJavaElement.java" startline="33" endline="35">
protected static String getDefaultText (IJavaElement javaElement) {
    return LABEL_PROVIDER_DELEGAT.getText (javaElement);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/CycleMember.java" startline="35" endline="40">
public CycleMember (IJavaElement match) {
    if (match == null) {
        throw new IllegalArgumentException ("match may not be null");
    }
    this.match = match;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/CycleMember.java" startline="42" endline="44">
public IJavaElement getMatch () {
    return match;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/CycleMember.java" startline="47" endline="49">
public List < CycleRegion > getChildren () {
    return cycleRegions;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/CycleMember.java" startline="52" endline="54">
public IJavaElement getJavaElement () {
    return match;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/CycleMember.java" startline="57" endline="59">
public CycleType getParent () {
    return parent;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/CycleMember.java" startline="62" endline="72">
public String getText () {
    IType typeFor = JavaElementUtil.getTypeFor (match, false);
    StringBuilder sb = new StringBuilder ();
    sb.append (super.getDefaultText (typeFor));
    if (match instanceof IImportDeclaration) {
        sb.append (" (import declaration)");
        return sb.toString ();
    }
    sb.append ('.').append (getDefaultText (match));
    return sb.toString ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/CycleMember.java" startline="74" endline="76">
void setParent (CycleType parent) {
    this.parent = parent;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/SearchResult.java" startline="40" endline="44">
public SearchResult (SearchResultRoot parent, IJavaElement [] selections, IJavaProject javaProject) {
    this.parent = parent;
    this.selections = selections;
    this.javaProject = javaProject;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/SearchResult.java" startline="47" endline="49">
public List < Cycle > getChildren () {
    return cycles;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/SearchResult.java" startline="52" endline="54">
public Image getImage () {
    return JavaUI.getSharedImages ().getImage (JavaPluginImages.IMG_OBJS_SEARCH_REF);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/SearchResult.java" startline="57" endline="59">
public CycleBaseElement getParent () {
    return parent;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/SearchResult.java" startline="64" endline="82">
public String getText () {
    StringBuilder search = new StringBuilder ();
    for (IJavaElement selection : selections) {
        if (selection.equals (javaProject)) {
            search.setLength (0);
            search.append (javaProject.getElementName ());
            break;
        } else if (selection.getJavaProject ().equals (javaProject)) {
            search.append (search.length () > 0 ? ", " : "");
            search.append (selection.getElementName ());
        }

    }
    Object [] bindings = new Object [] {search, javaProject.getElementName (), Integer.valueOf (getChildren ().size ())};
    return NLS.bind (Messages.SearchResult_get_text, bindings);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/SearchResult.java" startline="84" endline="86">
public void setCycles (List < Cycle > cycles) {
    this.cycles = cycles;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/CycleRegion.java" startline="37" endline="43">
public CycleRegion (CycleMember cycleMember, int offset, int length, int line, String strLine) {
    this.cycleMember = cycleMember;
    this.offset = offset;
    this.length = length;
    this.line = line;
    this.strLine = strLine;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/CycleRegion.java" startline="45" endline="47">
public int getOffset () {
    return offset;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/CycleRegion.java" startline="49" endline="51">
public int getLength () {
    return length;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/CycleRegion.java" startline="57" endline="59">
public List < CycleBaseElement > getChildren () {
    return Collections.emptyList ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/CycleRegion.java" startline="62" endline="65">
public Image getImage () {
    return JavaUI.getSharedImages ().getImage (JavaPluginImages.IMG_OBJS_SEARCH_OCCURRENCE);
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/CycleRegion.java" startline="68" endline="70">
public CycleMember getParent () {
    return cycleMember;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/model/CycleRegion.java" startline="73" endline="78">
public String getText () {
    StringBuilder sb = new StringBuilder ();
    sb.append (Messages.CycleRegion_Line).append (line);
    sb.append (": ").append (strLine);
    return sb.toString ();
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleSearchManager.java" startline="47" endline="60">
public CycleSearchManager (IProgressMonitor monitor, List < IType > types, IJavaElement [] selections) {
    this.monitor = monitor;
    this.selections = selections;
    for (IType type : types) {
        IJavaProject javaProject = type.getJavaProject ();
        List < IType > typesList = typesMap.get (javaProject);
        if (typesList == null) {
            typesList = new ArrayList < IType > ();
            typesMap.put (javaProject, typesList);
        }
        typesList.add (type);
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleSearchManager.java" startline="62" endline="86">
public void search () throws CoreException {
    SearchResultRoot root = SearchResultRoot.getInstance ();
    monitor.subTask ("Search cycles");
    monitor.worked (1);
    Set < Entry < IJavaProject, List < IType > > > entrySet = typesMap.entrySet ();
    int projectNr = 1;
    for (Entry < IJavaProject, List < IType > > entry : entrySet) {
        IJavaProject javaProject = entry.getKey ();
        List < IType > types = entry.getValue ();
        List < TypeAndMatches > typeAndRefsList = searchAllTypes (types, projectNr);
        SearchResult searchResult = new SearchResult (root, selections, javaProject);
        CycleCalculator cycleCalculator = new CycleCalculator (searchResult, typeAndRefsList, monitor);
        monitor.subTask (Messages.CycleSearchManager_Project_Info + javaProject.getElementName ());
        monitor.worked (1);
        List < Cycle > cycleList = cycleCalculator.calculate ();
        searchResult.setCycles (cycleList);
        if (Log.isDebug ()) {
            Log.debug ("Found cycles:\r\n" + searchResult);
        }
        root.getChildren ().add (searchResult);
        projectNr ++;
    }
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleSearchManager.java" startline="88" endline="115">
private List < TypeAndMatches > searchAllTypes (List < IType > types, int projectNr) throws CoreException {
    List < TypeAndMatches > result = new ArrayList < TypeAndMatches > ();
    int search = 0;
    for (IType type : types) {
        if (monitor.isCanceled ()) {
            break;
        }
        search ++;
        String mes = getMonitorMessage (types, projectNr, search, type);
        monitor.subTask (mes);
        monitor.worked (1);
        TypeAndMatches typeAndMatches = new TypeAndMatches (type);
        SearchPattern pattern = SearchPattern.createPattern (type, IJavaSearchConstants.REFERENCES, SearchPattern.R_EXACT_MATCH);
        ReferenceSearchRequestor requestor = new ReferenceSearchRequestor (typeAndMatches);
        JavaElementUtil.runSearch (pattern, requestor);
        result.add (typeAndMatches);
        if (Log.isDebug ()) {
            int found = typeAndMatches.getTypeSearchMatches ().size ();
            Log.debug ("Found %s references for %s", Integer.valueOf (found), type.getElementName ());
        }
    }
    return result;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleSearchManager.java" startline="117" endline="134">
private String getMonitorMessage (List < IType > types, int projectNr, int search, IType type) {
    List < Object > bindingList = new ArrayList < Object > ();
    if (typesMap.size () > 1) {
        bindingList.add (Integer.valueOf (projectNr));
        bindingList.add (Integer.valueOf (typesMap.size ()));
    }
    bindingList.add (Integer.valueOf (search));
    bindingList.add (Integer.valueOf (types.size ()));
    bindingList.add (type.getElementName ());
    Object [] bindings = bindingList.toArray ();
    String message = typesMap.size () > 1 ? NLS.bind (Messages.CycleSearchManager_MonitorProject, bindings) : NLS.bind (Messages.CycleSearchManager_Monitor, bindings);
    if (Log.isDebug ()) {
        Log.debug (message);
    }
    return message;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleSearchManager.java" startline="142" endline="144">
private ReferenceSearchRequestor (TypeAndMatches typeAndMatches) {
    this.typeAndMatches = typeAndMatches;
}
</source>
<source file="/home/ubuntu/Webpage/app_collaborative_sci_workflow/workflow_outputs/test_workflow/ucdetector/src/cycle/org/ucdetector/cycle/CycleSearchManager.java" startline="147" endline="153">
public void acceptSearchMatch (SearchMatch match) {
    IJavaElement javaElement = SearchManager.defaultIgnoreMatch (match);
    if (javaElement == null) {
        return;
    }
    this.typeAndMatches.addMatch (match);
}
</source>
